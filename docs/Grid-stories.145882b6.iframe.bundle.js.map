{"version":3,"file":"Grid-stories.145882b6.iframe.bundle.js","mappings":";;;;;;;;;;;;;AAuBA;;;;;;;;;;;;;;ACEA;;;ACJA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAIA","sources":["webpack://@arthur/docs/../../packages/arthur-ui/src/Grid/Grid.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/Grid/Row.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/Grid/Column.tsx"],"sourcesContent":["import cx from 'classnames';\r\nimport type { PropsWithChildren } from 'react';\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport interface GridProps {\r\n  className?: string;\r\n}\r\n\r\nconst GridDiv = styled.div`\r\n  display: grid;\r\n  gap: 12px;\r\n  width: 100%;\r\n  outline: 1px dotted blue;\r\n  grid-template-columns: repeat(12, 1fr);\r\n  @media only screen and (max-width: 1024px) {\r\n    grid-template-columns: repeat(8, 1fr);\r\n  }\r\n  @media only screen and (max-width: 640px) {\r\n    grid-template-columns: repeat(4, 1fr);\r\n  }\r\n`;\r\n\r\nexport default function Grid({ children, className: customClassName, ...rest }: PropsWithChildren<GridProps>) {\r\n  const className = cx({ [`${customClassName}`]: Boolean(customClassName) }, { 'arthur-grid': true });\r\n\r\n  // cast as any to let TypeScript allow passing in attributes to base component\r\n  return (\r\n    <GridDiv className={className} {...rest}>\r\n      {children}\r\n    </GridDiv>\r\n  );\r\n}\r\n","import type { PropsWithChildren } from 'react';\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport classnames from 'classnames';\r\n\r\nexport interface RowProps {\r\n  className?: string;\r\n}\r\n\r\nconst RowDiv = styled.div<RowProps>`\r\n  display: grid;\r\n  width: 100%;\r\n  outline: 1px dotted lime;\r\n  grid-column: span 12 / span 12;\r\n  grid-template-columns: repeat(12, 1fr);\r\n  @media only screen and (max-width: 1024px) {\r\n    grid-column: span 8 / span 8;\r\n    grid-template-columns: repeat(8, 1fr);\r\n  }\r\n  @media only screen and (max-width: 640px) {\r\n    grid-column: span 4 / span 4;\r\n    grid-template-columns: repeat(4, 1fr);\r\n  }\r\n`;\r\n\r\nexport function Row({ children, className: customClassName, ...rest }: PropsWithChildren<RowProps>) {\r\n  const className = classnames({ [`${customClassName}`]: Boolean(customClassName) }, { 'arthur-row': true });\r\n\r\n  return (\r\n    <RowDiv className={className} {...rest}>\r\n      {children}\r\n    </RowDiv>\r\n  );\r\n}\r\n\r\nRow.displayName = 'Row';\r\n","import classnames from 'classnames';\r\nimport type { PropsWithChildren } from 'react';\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport interface ColumnProps {\r\n  lgStart?: number;\r\n  smStart?: number;\r\n  mdStart?: number;\r\n  className?: string;\r\n  sm?: number;\r\n  md?: number;\r\n  lg?: number;\r\n  start?: number;\r\n}\r\n\r\nconst ColumnDiv = styled.div<\r\n  Pick<ColumnProps, 'sm' | 'md' | 'lg' | 'start'> & { $lgStart?: number; $mdStart?: number; $smStart?: number }\r\n>`\r\n  outline: 1px magenta solid;\r\n  min-height: 100px;\r\n  grid-column-start: ${(props) => (props.$lgStart ? props.$lgStart : `span ${props.lg}`)};\r\n  grid-column-end: ${(props) => `span ${props.lg}`};\r\n  @media only screen and (max-width: 1024px) {\r\n    grid-column-start: ${(props) => (props.$mdStart ? props.$mdStart : `span ${props.md}`)};\r\n    grid-column-end: ${(props) => `span ${props.md}`};\r\n  }\r\n  @media only screen and (max-width: 640px) {\r\n    grid-column-start: ${(props) => (props.$smStart ? props.$smStart : `span ${props.sm}`)};\r\n    grid-column-end: ${(props) => `span ${props.sm}`};\r\n  }\r\n`;\r\n\r\nexport function Column({\r\n  children,\r\n  className,\r\n  sm,\r\n  md,\r\n  lg,\r\n  start,\r\n  lgStart,\r\n  smStart,\r\n  mdStart,\r\n  ...rest\r\n}: PropsWithChildren<ColumnProps>) {\r\n  const classes = classnames(\r\n    className,\r\n    { [`col-lg-${lg}`]: Boolean(lg) },\r\n    { [`col-md-${md}`]: Boolean(md) },\r\n    { [`col-sm-${sm}`]: Boolean(sm) },\r\n  );\r\n\r\n  return (\r\n    <ColumnDiv\r\n      $lgStart={lgStart}\r\n      $mdStart={mdStart}\r\n      $smStart={smStart}\r\n      className={classes}\r\n      lg={lg}\r\n      md={md}\r\n      sm={sm}\r\n      start={start}\r\n      {...rest}\r\n    >\r\n      {children}\r\n    </ColumnDiv>\r\n  );\r\n}\r\n\r\nColumn.displayName = 'Column';\r\n"],"names":[],"sourceRoot":""}