{"version":3,"file":"Grid-stories.19a8d6f0.iframe.bundle.js","mappings":";;;;;;;;;;;;;AAuBA;;;;;;;;;;;;;;ACEA;;;ACJA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAIA","sources":["webpack://@arthur/docs/../../packages/arthur-ui/src/Grid/Grid.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/Grid/Row.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/Grid/Column.tsx"],"sourcesContent":["import cx from 'classnames';\nimport type { PropsWithChildren } from 'react';\nimport React from 'react';\nimport styled from 'styled-components';\n\nexport interface GridProps {\n  className?: string;\n}\n\nconst GridDiv = styled.div`\n  display: grid;\n  gap: 12px;\n  width: 100%;\n  outline: 1px dotted blue;\n  grid-template-columns: repeat(12, 1fr);\n  @media only screen and (max-width: 1024px) {\n    grid-template-columns: repeat(8, 1fr);\n  }\n  @media only screen and (max-width: 640px) {\n    grid-template-columns: repeat(4, 1fr);\n  }\n`;\n\nexport default function Grid({ children, className: customClassName, ...rest }: PropsWithChildren<GridProps>) {\n  const className = cx({ [`${customClassName}`]: Boolean(customClassName) }, { 'arthur-grid': true });\n\n  // cast as any to let TypeScript allow passing in attributes to base component\n  return (\n    <GridDiv className={className} {...rest}>\n      {children}\n    </GridDiv>\n  );\n}\n","import type { PropsWithChildren } from 'react';\nimport React from 'react';\nimport styled from 'styled-components';\nimport classnames from 'classnames';\n\nexport interface RowProps {\n  className?: string;\n}\n\nconst RowDiv = styled.div<RowProps>`\n  display: grid;\n  width: 100%;\n  outline: 1px dotted lime;\n  grid-column: span 12 / span 12;\n  grid-template-columns: repeat(12, 1fr);\n  @media only screen and (max-width: 1024px) {\n    grid-column: span 8 / span 8;\n    grid-template-columns: repeat(8, 1fr);\n  }\n  @media only screen and (max-width: 640px) {\n    grid-column: span 4 / span 4;\n    grid-template-columns: repeat(4, 1fr);\n  }\n`;\n\nexport function Row({ children, className: customClassName, ...rest }: PropsWithChildren<RowProps>) {\n  const className = classnames({ [`${customClassName}`]: Boolean(customClassName) }, { 'arthur-row': true });\n\n  return (\n    <RowDiv className={className} {...rest}>\n      {children}\n    </RowDiv>\n  );\n}\n\nRow.displayName = 'Row';\n","import classnames from 'classnames';\nimport type { PropsWithChildren } from 'react';\nimport React from 'react';\nimport styled from 'styled-components';\n\nexport interface ColumnProps {\n  lgStart?: number;\n  smStart?: number;\n  mdStart?: number;\n  className?: string;\n  sm?: number;\n  md?: number;\n  lg?: number;\n  start?: number;\n}\n\nconst ColumnDiv = styled.div<\n  Pick<ColumnProps, 'sm' | 'md' | 'lg' | 'start'> & { $lgStart?: number; $mdStart?: number; $smStart?: number }\n>`\n  outline: 1px magenta solid;\n  min-height: 100px;\n  grid-column-start: ${(props) => (props.$lgStart ? props.$lgStart : `span ${props.lg}`)};\n  grid-column-end: ${(props) => `span ${props.lg}`};\n  @media only screen and (max-width: 1024px) {\n    grid-column-start: ${(props) => (props.$mdStart ? props.$mdStart : `span ${props.md}`)};\n    grid-column-end: ${(props) => `span ${props.md}`};\n  }\n  @media only screen and (max-width: 640px) {\n    grid-column-start: ${(props) => (props.$smStart ? props.$smStart : `span ${props.sm}`)};\n    grid-column-end: ${(props) => `span ${props.sm}`};\n  }\n`;\n\nexport function Column({\n  children,\n  className,\n  sm,\n  md,\n  lg,\n  start,\n  lgStart,\n  smStart,\n  mdStart,\n  ...rest\n}: PropsWithChildren<ColumnProps>) {\n  const classes = classnames(\n    className,\n    { [`col-lg-${lg}`]: Boolean(lg) },\n    { [`col-md-${md}`]: Boolean(md) },\n    { [`col-sm-${sm}`]: Boolean(sm) },\n  );\n\n  return (\n    <ColumnDiv\n      $lgStart={lgStart}\n      $mdStart={mdStart}\n      $smStart={smStart}\n      className={classes}\n      lg={lg}\n      md={md}\n      sm={sm}\n      start={start}\n      {...rest}\n    >\n      {children}\n    </ColumnDiv>\n  );\n}\n\nColumn.displayName = 'Column';\n"],"names":[],"sourceRoot":""}