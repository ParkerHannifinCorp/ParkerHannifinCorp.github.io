{"version":3,"file":"NumberInput-stories.3092ddb0.iframe.bundle.js","mappings":";;;AAiBA;;AAGA;;AAEA;;AAGA;;AAEA;;AAKA;AAEA;;;;AAIA;;;AAIA;AACA;;;;AAIA;;;AAMA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;AAmBA;AACA;;;;;AAKA;;;AAGA;AACA;;;;AAIA;;;;;;;;;;AAUA;AACA;;;;AAIA;;;AAGA;AACA;;;;;AAKA;AACA;;;AAGA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;AAKA;AACA;AAwCA;AC5KA;;;AAGA;;;;;AAKA;;;;AAIA;;;AAIA;AACA;;;AAGA;;;;;AAKA;;;;AAIA;;;AAMA;AACA;AACA;;;AAGA;;;;AAIA;;;;AAIA;AACA;;;;AAIA;AACA;AACA;;;AAGA;;;;;;;;AAQA;;;AAGA;;;;AAIA;;;;AAIA;AA0BA;AC3FA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;;;;;;;;;;;AAWA;;;;;;;;AAQA;;;AAKA;AACA;AAGA","sources":["webpack://@arthur/docs/../../packages/arthur-ui/src/NumberInput/NumberInput.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/FormField/FormField.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/Icon/Icon.tsx"],"sourcesContent":["import type { ReactNode } from 'react';\r\nimport React, { forwardRef, useCallback, useEffect, useRef, useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport classNames from 'classnames';\r\nimport { useEnsureId } from '../hook';\r\nimport FormField from '../FormField';\r\nimport Icon from '../Icon';\r\nimport {\r\n  NumberInputAlignmentEnum,\r\n  type NumberInputAlignment,\r\n  type NumberInputSize,\r\n  NumberInputSizeEnum,\r\n} from './types';\r\n\r\nconst alignmentStyles = {\r\n  left: css`\r\n    & .arthur-number-input {\r\n      text-align: ${(props) => props.theme.token['text-align'].left};\r\n    }\r\n  `,\r\n  center: css`\r\n    & .arthur-number-input {\r\n      text-align: ${(props) => props.theme.token['text-align'].center};\r\n    }\r\n  `,\r\n  right: css`\r\n    & .arthur-number-input {\r\n      text-align: ${(props) => props.theme.token['text-align'].right};\r\n    }\r\n  `,\r\n};\r\n\r\nconst sizeStyles = {\r\n  small: css`\r\n    font-size: ${(props) => props.theme.token.size.font.small};\r\n    min-height: 32px;\r\n\r\n    & .arthur-number-input {\r\n      font-size: ${(props) => props.theme.token.size.font.small};\r\n      min-height: 32px;\r\n    }\r\n  `,\r\n  medium: css`\r\n    font-size: ${(props) => props.theme.token.size.font.medium};\r\n    min-height: 40px;\r\n\r\n    & .arthur-number-input {\r\n      font-size: ${(props) => props.theme.token.size.font.medium};\r\n      min-height: 40px;\r\n    }\r\n  `,\r\n};\r\n\r\nconst StyledRoot = styled.span<{ alignment: NumberInputAlignment; size: NumberInputSize }>`\r\n  align-items: center;\r\n  border: 1px solid ${(props) => props.theme.token.color.palette.gray[75]};\r\n  border-radius: ${(props) => props.theme.token.radius.border.basic};\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  flex-direction: row;\r\n  min-width: 300px;\r\n  overflow: hidden;\r\n  position: relative;\r\n\r\n  input[type='number']::-webkit-inner-spin-button,\r\n  input[type='number']::-webkit-outer-spin-button {\r\n    -webkit-appearance: none;\r\n    margin: 0;\r\n  }\r\n\r\n  input[type='number'] {\r\n    appearance: textfield;\r\n  }\r\n\r\n  & .arthur-number-prefix {\r\n    font-family: ${(props) => props.theme.token.font.family['sans-serif']};\r\n    padding-left: ${(props) => props.theme.token.size.spacing['small-1x']};\r\n    user-select: none;\r\n  }\r\n\r\n  & .arthur-number-input {\r\n    background-color: ${(props) => props.theme.token.color.white};\r\n    border: 0px none;\r\n    box-sizing: border-box;\r\n    font-family: ${(props) => props.theme.token.font.family['sans-serif']};\r\n    padding: 0px ${(props) => props.theme.token.size.spacing[1]};\r\n    width: 100%;\r\n\r\n    &::placeholder {\r\n      color: ${(props) => props.theme.token.color.palette.gray[20]};\r\n    }\r\n\r\n    &:focus {\r\n      outline: none;\r\n    }\r\n  }\r\n\r\n  &:has(.arthur-number-input:focus) {\r\n    border: 1px solid transparent;\r\n    outline: ${(props) => props.theme.token.size.border.medium} solid\r\n      ${(props) => props.theme.token.color.palette.gold.base};\r\n  }\r\n\r\n  &.arthur-number--invalid {\r\n    border-color: ${(props) => props.theme.token.color.feedback.error};\r\n\r\n    &:has(.arthur-number-input:focus) {\r\n      outline: ${(props) => props.theme.token.size.border.medium} solid\r\n        ${(props) => props.theme.token.color.feedback.error};\r\n    }\r\n  }\r\n\r\n  &.arthur-number--disabled {\r\n    border: 1px solid ${(props) => props.theme.token.color.palette.gray[20]};\r\n    color: ${(props) => props.theme.token.color.palette.gray[20]};\r\n\r\n    & .arthur-number-input {\r\n      color: ${(props) => props.theme.token.color.palette.gray[20]};\r\n    }\r\n  }\r\n\r\n  &.arthur-number--readonly {\r\n    & .arthur-number-input {\r\n      cursor: pointer;\r\n    }\r\n  }\r\n\r\n  & .arthur-number-steps {\r\n    display: flex;\r\n    gap: 8px;\r\n    margin: 0 8px;\r\n    min-height: 18px;\r\n  }\r\n\r\n  & .arthur-number-step {\r\n    &:first-child {\r\n      border-right: ${(props) => `1px solid ${props.theme.token.color.palette.gray[20]}`};\r\n      padding-right: 8px;\r\n    }\r\n  }\r\n\r\n  ${(props) => alignmentStyles[props.alignment]}\r\n  ${(props) => sizeStyles[props.size]}\r\n`;\r\n\r\nexport interface NumberInputProps {\r\n  /**\r\n   * @default  left\r\n   */\r\n  alignment?: NumberInputAlignment;\r\n  /**\r\n   * @default medium\r\n   */\r\n  size?: NumberInputSize;\r\n  min?: number;\r\n  max?: number;\r\n  autoComplete?: boolean;\r\n  className?: string;\r\n  /**\r\n   * @default false\r\n   */\r\n  disabled?: boolean;\r\n  id?: string;\r\n  maxLength?: number;\r\n  minLength?: number;\r\n  /**\r\n   * If true, this will add a red * to your label\r\n   *\r\n   * @default false\r\n   */\r\n  required?: boolean;\r\n  prefix?: ReactNode;\r\n  errorText?: string;\r\n  infoText?: string;\r\n  readOnly?: boolean;\r\n  label?: string;\r\n  placeholder?: string;\r\n  value?: number;\r\n  defaultValue?: number;\r\n  onChange?: (value?: number) => void;\r\n}\r\n\r\nconst NumberInput = forwardRef<HTMLDivElement, NumberInputProps>((props, forwardedRef) => {\r\n  const {\r\n    alignment = NumberInputAlignmentEnum.left,\r\n    autoComplete,\r\n    className,\r\n    disabled,\r\n    errorText,\r\n    id,\r\n    infoText,\r\n    label,\r\n    prefix,\r\n    readOnly,\r\n    required,\r\n    size = NumberInputSizeEnum.medium,\r\n    onChange,\r\n    placeholder,\r\n    value,\r\n    min,\r\n    max,\r\n    defaultValue,\r\n  } = props;\r\n\r\n  const isControlled = Boolean(Boolean(value) && !defaultValue && Boolean(onChange));\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'arthur-number',\r\n    `arthur-number--alignment-${alignment}`,\r\n    `arthur-number--size-${size}`,\r\n    {\r\n      'arthur-number--disabled': disabled === true,\r\n      'arthur-number--readonly': readOnly === true,\r\n    },\r\n  );\r\n\r\n  const [uncontrolledValue, setUncontrolledValue] = useState(defaultValue);\r\n\r\n  const hasMinValue = min !== undefined;\r\n\r\n  const hasMaxValue = max !== undefined;\r\n\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const internalValue = isControlled ? value : uncontrolledValue;\r\n\r\n  const targetId = useEnsureId(id);\r\n\r\n  const handleChange = useCallback(\r\n    (event: React.ChangeEvent<HTMLInputElement>) => {\r\n      const nextValue = Number(event.target.value);\r\n      if (isControlled) {\r\n        onChange?.(nextValue);\r\n      } else {\r\n        setUncontrolledValue(nextValue);\r\n      }\r\n    },\r\n    [isControlled, onChange],\r\n  );\r\n\r\n  const handleStepDownClick = useCallback(() => {\r\n    inputRef.current?.stepDown();\r\n  }, []);\r\n\r\n  const handleStepUpClick = useCallback(() => {\r\n    inputRef.current?.stepUp();\r\n  }, []);\r\n\r\n  // call onChange when internalValue changes\r\n  useEffect(() => {\r\n    onChange?.(internalValue);\r\n  }, [internalValue, onChange]);\r\n\r\n  return (\r\n    <FormField\r\n      className={className}\r\n      disabled={disabled}\r\n      errorText={errorText}\r\n      id={targetId}\r\n      infoText={infoText}\r\n      label={label}\r\n      ref={forwardedRef}\r\n      required={required}\r\n      size={size}\r\n    >\r\n      <StyledRoot alignment={alignment} className={classes} size={size}>\r\n        {prefix ? <span className='arthur-number-prefix'>{prefix}</span> : null}\r\n\r\n        <input\r\n          autoComplete={autoComplete === true ? 'on' : 'off'}\r\n          className='arthur-number-input'\r\n          disabled={disabled}\r\n          id={targetId}\r\n          max={max}\r\n          min={min}\r\n          onChange={handleChange}\r\n          placeholder={placeholder}\r\n          readOnly={readOnly}\r\n          ref={inputRef}\r\n          type='number'\r\n          value={internalValue}\r\n        />\r\n        <span className='arthur-number-steps'>\r\n          <Icon\r\n            className='arthur-number-step'\r\n            disabled={disabled || (typeof internalValue === 'number' && hasMinValue && internalValue <= min)}\r\n            onClick={handleStepDownClick}\r\n            size='small'\r\n            value='subtract'\r\n          />\r\n          <Icon\r\n            className='arthur-number-step'\r\n            disabled={disabled || (typeof internalValue === 'number' && hasMaxValue && internalValue >= max)}\r\n            onClick={handleStepUpClick}\r\n            size='small'\r\n            value='add'\r\n          />\r\n        </span>\r\n      </StyledRoot>\r\n    </FormField>\r\n  );\r\n});\r\n\r\nexport default NumberInput;\r\n\r\nNumberInput.displayName = 'NumberInput';\r\n","import type { PropsWithChildren } from 'react';\r\nimport React, { forwardRef } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport classNames from 'classnames';\r\nimport { useEnsureId } from '../hook';\r\nimport type { FormFieldSize } from './types';\r\nimport { FormFieldSizeEnum } from './types';\r\n\r\nconst sizeStyles = {\r\n    small: css`\r\n        font-size: ${(props) => props.theme.token.size.font.small};\r\n\r\n        & .arthur-field-header-label {\r\n            font-size: ${(props) => props.theme.token.size.font.small};\r\n        }\r\n\r\n        & .arthur-field-footer {\r\n            & .arthur-field-footer-info {\r\n                font-size: ${(props) => props.theme.token.size.font.small};\r\n            }\r\n\r\n            & .arthur-field-footer-error {\r\n                font-size: ${(props) => props.theme.token.size.font.small};\r\n            }\r\n        }\r\n    `,\r\n    medium: css`\r\n        font-size: ${(props) => props.theme.token.size.font.medium};\r\n\r\n        & .arthur-field-header-label {\r\n            font-size: ${(props) => props.theme.token.size.font.medium};\r\n        }\r\n\r\n        & .arthur-field-footer {\r\n            & .arthur-field-footer-info {\r\n                font-size: ${(props) => props.theme.token.size.font.medium};\r\n            }\r\n\r\n            & .arthur-field-footer-error {\r\n                font-size: ${(props) => props.theme.token.size.font.medium};\r\n            }\r\n        }\r\n    `,\r\n};\r\n\r\nconst StyledRoot = styled.div<{ size: FormFieldSize; $showInfoText: boolean; $showErrorText: boolean }>`\r\n    font-family: ${(props) => props.theme.token.font.family['sans-serif']};\r\n    color: ${(props) => props.theme.token.color.black};\r\n\r\n    & .arthur-field-header {\r\n        margin-bottom: ${(props) => props.theme.token.size.spacing['small-2x']};\r\n    }\r\n\r\n    & .arthur-field-header-label {\r\n        font-weight: ${(props) => props.theme.token.weight.font.bold};\r\n    }\r\n\r\n    & .arthur-field-header-required {\r\n        color: ${(props) => props.theme.token.color.feedback.error};\r\n        padding-left: ${(props) => props.theme.token.size.spacing['small-2x']};\r\n    }\r\n\r\n    & .arthur-field-footer {\r\n        margin-top: ${(props) => props.theme.token.size.spacing['small-2x']};\r\n        ${(props) => props.$showInfoText && `color: ${props.theme.token.color.feedback.info};`}\r\n        ${(props) => props.$showErrorText && `color: ${props.theme.token.color.feedback.error};`}\r\n\r\n    & .arthur-field-footer-info {\r\n            padding-right: ${(props) => props.theme.token.size.spacing['small-2x']};\r\n        }\r\n\r\n        & .arthur-field-footer-error {\r\n        }\r\n    }\r\n\r\n    &.arthur-field--disabled {\r\n        color: ${(props) => props.theme.token.color.palette.gray[20]};\r\n\r\n        & .arthur-field-header-required {\r\n            color: ${(props) => props.theme.token.color.palette.gray[20]};\r\n        }\r\n\r\n        & .arthur-field-footer {\r\n            color: ${(props) => props.theme.token.color.palette.gray[20]};\r\n        }\r\n    }\r\n\r\n    ${(props) => sizeStyles[props.size]}\r\n`;\r\n\r\nexport interface FormFieldProps {\r\n    errorText?: string;\r\n    infoText?: string;\r\n    invalid?: boolean;\r\n    /**\r\n     * If true, this will add a red * to your label\r\n     *\r\n     * @default false\r\n     */\r\n    required?: boolean;\r\n    /**\r\n     * @default medium\r\n     */\r\n    size?: FormFieldSize;\r\n    /**\r\n     * @default false\r\n     */\r\n    disabled?: boolean;\r\n    label?: string;\r\n    id?: string;\r\n    className?: string;\r\n}\r\n\r\nconst FormField = forwardRef<HTMLDivElement, PropsWithChildren<FormFieldProps>>((props, forwardedRef) => {\r\n    const {\r\n        className,\r\n        id,\r\n        children,\r\n        disabled,\r\n        errorText,\r\n        label,\r\n        infoText,\r\n        size = FormFieldSizeEnum.medium,\r\n        required,\r\n        ...rest\r\n    } = props;\r\n\r\n    const targetId = useEnsureId(id);\r\n\r\n    const showHeader = Boolean(label);\r\n\r\n    const showErrorText = Boolean(errorText);\r\n\r\n    const showInfoText = Boolean(infoText);\r\n\r\n    const showFooter = showErrorText || showInfoText;\r\n\r\n    const classes = classNames(className, 'arthur-field', `arthur-field--size-${size}`, {\r\n        'arthur-field--disabled': disabled === true,\r\n    });\r\n\r\n    return (\r\n        <StyledRoot\r\n            $showErrorText={showErrorText}\r\n            $showInfoText={showInfoText}\r\n            className={classes}\r\n            ref={forwardedRef}\r\n            size={size}\r\n            {...rest}\r\n        >\r\n            {showHeader ? (\r\n                <div className='arthur-field-header'>\r\n                    <label className='arthur-field-header-label' htmlFor={targetId}>\r\n                        {label}\r\n                    </label>\r\n                    {required === true && <span className='arthur-field-header-required'>*</span>}\r\n                </div>\r\n            ) : null}\r\n            {children}\r\n            {showFooter ? (\r\n                <div className='arthur-field-footer'>\r\n                    {showInfoText ? <span className='arthur-field-footer-info'>{infoText}</span> : null}\r\n                    {showErrorText ? <span className='arthur-field-footer-error'>{errorText}</span> : null}\r\n                </div>\r\n            ) : null}\r\n        </StyledRoot>\r\n    );\r\n});\r\n\r\nexport default FormField;\r\nFormField.displayName = 'FormField';\r\n","import React, { forwardRef, useCallback } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport classNames from 'classnames';\r\nimport { type IconValue, type IconSizes, IconSizesEnum } from './types';\r\nimport { ICON_VALUES } from './constants';\r\n\r\nexport interface IconProps {\r\n    className?: string;\r\n    /**\r\n     * @default false\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * @default medium\r\n     */\r\n    size?: IconSizes;\r\n    onClick?: (event: React.MouseEvent<HTMLSpanElement>) => unknown;\r\n    value: IconValue;\r\n}\r\n\r\nconst iconSizeStyles = {\r\n    'small-1x': css`\r\n        font-size: ${(props) => props.theme.token.size.font['small-1x']};\r\n    `,\r\n    small: css`\r\n        font-size: ${(props) => props.theme.token.size.font.small};\r\n    `,\r\n    medium: css`\r\n        font-size: ${(props) => props.theme.token.size.font.medium};\r\n    `,\r\n    large: css`\r\n        font-size: ${(props) => props.theme.token.size.font.large};\r\n    `,\r\n};\r\n\r\nconst StyledRoot = styled.span<{ disabled?: boolean }>`\r\n    background-color: transparent;\r\n    border: 0px none;\r\n    outline: 0px none;\r\n    padding: 0px;\r\n\r\n    &:not(.arthur-icon--disabled) {\r\n        &.arthur-icon--clickable {\r\n            &:hover,\r\n            &:focus,\r\n            &:active {\r\n                color: ${(props) => props.theme.token.color.palette.gold.base};\r\n                cursor: pointer;\r\n                outline: 0px none;\r\n            }\r\n        }\r\n    }\r\n\r\n    &.arthur-icon--disabled {\r\n        color: ${(props) => props.theme.token.color.action.text.primary.disabled};\r\n        cursor: default;\r\n    }\r\n`;\r\n\r\nconst StyledIcon = styled.i<{ size: IconSizes }>`\r\n    ${(props) => iconSizeStyles[props.size]}\r\n`;\r\n\r\nconst Icon = forwardRef<HTMLSpanElement | HTMLButtonElement, IconProps>((props, forwardedRef) => {\r\n    const { className, disabled, size = 'medium', value, onClick, ...rest } = props;\r\n\r\n    const iconClass = ICON_VALUES[value];\r\n\r\n    if (!IconSizesEnum[size]) {\r\n        throw new Error(`icon: invalid size \"${size}\"`);\r\n    }\r\n\r\n    const isClickable = disabled === true || typeof onClick === 'function';\r\n\r\n    const handleClick = useCallback(\r\n        (event: React.MouseEvent<HTMLSpanElement>) => {\r\n            if (disabled) return;\r\n\r\n            onClick?.(event);\r\n        },\r\n        [disabled, onClick],\r\n    );\r\n\r\n    const classes = {\r\n        root: classNames(className, 'arthur-icon', `arthur-icon--size-${size}`, {\r\n            'arthur-icon--clickable': isClickable,\r\n            'arthur-icon--disabled': disabled === true,\r\n        }),\r\n        regular: classNames('arthur-icon-regular', 'fa-regular', {\r\n            'fa-foobar': Boolean(iconClass) && Boolean(value),\r\n            [iconClass]: Boolean(iconClass),\r\n            [value as string]: Boolean(iconClass) && Boolean(value),\r\n        }),\r\n    };\r\n\r\n    // The wrapping span is needed because an error is thrown if one attempts\r\n    // to remove this from the dom once it is rendered. This is because the \"rendered\"\r\n    // node is the <i /> element, but a sibling <svg /> element is created as well.\r\n    // Without the wrapper and in the case that the element is added and removed again,\r\n    // React throws.\r\n    return (\r\n        <StyledRoot\r\n            as={isClickable ? 'button' : 'span'}\r\n            className={classes.root}\r\n            disabled={disabled}\r\n            onClick={handleClick}\r\n            ref={forwardedRef}\r\n        >\r\n            <StyledIcon className={classes.regular} size={size} {...rest} />\r\n        </StyledRoot>\r\n    );\r\n});\r\n\r\nexport default Icon;\r\n\r\nIcon.displayName = 'Icon';\r\n"],"names":[],"sourceRoot":""}