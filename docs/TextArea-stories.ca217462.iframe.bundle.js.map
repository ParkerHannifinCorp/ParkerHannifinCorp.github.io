{"version":3,"file":"TextArea-stories.ca217462.iframe.bundle.js","mappings":";;;AAYA;;AAGA;;AAEA;;AAGA;;AAEA;;AAKA;AAEA;;;AAIA;AACA;;AAKA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;;;;AAIA;;;;;AAKA;AACA;;;;AAIA;;;AAGA;AACA;;;;;AAKA;AACA;;;;;;;AAOA;AACA;AAiCA;ACzGA;;;AAGA;;;;;AAKA;;;;AAIA;;;AAIA;AACA;;;AAGA;;;;;AAKA;;;;AAIA;;;AAMA;AACA;AACA;;;AAGA;;;;AAIA;;;;AAIA;AACA;;;;AAIA;AACA;AACA;;;AAGA;;;;;;;;AAQA;;;AAGA;;;;AAIA;;;;AAIA;AA0BA","sources":["webpack://@arthur/docs/../../packages/arthur-ui/src/TextArea/TextArea.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/FormField/FormField.tsx"],"sourcesContent":["import React, { forwardRef, useCallback } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport classNames from 'classnames';\r\nimport type { FormFieldAlignment, FormFieldSize } from '../FormField';\r\nimport FormField from '../FormField';\r\nimport { useEnsureId } from '../hook';\r\nimport type { TextAreaAlignment, TextAreaSize } from './types';\r\nimport { TextAreaAlignmentEnum, TextAreaSizeEnum } from './types';\r\n\r\nconst alignmentStyles = {\r\n    left: css`\r\n        & .arthur-textinput-input {\r\n            text-align: ${(props) => props.theme.token['text-align'].left};\r\n        }\r\n    `,\r\n    center: css`\r\n        & .arthur-textinput-input {\r\n            text-align: ${(props) => props.theme.token['text-align'].center};\r\n        }\r\n    `,\r\n    right: css`\r\n        & .arthur-textinput-input {\r\n            text-align: ${(props) => props.theme.token['text-align'].right};\r\n        }\r\n    `,\r\n};\r\n\r\nconst sizeStyles = {\r\n    small: css`\r\n        font-size: ${(props) => props.theme.token.size.font.small};\r\n        min-height: 80px;\r\n        resize: none;\r\n    `,\r\n    medium: css`\r\n        font-size: ${(props) => props.theme.token.size.font.medium};\r\n        min-height: 140px;\r\n    `,\r\n};\r\n\r\nconst StyledRoot = styled.textarea<{ alignment: FormFieldAlignment; size: FormFieldSize }>`\r\n    background-color: ${(props) => props.theme.token.color.white};\r\n    border: 1px solid ${(props) => props.theme.token.color.palette.gray[75]};\r\n    border-radius: ${(props) => props.theme.token.radius.border.basic};\r\n    box-sizing: border-box;\r\n    font-family: ${(props) => props.theme.token.font.family['sans-serif']};\r\n    font-size: ${(props) => props.theme.token.size.font.medium};\r\n    margin: 0px;\r\n    margin-bottom: -3px;\r\n    min-width: 300px;\r\n    padding: ${(props) => props.theme.token.size.spacing['small-2x']}\r\n        ${(props) => props.theme.token.size.spacing['small-1x']};\r\n    width: 100%;\r\n\r\n    &::placeholder {\r\n        color: ${(props) => props.theme.token.color.palette.gray[20]};\r\n    }\r\n\r\n    &:focus {\r\n        border: 1px solid transparent;\r\n        outline: ${(props) => props.theme.token.size.border.medium} solid\r\n            ${(props) => props.theme.token.color.palette.gold.base};\r\n    }\r\n\r\n    &.arthur-textarea--invalid {\r\n        border: 1px solid ${(props) => props.theme.token.color.feedback.error};\r\n\r\n        &:focus {\r\n            outline: ${(props) => props.theme.token.size.border.medium} solid\r\n                ${(props) => props.theme.token.color.feedback.error};\r\n        }\r\n    }\r\n\r\n    &.arthur-textarea--disabled {\r\n        border: 1px solid ${(props) => props.theme.token.color.palette.gray[20]};\r\n        color: ${(props) => props.theme.token.color.palette.gray[20]};\r\n\r\n        &:focus {\r\n            outline: none;\r\n        }\r\n    }\r\n\r\n    ${(props) => alignmentStyles[props.alignment]}\r\n    ${(props) => sizeStyles[props.size]}\r\n`;\r\n\r\nexport interface TextAreaProps {\r\n    className?: string;\r\n    /**\r\n     * @default false\r\n     */\r\n    disabled?: boolean;\r\n    errorText?: string;\r\n    infoText?: string;\r\n    label?: string;\r\n    invalid?: boolean;\r\n    /**\r\n     * If true, this will add a red * to your label\r\n     *\r\n     * @default false\r\n     */\r\n    required?: boolean;\r\n    /**\r\n     * @default medium\r\n     */\r\n    size?: TextAreaSize;\r\n    /**\r\n     * @default left\r\n     */\r\n    alignment?: TextAreaAlignment;\r\n    maxLength?: number;\r\n    id?: string;\r\n    minLength?: number;\r\n    onChange?: (event: React.ChangeEvent<HTMLTextAreaElement>, value?: string) => void;\r\n}\r\n\r\nconst TextArea = forwardRef<HTMLDivElement, TextAreaProps>((props, forwardedRef) => {\r\n    const {\r\n        alignment = TextAreaAlignmentEnum.left,\r\n        className,\r\n        disabled,\r\n        errorText,\r\n        id,\r\n        infoText,\r\n        label,\r\n        invalid,\r\n        required,\r\n        size = TextAreaSizeEnum.medium,\r\n        onChange,\r\n    } = props;\r\n\r\n    const classes = classNames(\r\n        className,\r\n        'arthur-textarea',\r\n        `arthur-textarea--alignment-${alignment}`,\r\n        `arthur-textarea--size-${size}`,\r\n        {\r\n            'arthur-textarea--disabled': disabled === true,\r\n            'arthur-textarea--invalid': invalid === true,\r\n        },\r\n    );\r\n\r\n    const targetId = useEnsureId(id);\r\n\r\n    const handleChange = useCallback(\r\n        (event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n            onChange?.(event, event.target.value);\r\n        },\r\n        [onChange],\r\n    );\r\n\r\n    return (\r\n        <FormField\r\n            disabled={disabled}\r\n            errorText={errorText}\r\n            id={targetId}\r\n            infoText={infoText}\r\n            invalid={invalid}\r\n            label={label}\r\n            ref={forwardedRef}\r\n            required={required}\r\n        >\r\n            <StyledRoot\r\n                alignment={alignment}\r\n                className={classes}\r\n                disabled={disabled}\r\n                id={targetId}\r\n                onChange={handleChange}\r\n                size={size}\r\n            />\r\n        </FormField>\r\n    );\r\n});\r\n\r\nexport default TextArea;\r\nTextArea.displayName = 'TextArea';\r\n","import type { PropsWithChildren } from 'react';\r\nimport React, { forwardRef } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport classNames from 'classnames';\r\nimport { useEnsureId } from '../hook';\r\nimport type { FormFieldSize } from './types';\r\nimport { FormFieldSizeEnum } from './types';\r\n\r\nconst sizeStyles = {\r\n    small: css`\r\n        font-size: ${(props) => props.theme.token.size.font.small};\r\n\r\n        & .arthur-field-header-label {\r\n            font-size: ${(props) => props.theme.token.size.font.small};\r\n        }\r\n\r\n        & .arthur-field-footer {\r\n            & .arthur-field-footer-info {\r\n                font-size: ${(props) => props.theme.token.size.font.small};\r\n            }\r\n\r\n            & .arthur-field-footer-error {\r\n                font-size: ${(props) => props.theme.token.size.font.small};\r\n            }\r\n        }\r\n    `,\r\n    medium: css`\r\n        font-size: ${(props) => props.theme.token.size.font.medium};\r\n\r\n        & .arthur-field-header-label {\r\n            font-size: ${(props) => props.theme.token.size.font.medium};\r\n        }\r\n\r\n        & .arthur-field-footer {\r\n            & .arthur-field-footer-info {\r\n                font-size: ${(props) => props.theme.token.size.font.medium};\r\n            }\r\n\r\n            & .arthur-field-footer-error {\r\n                font-size: ${(props) => props.theme.token.size.font.medium};\r\n            }\r\n        }\r\n    `,\r\n};\r\n\r\nconst StyledRoot = styled.div<{ size: FormFieldSize; $showInfoText: boolean; $showErrorText: boolean }>`\r\n    font-family: ${(props) => props.theme.token.font.family['sans-serif']};\r\n    color: ${(props) => props.theme.token.color.black};\r\n\r\n    & .arthur-field-header {\r\n        margin-bottom: ${(props) => props.theme.token.size.spacing['small-2x']};\r\n    }\r\n\r\n    & .arthur-field-header-label {\r\n        font-weight: ${(props) => props.theme.token.weight.font.bold};\r\n    }\r\n\r\n    & .arthur-field-header-required {\r\n        color: ${(props) => props.theme.token.color.feedback.error};\r\n        padding-left: ${(props) => props.theme.token.size.spacing['small-2x']};\r\n    }\r\n\r\n    & .arthur-field-footer {\r\n        margin-top: ${(props) => props.theme.token.size.spacing['small-2x']};\r\n        ${(props) => props.$showInfoText && `color: ${props.theme.token.color.feedback.info};`}\r\n        ${(props) => props.$showErrorText && `color: ${props.theme.token.color.feedback.error};`}\r\n\r\n    & .arthur-field-footer-info {\r\n            padding-right: ${(props) => props.theme.token.size.spacing['small-2x']};\r\n        }\r\n\r\n        & .arthur-field-footer-error {\r\n        }\r\n    }\r\n\r\n    &.arthur-field--disabled {\r\n        color: ${(props) => props.theme.token.color.palette.gray[20]};\r\n\r\n        & .arthur-field-header-required {\r\n            color: ${(props) => props.theme.token.color.palette.gray[20]};\r\n        }\r\n\r\n        & .arthur-field-footer {\r\n            color: ${(props) => props.theme.token.color.palette.gray[20]};\r\n        }\r\n    }\r\n\r\n    ${(props) => sizeStyles[props.size]}\r\n`;\r\n\r\nexport interface FormFieldProps {\r\n    errorText?: string;\r\n    infoText?: string;\r\n    invalid?: boolean;\r\n    /**\r\n     * If true, this will add a red * to your label\r\n     *\r\n     * @default false\r\n     */\r\n    required?: boolean;\r\n    /**\r\n     * @default medium\r\n     */\r\n    size?: FormFieldSize;\r\n    /**\r\n     * @default false\r\n     */\r\n    disabled?: boolean;\r\n    label?: string;\r\n    id?: string;\r\n    className?: string;\r\n}\r\n\r\nconst FormField = forwardRef<HTMLDivElement, PropsWithChildren<FormFieldProps>>((props, forwardedRef) => {\r\n    const {\r\n        className,\r\n        id,\r\n        children,\r\n        disabled,\r\n        errorText,\r\n        label,\r\n        infoText,\r\n        size = FormFieldSizeEnum.medium,\r\n        required,\r\n        ...rest\r\n    } = props;\r\n\r\n    const targetId = useEnsureId(id);\r\n\r\n    const showHeader = Boolean(label);\r\n\r\n    const showErrorText = Boolean(errorText);\r\n\r\n    const showInfoText = Boolean(infoText);\r\n\r\n    const showFooter = showErrorText || showInfoText;\r\n\r\n    const classes = classNames(className, 'arthur-field', `arthur-field--size-${size}`, {\r\n        'arthur-field--disabled': disabled === true,\r\n    });\r\n\r\n    return (\r\n        <StyledRoot\r\n            $showErrorText={showErrorText}\r\n            $showInfoText={showInfoText}\r\n            className={classes}\r\n            ref={forwardedRef}\r\n            size={size}\r\n            {...rest}\r\n        >\r\n            {showHeader ? (\r\n                <div className='arthur-field-header'>\r\n                    <label className='arthur-field-header-label' htmlFor={targetId}>\r\n                        {label}\r\n                    </label>\r\n                    {required === true && <span className='arthur-field-header-required'>*</span>}\r\n                </div>\r\n            ) : null}\r\n            {children}\r\n            {showFooter ? (\r\n                <div className='arthur-field-footer'>\r\n                    {showInfoText ? <span className='arthur-field-footer-info'>{infoText}</span> : null}\r\n                    {showErrorText ? <span className='arthur-field-footer-error'>{errorText}</span> : null}\r\n                </div>\r\n            ) : null}\r\n        </StyledRoot>\r\n    );\r\n});\r\n\r\nexport default FormField;\r\nFormField.displayName = 'FormField';\r\n"],"names":[],"sourceRoot":""}