{"version":3,"file":"TextArea-stories.ca217462.iframe.bundle.js","mappings":";;;AAYA;;AAGA;;AAEA;;AAGA;;AAEA;;AAKA;AAEA;;;AAIA;AACA;;AAKA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;;;;AAIA;;;;;AAKA;AACA;;;;AAIA;;;AAGA;AACA;;;;;AAKA;AACA;;;;;;;AAOA;AACA;AAiCA;ACzGA;;;AAGA;;;;;AAKA;;;;AAIA;;;AAIA;AACA;;;AAGA;;;;;AAKA;;;;AAIA;;;AAMA;AACA;AACA;;;AAGA;;;;AAIA;;;;AAIA;AACA;;;;AAIA;AACA;AACA;;;AAGA;;;;;;;;AAQA;;;AAGA;;;;AAIA;;;;AAIA;AA0BA","sources":["webpack://@arthur/docs/../../packages/arthur-ui/src/TextArea/TextArea.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/FormField/FormField.tsx"],"sourcesContent":["import React, { forwardRef, useCallback } from 'react';\nimport styled, { css } from 'styled-components';\nimport classNames from 'classnames';\nimport type { FormFieldAlignment, FormFieldSize } from '../FormField';\nimport FormField from '../FormField';\nimport { useEnsureId } from '../hook';\nimport type { TextAreaAlignment, TextAreaSize } from './types';\nimport { TextAreaAlignmentEnum, TextAreaSizeEnum } from './types';\n\nconst alignmentStyles = {\n    left: css`\n        & .arthur-textinput-input {\n            text-align: ${(props) => props.theme.token['text-align'].left};\n        }\n    `,\n    center: css`\n        & .arthur-textinput-input {\n            text-align: ${(props) => props.theme.token['text-align'].center};\n        }\n    `,\n    right: css`\n        & .arthur-textinput-input {\n            text-align: ${(props) => props.theme.token['text-align'].right};\n        }\n    `,\n};\n\nconst sizeStyles = {\n    small: css`\n        font-size: ${(props) => props.theme.token.size.font.small};\n        min-height: 80px;\n        resize: none;\n    `,\n    medium: css`\n        font-size: ${(props) => props.theme.token.size.font.medium};\n        min-height: 140px;\n    `,\n};\n\nconst StyledRoot = styled.textarea<{ alignment: FormFieldAlignment; size: FormFieldSize }>`\n    background-color: ${(props) => props.theme.token.color.white};\n    border: 1px solid ${(props) => props.theme.token.color.palette.gray[75]};\n    border-radius: ${(props) => props.theme.token.radius.border.basic};\n    box-sizing: border-box;\n    font-family: ${(props) => props.theme.token.font.family['sans-serif']};\n    font-size: ${(props) => props.theme.token.size.font.medium};\n    margin: 0px;\n    margin-bottom: -3px;\n    min-width: 300px;\n    padding: ${(props) => props.theme.token.size.spacing['small-2x']}\n        ${(props) => props.theme.token.size.spacing['small-1x']};\n    width: 100%;\n\n    &::placeholder {\n        color: ${(props) => props.theme.token.color.palette.gray[20]};\n    }\n\n    &:focus {\n        border: 1px solid transparent;\n        outline: ${(props) => props.theme.token.size.border.medium} solid\n            ${(props) => props.theme.token.color.palette.gold.base};\n    }\n\n    &.arthur-textarea--invalid {\n        border: 1px solid ${(props) => props.theme.token.color.feedback.error};\n\n        &:focus {\n            outline: ${(props) => props.theme.token.size.border.medium} solid\n                ${(props) => props.theme.token.color.feedback.error};\n        }\n    }\n\n    &.arthur-textarea--disabled {\n        border: 1px solid ${(props) => props.theme.token.color.palette.gray[20]};\n        color: ${(props) => props.theme.token.color.palette.gray[20]};\n\n        &:focus {\n            outline: none;\n        }\n    }\n\n    ${(props) => alignmentStyles[props.alignment]}\n    ${(props) => sizeStyles[props.size]}\n`;\n\nexport interface TextAreaProps {\n    className?: string;\n    /**\n     * @default false\n     */\n    disabled?: boolean;\n    errorText?: string;\n    infoText?: string;\n    label?: string;\n    invalid?: boolean;\n    /**\n     * If true, this will add a red * to your label\n     *\n     * @default false\n     */\n    required?: boolean;\n    /**\n     * @default medium\n     */\n    size?: TextAreaSize;\n    /**\n     * @default left\n     */\n    alignment?: TextAreaAlignment;\n    maxLength?: number;\n    id?: string;\n    minLength?: number;\n    onChange?: (event: React.ChangeEvent<HTMLTextAreaElement>, value?: string) => void;\n}\n\nconst TextArea = forwardRef<HTMLDivElement, TextAreaProps>((props, forwardedRef) => {\n    const {\n        alignment = TextAreaAlignmentEnum.left,\n        className,\n        disabled,\n        errorText,\n        id,\n        infoText,\n        label,\n        invalid,\n        required,\n        size = TextAreaSizeEnum.medium,\n        onChange,\n    } = props;\n\n    const classes = classNames(\n        className,\n        'arthur-textarea',\n        `arthur-textarea--alignment-${alignment}`,\n        `arthur-textarea--size-${size}`,\n        {\n            'arthur-textarea--disabled': disabled === true,\n            'arthur-textarea--invalid': invalid === true,\n        },\n    );\n\n    const targetId = useEnsureId(id);\n\n    const handleChange = useCallback(\n        (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n            onChange?.(event, event.target.value);\n        },\n        [onChange],\n    );\n\n    return (\n        <FormField\n            disabled={disabled}\n            errorText={errorText}\n            id={targetId}\n            infoText={infoText}\n            invalid={invalid}\n            label={label}\n            ref={forwardedRef}\n            required={required}\n        >\n            <StyledRoot\n                alignment={alignment}\n                className={classes}\n                disabled={disabled}\n                id={targetId}\n                onChange={handleChange}\n                size={size}\n            />\n        </FormField>\n    );\n});\n\nexport default TextArea;\nTextArea.displayName = 'TextArea';\n","import type { PropsWithChildren } from 'react';\nimport React, { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport classNames from 'classnames';\nimport { useEnsureId } from '../hook';\nimport type { FormFieldSize } from './types';\nimport { FormFieldSizeEnum } from './types';\n\nconst sizeStyles = {\n    small: css`\n        font-size: ${(props) => props.theme.token.size.font.small};\n\n        & .arthur-field-header-label {\n            font-size: ${(props) => props.theme.token.size.font.small};\n        }\n\n        & .arthur-field-footer {\n            & .arthur-field-footer-info {\n                font-size: ${(props) => props.theme.token.size.font.small};\n            }\n\n            & .arthur-field-footer-error {\n                font-size: ${(props) => props.theme.token.size.font.small};\n            }\n        }\n    `,\n    medium: css`\n        font-size: ${(props) => props.theme.token.size.font.medium};\n\n        & .arthur-field-header-label {\n            font-size: ${(props) => props.theme.token.size.font.medium};\n        }\n\n        & .arthur-field-footer {\n            & .arthur-field-footer-info {\n                font-size: ${(props) => props.theme.token.size.font.medium};\n            }\n\n            & .arthur-field-footer-error {\n                font-size: ${(props) => props.theme.token.size.font.medium};\n            }\n        }\n    `,\n};\n\nconst StyledRoot = styled.div<{ size: FormFieldSize; $showInfoText: boolean; $showErrorText: boolean }>`\n    font-family: ${(props) => props.theme.token.font.family['sans-serif']};\n    color: ${(props) => props.theme.token.color.black};\n\n    & .arthur-field-header {\n        margin-bottom: ${(props) => props.theme.token.size.spacing['small-2x']};\n    }\n\n    & .arthur-field-header-label {\n        font-weight: ${(props) => props.theme.token.weight.font.bold};\n    }\n\n    & .arthur-field-header-required {\n        color: ${(props) => props.theme.token.color.feedback.error};\n        padding-left: ${(props) => props.theme.token.size.spacing['small-2x']};\n    }\n\n    & .arthur-field-footer {\n        margin-top: ${(props) => props.theme.token.size.spacing['small-2x']};\n        ${(props) => props.$showInfoText && `color: ${props.theme.token.color.feedback.info};`}\n        ${(props) => props.$showErrorText && `color: ${props.theme.token.color.feedback.error};`}\n\n    & .arthur-field-footer-info {\n            padding-right: ${(props) => props.theme.token.size.spacing['small-2x']};\n        }\n\n        & .arthur-field-footer-error {\n        }\n    }\n\n    &.arthur-field--disabled {\n        color: ${(props) => props.theme.token.color.palette.gray[20]};\n\n        & .arthur-field-header-required {\n            color: ${(props) => props.theme.token.color.palette.gray[20]};\n        }\n\n        & .arthur-field-footer {\n            color: ${(props) => props.theme.token.color.palette.gray[20]};\n        }\n    }\n\n    ${(props) => sizeStyles[props.size]}\n`;\n\nexport interface FormFieldProps {\n    errorText?: string;\n    infoText?: string;\n    invalid?: boolean;\n    /**\n     * If true, this will add a red * to your label\n     *\n     * @default false\n     */\n    required?: boolean;\n    /**\n     * @default medium\n     */\n    size?: FormFieldSize;\n    /**\n     * @default false\n     */\n    disabled?: boolean;\n    label?: string;\n    id?: string;\n    className?: string;\n}\n\nconst FormField = forwardRef<HTMLDivElement, PropsWithChildren<FormFieldProps>>((props, forwardedRef) => {\n    const {\n        className,\n        id,\n        children,\n        disabled,\n        errorText,\n        label,\n        infoText,\n        size = FormFieldSizeEnum.medium,\n        required,\n        ...rest\n    } = props;\n\n    const targetId = useEnsureId(id);\n\n    const showHeader = Boolean(label);\n\n    const showErrorText = Boolean(errorText);\n\n    const showInfoText = Boolean(infoText);\n\n    const showFooter = showErrorText || showInfoText;\n\n    const classes = classNames(className, 'arthur-field', `arthur-field--size-${size}`, {\n        'arthur-field--disabled': disabled === true,\n    });\n\n    return (\n        <StyledRoot\n            $showErrorText={showErrorText}\n            $showInfoText={showInfoText}\n            className={classes}\n            ref={forwardedRef}\n            size={size}\n            {...rest}\n        >\n            {showHeader ? (\n                <div className='arthur-field-header'>\n                    <label className='arthur-field-header-label' htmlFor={targetId}>\n                        {label}\n                    </label>\n                    {required === true && <span className='arthur-field-header-required'>*</span>}\n                </div>\n            ) : null}\n            {children}\n            {showFooter ? (\n                <div className='arthur-field-footer'>\n                    {showInfoText ? <span className='arthur-field-footer-info'>{infoText}</span> : null}\n                    {showErrorText ? <span className='arthur-field-footer-error'>{errorText}</span> : null}\n                </div>\n            ) : null}\n        </StyledRoot>\n    );\n});\n\nexport default FormField;\nFormField.displayName = 'FormField';\n"],"names":[],"sourceRoot":""}