{"version":3,"file":"Toggle-stories.4023547c.iframe.bundle.js","mappings":";;;;;;;;;;;;AAkBA;;;;;;AAOA;;;;;;;;;;;AAWA;AACA;;;;;;AASA;;;AAGA;;;;;AAKA;AACA;;;;;;AAMA;;;;;;;;AAQA;;;;;;;;AAQA;;;AAGA;;;;AAIA;AAsBA","sources":["webpack://@arthur/docs/../../packages/arthur-ui/src/Toggle/Toggle.tsx"],"sourcesContent":["import React, { forwardRef, useCallback, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport classNames from 'classnames';\nimport type { ToggleSize } from './types';\nimport { ToggleSizeEnum } from './types';\n\nconst sizeStyles = {\n    small: css`\n        height: 12px;\n        width: 28px;\n\n        &::before {\n            height: 10px;\n            top: 1px;\n            width: 10px;\n        }\n\n        &.arthur-toggle--active:focus {\n            outline: 1px solid ${(props) => props.theme.token.color.palette.gold.darker};\n        }\n\n        &.arthur-toggle--disabled:focus {\n            outline: 0px none;\n        }\n    `,\n    medium: css`\n        height: 24px;\n        width: 50px;\n\n        &::before {\n            height: 20px;\n            top: 2px;\n            width: 20px;\n        }\n\n        &.arthur-toggle--active:focus {\n            outline: ${(props) => props.theme.token.size.border.medium} solid\n                ${(props) => props.theme.token.color.palette.gold.darker};\n        }\n\n        &.arthur-toggle--disabled:focus {\n            outline: 0px none;\n        }\n    `,\n};\n\nconst StyledRoot = styled.button<{ size: ToggleSize }>`\n    background-color: #8d8d8d;\n    border: 0px none;\n    border-radius: ${(props) => props.theme.token.radius.border.pill};\n    padding: 0px;\n    position: relative;\n\n    &::before {\n        background-color: ${(props) => props.theme.token.color.white};\n        border-radius: ${(props) => props.theme.token.radius.border.circle};\n        content: '';\n        position: absolute;\n    }\n\n    &.arthur-toggle--active {\n        background-color: ${(props) => props.theme.token.color.palette.gold.base};\n\n        &::before {\n            right: 2px;\n        }\n    }\n\n    &.arthur-toggle--inactive {\n        background-color: ${(props) => props.theme.token.color.palette.gray[30]};\n\n        &::before {\n            left: 2px;\n        }\n    }\n\n    &.arthur-toggle--disabled {\n        background-color: ${(props) => props.theme.token.color.palette.gray[30]};\n\n        &::before {\n            background-color: ${(props) => props.theme.token.color.palette.gray[75]};\n        }\n    }\n\n    ${(props) => sizeStyles[props.size]}\n`;\n\nexport interface ToggleProps {\n    /**\n     * Sets the initial state of the toggle\n     *\n     * @default false\n     */\n    defaultActive?: boolean;\n    className?: string;\n    /**\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * @default medium\n     */\n    size?: ToggleSize;\n    onChange?: (event: React.MouseEvent<HTMLButtonElement>, active: boolean) => void;\n}\n\nconst Toggle = forwardRef<HTMLButtonElement, ToggleProps>((props, forwardedRef) => {\n    const { defaultActive = false, className, disabled, size = ToggleSizeEnum.medium, onChange } = props;\n\n    const [active, setActive] = useState(defaultActive);\n\n    const classes = classNames(className, 'arthur-toggle', `arthur-toggle--size-${size}`, {\n        'arthur-toggle--disabled': disabled === true,\n        'arthur-toggle--active': active,\n        'arthur-toggle--inactive': !active,\n    });\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLButtonElement>) => {\n            if (!disabled) {\n                setActive(!active);\n                onChange?.(event, !active);\n            }\n        },\n        [onChange, disabled, active],\n    );\n\n    return <StyledRoot className={classes} onClick={handleClick} ref={forwardedRef} size={size} />;\n});\n\nexport default Toggle;\nToggle.displayName = 'Toggle';\n"],"names":[],"sourceRoot":""}