{"version":3,"file":"Toggle-stories.4023547c.iframe.bundle.js","mappings":";;;;;;;;;;;;AAkBA;;;;;;AAOA;;;;;;;;;;;AAWA;AACA;;;;;;AASA;;;AAGA;;;;;AAKA;AACA;;;;;;AAMA;;;;;;;;AAQA;;;;;;;;AAQA;;;AAGA;;;;AAIA;AAsBA","sources":["webpack://@arthur/docs/../../packages/arthur-ui/src/Toggle/Toggle.tsx"],"sourcesContent":["import React, { forwardRef, useCallback, useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport classNames from 'classnames';\r\nimport type { ToggleSize } from './types';\r\nimport { ToggleSizeEnum } from './types';\r\n\r\nconst sizeStyles = {\r\n    small: css`\r\n        height: 12px;\r\n        width: 28px;\r\n\r\n        &::before {\r\n            height: 10px;\r\n            top: 1px;\r\n            width: 10px;\r\n        }\r\n\r\n        &.arthur-toggle--active:focus {\r\n            outline: 1px solid ${(props) => props.theme.token.color.palette.gold.darker};\r\n        }\r\n\r\n        &.arthur-toggle--disabled:focus {\r\n            outline: 0px none;\r\n        }\r\n    `,\r\n    medium: css`\r\n        height: 24px;\r\n        width: 50px;\r\n\r\n        &::before {\r\n            height: 20px;\r\n            top: 2px;\r\n            width: 20px;\r\n        }\r\n\r\n        &.arthur-toggle--active:focus {\r\n            outline: ${(props) => props.theme.token.size.border.medium} solid\r\n                ${(props) => props.theme.token.color.palette.gold.darker};\r\n        }\r\n\r\n        &.arthur-toggle--disabled:focus {\r\n            outline: 0px none;\r\n        }\r\n    `,\r\n};\r\n\r\nconst StyledRoot = styled.button<{ size: ToggleSize }>`\r\n    background-color: #8d8d8d;\r\n    border: 0px none;\r\n    border-radius: ${(props) => props.theme.token.radius.border.pill};\r\n    padding: 0px;\r\n    position: relative;\r\n\r\n    &::before {\r\n        background-color: ${(props) => props.theme.token.color.white};\r\n        border-radius: ${(props) => props.theme.token.radius.border.circle};\r\n        content: '';\r\n        position: absolute;\r\n    }\r\n\r\n    &.arthur-toggle--active {\r\n        background-color: ${(props) => props.theme.token.color.palette.gold.base};\r\n\r\n        &::before {\r\n            right: 2px;\r\n        }\r\n    }\r\n\r\n    &.arthur-toggle--inactive {\r\n        background-color: ${(props) => props.theme.token.color.palette.gray[30]};\r\n\r\n        &::before {\r\n            left: 2px;\r\n        }\r\n    }\r\n\r\n    &.arthur-toggle--disabled {\r\n        background-color: ${(props) => props.theme.token.color.palette.gray[30]};\r\n\r\n        &::before {\r\n            background-color: ${(props) => props.theme.token.color.palette.gray[75]};\r\n        }\r\n    }\r\n\r\n    ${(props) => sizeStyles[props.size]}\r\n`;\r\n\r\nexport interface ToggleProps {\r\n    /**\r\n     * Sets the initial state of the toggle\r\n     *\r\n     * @default false\r\n     */\r\n    defaultActive?: boolean;\r\n    className?: string;\r\n    /**\r\n     * @default false\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * @default medium\r\n     */\r\n    size?: ToggleSize;\r\n    onChange?: (event: React.MouseEvent<HTMLButtonElement>, active: boolean) => void;\r\n}\r\n\r\nconst Toggle = forwardRef<HTMLButtonElement, ToggleProps>((props, forwardedRef) => {\r\n    const { defaultActive = false, className, disabled, size = ToggleSizeEnum.medium, onChange } = props;\r\n\r\n    const [active, setActive] = useState(defaultActive);\r\n\r\n    const classes = classNames(className, 'arthur-toggle', `arthur-toggle--size-${size}`, {\r\n        'arthur-toggle--disabled': disabled === true,\r\n        'arthur-toggle--active': active,\r\n        'arthur-toggle--inactive': !active,\r\n    });\r\n\r\n    const handleClick = useCallback(\r\n        (event: React.MouseEvent<HTMLButtonElement>) => {\r\n            if (!disabled) {\r\n                setActive(!active);\r\n                onChange?.(event, !active);\r\n            }\r\n        },\r\n        [onChange, disabled, active],\r\n    );\r\n\r\n    return <StyledRoot className={classes} onClick={handleClick} ref={forwardedRef} size={size} />;\r\n});\r\n\r\nexport default Toggle;\r\nToggle.displayName = 'Toggle';\r\n"],"names":[],"sourceRoot":""}