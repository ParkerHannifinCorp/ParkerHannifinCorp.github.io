{"version":3,"file":"ToggleButton-stories.b7b45ce3.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;AA2DA;ACrBA;;AAEA;AAEA;AACA;;AAEA;AAEA;AACA;;AAEA;AAIA;AAEA;AACA;;;AAGA;;;;AAIA;AACA;AACA;;AAGA;AACA;AACA;;;AAGA;;;;AAIA;AACA;AACA;;AAGA;;AAEA;AACA;;;AAGA;;;;;AAKA;AACA;AACA;;;;;AAKA;;AAGA;AACA;AACA;;;AAGA;;;;AAIA;AACA;AACA;;AAKA;;AAOA;AACA;;;;;AAKA;AACA;;;AAGA;AACA;;;;AAIA;AACA;;;;;;;;;;AAYA","sources":["webpack://@arthur/docs/../../packages/arthur-ui/src/ToggleButton/ToggleButton.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/Button/Button.tsx"],"sourcesContent":["import type { ReactNode } from 'react';\r\nimport React, { forwardRef, useCallback, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport classNames from 'classnames';\r\nimport Button from '../Button';\r\nimport type { ToggleButtonSize } from './types';\r\nimport { ToggleButtonSizeEnum } from './types';\r\n\r\nconst StyledRoot = styled.span<ToggleButtonProps>`\r\n    & .arthur-togglebutton-button-active {\r\n        border-top-left-radius: 0px;\r\n        border-bottom-left-radius: 0px;\r\n        position: relative;\r\n        right: 1px;\r\n    }\r\n\r\n    & .arthur-togglebutton-button-inactive {\r\n        border-top-right-radius: 0px;\r\n        border-bottom-right-radius: 0px;\r\n        position: relative;\r\n        left: 1px;\r\n    }\r\n\r\n    & button:focus {\r\n        z-index: 999;\r\n    }\r\n`;\r\n\r\n/**\r\n *\r\n */\r\nexport interface ToggleButtonProps {\r\n    /**\r\n     * Sets the initial state of the toggle\r\n     *\r\n     * @default false\r\n     */\r\n    defaultActive?: boolean;\r\n    className?: string;\r\n    /**\r\n     * @default false\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * @default medium\r\n     */\r\n    size?: ToggleButtonSize;\r\n    onChange?: (event: React.MouseEvent<HTMLButtonElement>, active: boolean) => void;\r\n    /**\r\n     * Sets the contents of the active button\r\n     */\r\n    activeLabel?: ReactNode;\r\n\r\n    /**\r\n     * Sets the contents of the inactive button\r\n     */\r\n    inactiveLabel?: ReactNode;\r\n}\r\n\r\nconst ToggleButton = forwardRef<HTMLSpanElement, ToggleButtonProps>((props, forwardedRef) => {\r\n    const {\r\n        defaultActive,\r\n        activeLabel,\r\n        className,\r\n        disabled,\r\n        inactiveLabel,\r\n        size = ToggleButtonSizeEnum.medium,\r\n        onChange,\r\n        ...rest\r\n    } = props;\r\n\r\n    const [active, setActive] = useState(defaultActive);\r\n\r\n    const classes = classNames(className, 'arthur-togglebutton', {\r\n        'arthur-togglebutton--active': active === true,\r\n        'arthur-togglebutton--disabled': disabled === true,\r\n        'arthur-togglebutton--inactive': active !== true,\r\n    });\r\n\r\n    const handleClick = useCallback(\r\n        (isActiveButton: boolean) => (event: React.MouseEvent<HTMLButtonElement>) => {\r\n            if (!disabled) {\r\n                setActive(isActiveButton);\r\n                onChange?.(event, isActiveButton);\r\n            }\r\n        },\r\n        [onChange, disabled],\r\n    );\r\n\r\n    return (\r\n        <StyledRoot className={classes} ref={forwardedRef} {...rest}>\r\n            <Button\r\n                className='arthur-togglebutton-button-inactive'\r\n                disabled={disabled}\r\n                onClick={handleClick(false)}\r\n                size={size}\r\n                variant={active ? 'tertiary' : 'default'}\r\n            >\r\n                {inactiveLabel}\r\n            </Button>\r\n            <Button\r\n                className='arthur-togglebutton-button-active'\r\n                disabled={disabled}\r\n                onClick={handleClick(true)}\r\n                size={size}\r\n                variant={active ? 'default' : 'tertiary'}\r\n            >\r\n                {activeLabel}\r\n            </Button>\r\n        </StyledRoot>\r\n    );\r\n});\r\n\r\nexport default ToggleButton;\r\nToggleButton.displayName = 'ToggleButton';\r\n","import type { PropsWithChildren } from 'react';\r\nimport React, { forwardRef, useCallback } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport classNames from 'classnames';\r\nimport {\r\n  ButtonSizesEnum,\r\n  type ButtonSizes,\r\n  type ButtonTypes,\r\n  type ButtonVariants,\r\n  ButtonTypesEnum,\r\n  ButtonVariantsEnum,\r\n} from './types';\r\n\r\nexport interface ButtonProps {\r\n  className?: string;\r\n  /**\r\n   * @default false\r\n   */\r\n  disabled?: boolean;\r\n  /**\r\n   * @default medium\r\n   */\r\n  size?: ButtonSizes;\r\n  /**\r\n   * @default default\r\n   */\r\n  variant?: ButtonVariants;\r\n  onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n  formId?: string;\r\n  name?: string;\r\n  /**\r\n   * @default button\r\n   */\r\n  type?: ButtonTypes;\r\n}\r\n\r\nconst buttonSizeStyles = {\r\n  small: css`\r\n    font-size: ${(props) => props.theme.token.size.font.small};\r\n    height: 30px;\r\n    padding: 0px ${(props) => props.theme.token.size.spacing.small};\r\n  `,\r\n  medium: css`\r\n    font-size: ${(props) => props.theme.token.size.font.medium};\r\n    height: 40px;\r\n    padding: 0px ${(props) => props.theme.token.size.spacing.medium};\r\n  `,\r\n  large: css`\r\n    font-size: ${(props) => props.theme.token.size.font.large};\r\n    height: 50px;\r\n    padding: 0px ${(props) => props.theme.token.size.spacing.medium};\r\n  `,\r\n};\r\n\r\nconst buttonVariantStyles = {\r\n  default: css`\r\n    background-color: ${(props) => props.theme.token.color.palette.gold.base};\r\n    color: ${(props) => props.theme.token.color.black};\r\n\r\n    &:not(.arthur-button--disabled):hover {\r\n      background-color: ${(props) => props.theme.token.color.palette.gold.lighter};\r\n    }\r\n\r\n    &:not(.arthur-button--disabled):active {\r\n      background-color: ${(props) => props.theme.token.color.palette.gold.darker};\r\n      box-shadow: inset 0 0 0 1px ${(props) => props.theme.token.color.palette.gold.darker},\r\n        inset 0 0 0 2px ${(props) => props.theme.token.color.white};\r\n    }\r\n  `,\r\n  secondary: css`\r\n    background-color: ${(props) => props.theme.token.color.palette.gray[80]};\r\n    color: ${(props) => props.theme.token.color.white};\r\n\r\n    &:not(.arthur-button--disabled):hover {\r\n      background-color: ${(props) => props.theme.token.color.palette.gray[70]};\r\n    }\r\n\r\n    &:not(.arthur-button--disabled):active {\r\n      background-color: ${(props) => props.theme.token.color.palette.gray[60]};\r\n      box-shadow: inset 0 0 0 1px ${(props) => props.theme.token.color.palette.gray[60]},\r\n        inset 0 0 0 2px ${(props) => props.theme.token.color.white};\r\n    }\r\n  `,\r\n  tertiary: css`\r\n    background-color: transparent;\r\n    box-shadow: inset 0 0 0 2px ${(props) => props.theme.token.color.palette.gold.base};\r\n    color: ${(props) => props.theme.token.color.black};\r\n\r\n    &:not(.arthur-button--disabled):hover {\r\n      background-color: ${(props) => props.theme.token.color.palette.gold.lighter};\r\n      box-shadow: none;\r\n    }\r\n\r\n    &:not(.arthur-button--disabled):active {\r\n      background-color: ${(props) => props.theme.token.color.palette.gold.darker};\r\n      box-shadow: inset 0 0 0 1px ${(props) => props.theme.token.color.palette.gold.darker},\r\n        inset 0 0 0 2px ${(props) => props.theme.token.color.white};\r\n    }\r\n\r\n    &.arthur-button--disabled {\r\n      background-color: transparent;\r\n      box-shadow: inset 0 0 0 2px ${(props) => props.theme.token.color.palette.gray[20]};\r\n    }\r\n  `,\r\n  danger: css`\r\n    background-color: ${(props) => props.theme.token.color.palette.red.base};\r\n    color: ${(props) => props.theme.token.color.white};\r\n\r\n    &:not(.arthur-button--disabled):hover {\r\n      background-color: ${(props) => props.theme.token.color.palette.red.darker};\r\n    }\r\n\r\n    &:not(.arthur-button--disabled):active {\r\n      background-color: ${(props) => props.theme.token.color.palette.red.darkest};\r\n      box-shadow: inset 0 0 0 1px ${(props) => props.theme.token.color.palette.red.darkest},\r\n        inset 0 0 0 2px ${(props) => props.theme.token.color.white};\r\n    }\r\n  `,\r\n};\r\n\r\nconst StyledRoot = styled.button<{\r\n  variant: ButtonVariants;\r\n  size: ButtonSizes;\r\n  type: ButtonTypes;\r\n  ref: React.ForwardedRef<unknown>;\r\n}>`\r\n  border: none;\r\n  border-radius: ${(props) => props.theme.token.radius.border.pill};\r\n  font-weight: ${(props) => props.theme.token.weight.font.regular};\r\n  min-width: 140px;\r\n  outline: none;\r\n\r\n  &.arthur-button--disabled {\r\n    background-color: ${(props) => props.theme.token.color.palette.gray[20]};\r\n    color: ${(props) => props.theme.token.color.palette.gray[40]};\r\n  }\r\n\r\n  ${(props) => buttonSizeStyles[props.size]}\r\n  ${(props) => buttonVariantStyles[props.variant]} {\r\n    /* HACK: HANDLES TOKENS FOR CHILD ICONS */\r\n  }\r\n  & .arthur-icon {\r\n    margin-left: ${(props) => props.theme.token.size.spacing[props.size === 'large' ? 'small' : 'small-1x']};\r\n    margin-right: ${(props) => props.theme.token.size.spacing[props.size === 'large' ? 'small' : 'small-1x']};\r\n\r\n    &:first-child {\r\n      margin-left: 0px;\r\n    }\r\n\r\n    &:last-child {\r\n      margin-right: 0px;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Button = forwardRef((props: PropsWithChildren<ButtonProps>, forwardedRef) => {\r\n  const {\r\n    children,\r\n    className,\r\n    disabled = false,\r\n    size = ButtonSizesEnum.medium,\r\n    type = ButtonTypesEnum.button,\r\n    variant = ButtonVariantsEnum.default,\r\n    onClick,\r\n    ...rest\r\n  } = props;\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'arthur-button',\r\n    `arthur-button--size-${size}`,\r\n    `arthur-button--variant-${variant}`,\r\n    {\r\n      'arthur-button--disabled': disabled,\r\n    },\r\n  );\r\n\r\n  const handleClick = useCallback(\r\n    (event: React.MouseEvent<HTMLButtonElement>) => {\r\n      onClick?.(event);\r\n    },\r\n    [onClick],\r\n  );\r\n\r\n  return (\r\n    <StyledRoot\r\n      className={classes}\r\n      disabled={disabled}\r\n      onClick={handleClick}\r\n      ref={forwardedRef}\r\n      role='button'\r\n      size={size}\r\n      type={type}\r\n      variant={variant}\r\n      {...rest}\r\n    >\r\n      {children}\r\n    </StyledRoot>\r\n  );\r\n});\r\n\r\nexport default Button;\r\n\r\nButton.displayName = 'Button';\r\n"],"names":[],"sourceRoot":""}