{"version":3,"file":"accordion-Accordion-stories.51e9521e.iframe.bundle.js","mappings":";;;AA+CA;ACzBA;AACA;;AAGA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;;;;AAIA;;;;;;;;AAQA;;;;;;;;;;;;;AAaA;;;;;AAKA;;AAIA;AACA;;;;AAIA;;AAGA;;AAEA;;;;AAIA;;;;;;;;AAQA;;;;;;;;;;;;;AAaA;;;;;AAKA;;AAKA;AAIA;;;;AAIA;AACA;;;AAGA;;;;;;;;AAQA;;;;;;;;;AASA;AAGA;;AAIA;AAGA;;;AAMA;;AAEA;;;AAKA;AAIA;;AAEA;;;AAGA;;;;AAIA;;;;;AAKA;;AAEA;AAGA;AC1KA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;;;;;;;;;;;AAWA;;;;;;;;AAQA;;;AAKA;AACA;AAGA","sources":["webpack://@arthur/docs/../../packages/arthur-ui/src/Accordion/Accordion.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/Accordion/AccordionItem.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/Icon/Icon.tsx"],"sourcesContent":["import React, { forwardRef, useCallback, useEffect, useMemo, useState } from 'react';\r\nimport type { MouseEvent, PropsWithChildren } from 'react';\r\nimport styled from 'styled-components';\r\nimport classnames from 'classnames';\r\nimport { AccordionContext } from './AccordionContext';\r\nimport {\r\n  AccordionSizeEnum,\r\n  type AccordionSectionId,\r\n  type AccordionSize,\r\n  type AccordionVariant,\r\n  type ExpandedItems,\r\n  AccordionVariantsEnum,\r\n} from './types';\r\n\r\nconst StyledRoot = styled.div<Partial<AccordionProps>>`\r\n  counter-reset: number;\r\n`;\r\n\r\nexport interface AccordionProps {\r\n  className?: string;\r\n  /**\r\n   * @default false\r\n   */\r\n  disabled?: boolean;\r\n  /**\r\n   * @default medium\r\n   */\r\n  size?: AccordionSize;\r\n  /**\r\n   * @default default\r\n   */\r\n  variant?: AccordionVariant;\r\n  /**\r\n   * Controls how many accordions can be open simultaneously.\r\n   *\r\n   * @default false\r\n   */\r\n  singleSelect?: boolean;\r\n  onChange?: (event: React.MouseEvent, expandedItems: ExpandedItems) => void;\r\n  /**\r\n   * Array of ids for accordions that should render open\r\n   *\r\n   * @default []\r\n   */\r\n  defaultExpandedItems?: ExpandedItems;\r\n}\r\n\r\nconst Accordion = forwardRef<HTMLDivElement, PropsWithChildren<AccordionProps>>((props, forwardedRef) => {\r\n  const {\r\n    className: classesProp,\r\n    defaultExpandedItems = [],\r\n    disabled = false,\r\n    onChange: onChangeProp,\r\n    variant = AccordionVariantsEnum.default,\r\n    singleSelect = false,\r\n    size = AccordionSizeEnum.medium,\r\n  } = props;\r\n\r\n  const [expandedItems, setExpandedItems] = useState<ExpandedItems>(defaultExpandedItems);\r\n\r\n  const [activeItem, setActiveItem] = useState<AccordionSectionId | undefined>();\r\n\r\n  const handleChange = useCallback(\r\n    (event: React.MouseEvent, id: AccordionSectionId) => {\r\n      if (singleSelect) {\r\n        onChangeProp?.(event, [id]);\r\n        setExpandedItems([id]);\r\n        return;\r\n      }\r\n\r\n      const nextExpandedItems = [...expandedItems];\r\n\r\n      // if the accordion section id was already selected we can conclude\r\n      // that the user clicked it again to de-select it\r\n      const idx = nextExpandedItems.indexOf(id);\r\n      const isDeSelected = idx !== -1;\r\n\r\n      if (isDeSelected) {\r\n        // de-select the item by removing it from the expandedItems array\r\n        nextExpandedItems.splice(idx, 1);\r\n      } else {\r\n        // select the item by adding it to the expandedItems array\r\n        nextExpandedItems.push(id);\r\n      }\r\n\r\n      onChangeProp?.(event, nextExpandedItems);\r\n      setExpandedItems(nextExpandedItems);\r\n    },\r\n    [expandedItems, onChangeProp, singleSelect],\r\n  );\r\n\r\n  const handleHeaderClick = useCallback((id: AccordionSectionId) => {\r\n    setActiveItem(id);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const handler: EventListener = (event) => {\r\n      const isInAccordion = (event.target as HTMLElement).closest('.arthur-accordion');\r\n\r\n      if (!isInAccordion) {\r\n        setActiveItem(undefined);\r\n      }\r\n    };\r\n    document.body.addEventListener('click', handler);\r\n\r\n    return function cleanup() {\r\n      window.removeEventListener('click', handler);\r\n    };\r\n  }, []);\r\n\r\n  const accordionContext = useMemo(\r\n    () => ({\r\n      disabled,\r\n      expandedItems,\r\n      variant,\r\n      onChange: handleChange,\r\n      size,\r\n      onHeaderClick: handleHeaderClick,\r\n      activeItem,\r\n    }),\r\n    [disabled, expandedItems, variant, handleChange, size, handleHeaderClick, activeItem],\r\n  );\r\n\r\n  const classes = classnames('arthur-accordion', classesProp);\r\n\r\n  return (\r\n    <AccordionContext.Provider value={accordionContext}>\r\n      <StyledRoot className={classes} ref={forwardedRef} variant={variant}>\r\n        {props.children}\r\n      </StyledRoot>\r\n    </AccordionContext.Provider>\r\n  );\r\n});\r\n\r\nexport default Accordion;\r\n\r\nAccordion.displayName = 'Accordion';\r\n","import type { PropsWithChildren } from 'react';\r\nimport { forwardRef, useCallback, useContext } from 'react';\r\nimport { styled, css } from 'styled-components';\r\nimport classnames from 'classnames';\r\nimport Icon from '../Icon';\r\nimport { AccordionContext } from './AccordionContext';\r\nimport {\r\n  AccordionSizeEnum,\r\n  type AccordionSectionId,\r\n  type AccordionSize,\r\n  type AccordionVariant,\r\n  AccordionVariantsEnum,\r\n} from './types';\r\n\r\ninterface AccordionItemProps {\r\n  title: string;\r\n  id: AccordionSectionId;\r\n  disabled?: boolean;\r\n}\r\n\r\nconst AccordionSizeStyles = {\r\n  small: css`\r\n    font-size: ${(props) => props.theme.token.size.font.small};\r\n    padding: ${(props) => props.theme.token.size.spacing['small-2x']};\r\n    }\r\n  `,\r\n  medium: css`\r\n    font-size: ${(props) => props.theme.token.size.font.medium};\r\n    padding: ${(props) => props.theme.token.size.spacing['small-1x']};\r\n  `,\r\n  large: css`\r\n    font-size: ${(props) => props.theme.token.size.font.large};\r\n    padding: ${(props) => props.theme.token.size.spacing.small};\r\n  `,\r\n};\r\n\r\nconst AccordionVariantStyles = {\r\n  default: css`\r\n    border-top: 1px solid ${(props) => props.theme.token.color.black};\r\n    margin-top: 0px;\r\n\r\n    &:last-child {\r\n      border-bottom: 1px solid ${(props) => props.theme.token.color.black};\r\n    }\r\n\r\n    &:last-child.active {\r\n      border-bottom-color: transparent;\r\n    }\r\n\r\n    &:last-child.active.expanded {\r\n      border-bottom-color: ${(props) => props.theme.token.color.black};\r\n    }\r\n\r\n    &.active {\r\n      border-top-color: transparent;\r\n      + .arthur-accordion-item {\r\n        border-top-color: transparent;\r\n      }\r\n    }\r\n\r\n    &.active.expanded {\r\n      border-top-color: transparent;\r\n      + .arthur-accordion-item {\r\n        border-top-color: ${(props) => props.theme.token.color.black};\r\n      }\r\n    }\r\n\r\n    & .accordion-header.active {\r\n      border-color: ${(props) => props.theme.token.color.palette.gold.base};\r\n    }\r\n  `,\r\n\r\n  boxed: css`\r\n    border: 1px solid ${(props) => props.theme.token.color.black};\r\n    margin-bottom: 12px;\r\n\r\n    &.active {\r\n      border-color: ${(props) => props.theme.token.color.palette.gold.base};\r\n    }\r\n  `,\r\n  numbered: css`\r\n    counter-increment: number;\r\n    border-top: 1px solid ${(props) => props.theme.token.color.black};\r\n    margin-top: 0px;\r\n\r\n    &:last-child {\r\n      border-bottom: 1px solid ${(props) => props.theme.token.color.black};\r\n    }\r\n\r\n    &:last-child.active {\r\n      border-bottom-color: transparent;\r\n    }\r\n\r\n    &:last-child.active.expanded {\r\n      border-bottom-color: ${(props) => props.theme.token.color.black};\r\n    }\r\n\r\n    &.active {\r\n      border-top-color: transparent;\r\n      + .arthur-accordion-item {\r\n        border-top-color: transparent;\r\n      }\r\n    }\r\n\r\n    &.active.expanded {\r\n      border-top-color: transparent;\r\n      + .arthur-accordion-item {\r\n        border-top-color: ${(props) => props.theme.token.color.black};\r\n      }\r\n    }\r\n\r\n    & .accordion-header.active {\r\n      border-color: ${(props) => props.theme.token.color.palette.gold.base};\r\n    }\r\n  `,\r\n};\r\n\r\nconst StyledRoot = styled.div<{\r\n  variant: AccordionVariant;\r\n  ref: React.ForwardedRef<unknown>;\r\n}>`\r\n  ${(props) => AccordionVariantStyles[props.variant]}\r\n  &:focus-within,\r\n  \r\n  &.disabled {\r\n    border-color: ${(props) => props.theme.token.color.action.text.primary.disabled};\r\n    color: ${(props) => props.theme.token.color.action.text.primary.disabled};\r\n\r\n    & .accordion-header {\r\n      color: ${(props) => props.theme.token.color.action.text.primary.disabled};\r\n      cursor: default;\r\n    }\r\n\r\n    &:focus-within,\r\n    &:active,\r\n    &:hover {\r\n      background-color: transparent;\r\n      border-color: ${(props) => props.theme.token.color.action.text.primary.disabled};\r\n      outline: 0px none;\r\n\r\n      & .arthur-accordion-item-body {\r\n        background-color: transparent;\r\n      }\r\n    }\r\n  }\r\n\r\n  ${(props) => AccordionVariantStyles[props.variant]}\r\n`;\r\n\r\nconst StyledInnerDetails = styled.div<{\r\n  size: AccordionSize;\r\n}>`\r\n  padding: 0 12px 12px 12px;\r\n  ${(props) => AccordionSizeStyles[props.size]}\r\n`;\r\n\r\nconst StyledDetails = styled.div<{\r\n  ref: React.ForwardedRef<unknown>;\r\n  expanded: number;\r\n}>`\r\n  overflow: hidden;\r\n  overflow-y: scroll;\r\n  max-height: ${(props) => (props.expanded === 1 ? '500px' : 0)};\r\n  &.disabled {\r\n    color: ${(props) => props.theme.token.color.action.text.primary.disabled};\r\n    cursor: default;\r\n  }\r\n`;\r\n\r\nconst StyledHeader = styled.div<{\r\n  variant: AccordionVariant;\r\n  size: AccordionSize;\r\n}>`\r\n  grid-template-columns: ${(props) => (props.variant === 'numbered' ? '24px 1fr 30px' : '1fr 30px')};\r\n  display: grid;\r\n  padding: ${(props) => props.theme.token.size.spacing[props.size]};\r\n  border: 2px solid transparent;\r\n  &::before {\r\n    content: ${(props) => (props.variant === 'numbered' ? 'counters(number, \".\", decimal-leading-zero)' : '')};\r\n  }\r\n\r\n  &.disabled {\r\n    color: ${(props) => props.theme.token.color.action.text.primary.disabled};\r\n    cursor: default;\r\n  }\r\n\r\n  &:hover {\r\n    background-color: ${(props) => props.theme.token.color.palette.gray[10]};\r\n  }\r\n  ${(props) => AccordionSizeStyles[props.size]}\r\n`;\r\n\r\nexport const AccordionItem = forwardRef(\r\n  ({ title, children, id, disabled }: PropsWithChildren<AccordionItemProps>, forwardedRef) => {\r\n    const accordionContext = useContext(AccordionContext);\r\n    const size = accordionContext?.size || AccordionSizeEnum.medium;\r\n    const variant = accordionContext?.variant || AccordionVariantsEnum.default;\r\n    const onChange = accordionContext?.onChange;\r\n    const expandedItems = accordionContext?.expandedItems;\r\n    const onHeaderClick = accordionContext?.onHeaderClick;\r\n    const activeItem = accordionContext?.activeItem;\r\n\r\n    const expanded = expandedItems?.includes(id);\r\n\r\n    const classes = classnames('arthur-accordion-item', { active: id === activeItem, expanded });\r\n\r\n    const detailsClasses = classnames('accordion-details', { disabled, expanded });\r\n\r\n    const headerClasses = classnames('accordion-header', { disabled, active: id === activeItem });\r\n\r\n    const handleClick = useCallback(\r\n      (event: React.MouseEvent) => {\r\n        if (disabled) return;\r\n\r\n        onChange?.(event, id);\r\n      },\r\n      [disabled, id, onChange],\r\n    );\r\n\r\n    const handleHeaderClick = useCallback(() => {\r\n      onHeaderClick?.(id);\r\n    }, [id, onHeaderClick]);\r\n\r\n    return (\r\n      <StyledRoot className={classes} onClick={handleClick} ref={forwardedRef} variant={variant}>\r\n        <StyledHeader className={headerClasses} onClick={handleHeaderClick} size={size} variant={variant}>\r\n          {title}\r\n          <Icon value='add' />\r\n        </StyledHeader>\r\n        <StyledDetails className={detailsClasses} expanded={expanded ? 1 : 0} ref={forwardedRef}>\r\n          <StyledInnerDetails size={size}>{children}</StyledInnerDetails>\r\n        </StyledDetails>\r\n      </StyledRoot>\r\n    );\r\n  },\r\n);\r\n\r\nAccordionItem.displayName = 'AccordionItem';\r\n","import React, { forwardRef, useCallback } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport classNames from 'classnames';\r\nimport { type IconValue, type IconSizes, IconSizesEnum } from './types';\r\nimport { ICON_VALUES } from './constants';\r\n\r\nexport interface IconProps {\r\n    className?: string;\r\n    /**\r\n     * @default false\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * @default medium\r\n     */\r\n    size?: IconSizes;\r\n    onClick?: (event: React.MouseEvent<HTMLSpanElement>) => unknown;\r\n    value: IconValue;\r\n}\r\n\r\nconst iconSizeStyles = {\r\n    'small-1x': css`\r\n        font-size: ${(props) => props.theme.token.size.font['small-1x']};\r\n    `,\r\n    small: css`\r\n        font-size: ${(props) => props.theme.token.size.font.small};\r\n    `,\r\n    medium: css`\r\n        font-size: ${(props) => props.theme.token.size.font.medium};\r\n    `,\r\n    large: css`\r\n        font-size: ${(props) => props.theme.token.size.font.large};\r\n    `,\r\n};\r\n\r\nconst StyledRoot = styled.span<{ disabled?: boolean }>`\r\n    background-color: transparent;\r\n    border: 0px none;\r\n    outline: 0px none;\r\n    padding: 0px;\r\n\r\n    &:not(.arthur-icon--disabled) {\r\n        &.arthur-icon--clickable {\r\n            &:hover,\r\n            &:focus,\r\n            &:active {\r\n                color: ${(props) => props.theme.token.color.palette.gold.base};\r\n                cursor: pointer;\r\n                outline: 0px none;\r\n            }\r\n        }\r\n    }\r\n\r\n    &.arthur-icon--disabled {\r\n        color: ${(props) => props.theme.token.color.action.text.primary.disabled};\r\n        cursor: default;\r\n    }\r\n`;\r\n\r\nconst StyledIcon = styled.i<{ size: IconSizes }>`\r\n    ${(props) => iconSizeStyles[props.size]}\r\n`;\r\n\r\nconst Icon = forwardRef<HTMLSpanElement | HTMLButtonElement, IconProps>((props, forwardedRef) => {\r\n    const { className, disabled, size = 'medium', value, onClick, ...rest } = props;\r\n\r\n    const iconClass = ICON_VALUES[value];\r\n\r\n    if (!IconSizesEnum[size]) {\r\n        throw new Error(`icon: invalid size \"${size}\"`);\r\n    }\r\n\r\n    const isClickable = disabled === true || typeof onClick === 'function';\r\n\r\n    const handleClick = useCallback(\r\n        (event: React.MouseEvent<HTMLSpanElement>) => {\r\n            if (disabled) return;\r\n\r\n            onClick?.(event);\r\n        },\r\n        [disabled, onClick],\r\n    );\r\n\r\n    const classes = {\r\n        root: classNames(className, 'arthur-icon', `arthur-icon--size-${size}`, {\r\n            'arthur-icon--clickable': isClickable,\r\n            'arthur-icon--disabled': disabled === true,\r\n        }),\r\n        regular: classNames('arthur-icon-regular', 'fa-regular', {\r\n            'fa-foobar': Boolean(iconClass) && Boolean(value),\r\n            [iconClass]: Boolean(iconClass),\r\n            [value as string]: Boolean(iconClass) && Boolean(value),\r\n        }),\r\n    };\r\n\r\n    // The wrapping span is needed because an error is thrown if one attempts\r\n    // to remove this from the dom once it is rendered. This is because the \"rendered\"\r\n    // node is the <i /> element, but a sibling <svg /> element is created as well.\r\n    // Without the wrapper and in the case that the element is added and removed again,\r\n    // React throws.\r\n    return (\r\n        <StyledRoot\r\n            as={isClickable ? 'button' : 'span'}\r\n            className={classes.root}\r\n            disabled={disabled}\r\n            onClick={handleClick}\r\n            ref={forwardedRef}\r\n        >\r\n            <StyledIcon className={classes.regular} size={size} {...rest} />\r\n        </StyledRoot>\r\n    );\r\n});\r\n\r\nexport default Icon;\r\n\r\nIcon.displayName = 'Icon';\r\n"],"names":[],"sourceRoot":""}