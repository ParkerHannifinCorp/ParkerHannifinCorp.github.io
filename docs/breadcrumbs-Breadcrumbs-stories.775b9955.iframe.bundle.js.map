{"version":3,"file":"breadcrumbs-Breadcrumbs-stories.775b9955.iframe.bundle.js","mappings":";;;AAWA;AACA;;;;AAIA;;AAGA;;AAEA;AACA;;;;AAIA;;AAGA;;AAEA;AACA;;;;AAIA;;AAKA;;AAGA;;;AAIA;;AAEA;;;;;;;;;AASA;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;AACA;AAaA;ACnHA;AAEA;AACA;AAEA;AACA;AAWA;;AAGA;;AAGA;;AAEA;;AAKA;AACA;;;;;;;;AAQA;;;;;AAKA;;;;AAIA;;;;;;;AAOA;AACA;;;;AAIA;AACA;;;;;;;;;;AA2CA","sources":["webpack://@arthur/docs/../../packages/arthur-ui/src/Breadcrumbs/Breadcrumbs.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/Link/Link.tsx"],"sourcesContent":["// istanbul ignore file: it is difficult to test resize events that trigger the ToggleIcon and Picker\r\nimport type { PropsWithChildren } from 'react';\r\nimport React, { Children, forwardRef } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport classNames from 'classnames';\r\nimport type { BreadcrumbsSize, BreadcrumbsVariant } from './types';\r\nimport { BreadcrumbsSizeEnum, BreadcrumbsVariantEnum } from './types';\r\n\r\nconst sizeStyles = {\r\n  small: css`\r\n    & .arthur-breadcrumbs-spacer {\r\n      font-size: ${(props) => props.theme.token.size.font.small};\r\n      padding: 0px ${(props) => props.theme.token.size.spacing['small-1x']};\r\n    }\r\n\r\n    & .arthur-breadcrumbs-item {\r\n      font-size: ${(props) => props.theme.token.size.font.small};\r\n    }\r\n  `,\r\n  medium: css`\r\n    & .arthur-breadcrumbs-spacer {\r\n      font-size: ${(props) => props.theme.token.size.font.medium};\r\n      padding: 0px ${(props) => props.theme.token.size.spacing.small};\r\n    }\r\n\r\n    & .arthur-breadcrumbs-item {\r\n      font-size: ${(props) => props.theme.token.size.font.medium};\r\n    }\r\n  `,\r\n  large: css`\r\n    & .arthur-breadcrumbs-spacer {\r\n      font-size: ${(props) => props.theme.token.size.font.medium};\r\n      padding: 0px ${(props) => props.theme.token.size.spacing.small};\r\n    }\r\n\r\n    & .arthur-breadcrumbs-item {\r\n      font-size: ${(props) => props.theme.token.size.font.medium};\r\n    }\r\n  `,\r\n};\r\n\r\nconst variantStyles = {\r\n  default: css`\r\n    & .arthur-breadcrumbs-item {\r\n      color: ${(props) => props.theme.token.color.black};\r\n      cursor: default;\r\n    }\r\n  `,\r\n  link: css`\r\n    & .arthur-breadcrumbs-item {\r\n      color: ${(props) => props.theme.token.color.palette.gray[50]};\r\n\r\n      &:hover {\r\n        text-decoration: none;\r\n      }\r\n    }\r\n\r\n    & .arthur-breadcrumbs-items-right {\r\n      & .arthur-breadcrumbs-item {\r\n        color: ${(props) => props.theme.token.color.black};\r\n        text-decoration: underline;\r\n      }\r\n    }\r\n  `,\r\n};\r\n\r\nconst StyledRoot = styled.nav<{ size: BreadcrumbsSize; variant: BreadcrumbsVariant }>`\r\n  display: flex;\r\n\r\n  & .arthur-breadcrumbs-items {\r\n    position: relative;\r\n\r\n    &.arthur-breadcrumbs-items-left {\r\n      display: flex;\r\n      overflow: hidden;\r\n    }\r\n\r\n    &.arthur-breadcrumbs-items-right {\r\n      display: flex;\r\n      flex: 1;\r\n    }\r\n  }\r\n\r\n  & .arthur-breadcrumbs-item {\r\n    position: relative;\r\n    white-space: nowrap;\r\n\r\n    &.arthur-breadcrumbs-item--disabled {\r\n      cursor: default;\r\n    }\r\n\r\n    &.arthur-breadcrumbs-item--collapsed {\r\n      & .arthur-breadcrumbs-item-inner {\r\n        opacity: 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  & .arthur-breadcrumbs-spacer {\r\n    &.arthur-breadcrumbs-spacer--collapsed {\r\n      opacity: 0;\r\n    }\r\n  }\r\n\r\n  & .arthur-breadcrumbs-toggle {\r\n    position: absolute;\r\n    top: calc(50% - 6px);\r\n    width: 12px;\r\n    z-index: 999;\r\n  }\r\n\r\n  ${(props) => sizeStyles[props.size]}\r\n  ${(props) => variantStyles[props.variant]}\r\n`;\r\n\r\nexport interface BreadcrumbsProps {\r\n  divider?: string;\r\n  className?: string;\r\n  disabled?: boolean;\r\n  // renderer?: (item: BreadcrumbsItem, index: number, items: BreadcrumbsItem[]) => ArthurNode;\r\n  // onItemClick?: (item: BreadcrumbsItem, meta: EventMeta) => void;\r\n  size?: BreadcrumbsSize;\r\n  variant?: BreadcrumbsVariant;\r\n}\r\n\r\nconst Breadcrumbs = forwardRef<HTMLDivElement, PropsWithChildren<BreadcrumbsProps>>((props, _forwardedRef) => {\r\n  const {\r\n    className,\r\n    disabled = false,\r\n    divider = '/',\r\n    children,\r\n    size = BreadcrumbsSizeEnum.medium,\r\n    variant = BreadcrumbsVariantEnum.default,\r\n    ...rest\r\n  } = props;\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'arthur-breadcrumbs',\r\n    `arthur-breadcrumbs--size-${size}`,\r\n    `arthur-breadcrumbs--variant-${variant}`,\r\n    {\r\n      'arthur-breadcrumbs--disabled': disabled,\r\n    },\r\n  );\r\n\r\n  return (\r\n    <StyledRoot className={classes} size={size} variant={variant} {...rest}>\r\n      {Children.map(children, (child, idx) => {\r\n        const dividerEl = idx > 0 ? <span className='arthur-breadcrumbs-spacer'>{divider}</span> : '';\r\n        return (\r\n          <div>\r\n            {dividerEl}\r\n            {child}\r\n          </div>\r\n        );\r\n      })}\r\n    </StyledRoot>\r\n  );\r\n});\r\n\r\nexport default Breadcrumbs;\r\nBreadcrumbs.displayName = 'Breadcrumbs';\r\n","import type { PropsWithChildren } from 'react';\r\nimport React, { forwardRef, useCallback } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport classNames from 'classnames';\r\nimport { useEnsureRef } from '../hook';\r\nimport type { LinkSize, LinkVariant } from './types';\r\nimport { LinkSizeEnum, LinkVariantEnum } from './types';\r\n\r\nconst linkStyles = {\r\n    small: css`\r\n        font-size: ${(props) => props.theme.token.size.font.small};\r\n    `,\r\n    medium: css`\r\n        font-size: ${(props) => props.theme.token.size.font.medium};\r\n    `,\r\n    large: css`\r\n        font-size: ${(props) => props.theme.token.size.font.large};\r\n    `,\r\n};\r\n\r\nconst LINK_TARGET = {\r\n    _self: true,\r\n    _blank: true,\r\n    _parent: true,\r\n    _top: true,\r\n};\r\n\r\nconst variantStyles = {\r\n    default: css`\r\n        &:active {\r\n            color: ${(props) => props.theme.token.color.black};\r\n        }\r\n    `,\r\n    secondary: css`\r\n        &:active {\r\n            color: ${(props) => props.theme.token.color.white};\r\n        }\r\n    `,\r\n};\r\n\r\nconst StyledRoot = styled.a<{ variant: LinkVariant; size: LinkSize }>`\r\n    color: ${(props) => props.theme.token.color.palette.blue.base};\r\n    text-decoration: none;\r\n\r\n    &:active {\r\n        text-decoration: underline;\r\n    }\r\n\r\n    &:hover {\r\n        color: ${(props) => props.theme.token.color.palette.blue.darker};\r\n        text-decoration: underline;\r\n    }\r\n\r\n    &:visited {\r\n        color: ${(props) => props.theme.token.color.palette.purple.base};\r\n    }\r\n\r\n    &.arthur-link--disabled {\r\n        color: ${(props) => props.theme.token.color.palette.gray[20]};\r\n    }\r\n\r\n    &.arthur-link--inline {\r\n        text-decoration: underline;\r\n    }\r\n\r\n    ${(props) => linkStyles[props.size]}\r\n    ${(props) => variantStyles[props.variant]} {\r\n        /* HACK: HANDLES TOKENS FOR CHILD ICONS */\r\n    }\r\n    & .arthur-icon {\r\n        margin-left: ${(props) => props.theme.token.size.spacing[props.size === 'large' ? 'small' : 'small-1x']};\r\n        margin-right: ${(props) => props.theme.token.size.spacing[props.size === 'large' ? 'small' : 'small-1x']};\r\n\r\n        &:first-child {\r\n            margin-left: 0px;\r\n        }\r\n\r\n        &:last-child {\r\n            margin-right: 0px;\r\n        }\r\n    }\r\n`;\r\n\r\n/**\r\n * Enumerates the pre-defined target attributes for Link components.\r\n */\r\nexport type LinkTarget = keyof typeof LINK_TARGET;\r\n\r\nexport interface LinkProps {\r\n    /**\r\n     * @default #\r\n     */\r\n    href?: string;\r\n    className?: string;\r\n    /**\r\n     * @default false\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * @default false\r\n     */\r\n    inline?: boolean;\r\n    target?: LinkTarget;\r\n    /**\r\n     * @default default\r\n     */\r\n    variant?: LinkVariant;\r\n    /**\r\n     * @default medium\r\n     */\r\n    size?: LinkSize;\r\n    onClick?: (event: React.MouseEvent<HTMLAnchorElement>) => void;\r\n}\r\n\r\nconst Link = forwardRef<HTMLAnchorElement, PropsWithChildren<LinkProps>>((props, forwardedRef) => {\r\n    const {\r\n        children,\r\n        className,\r\n        disabled,\r\n        href,\r\n        inline = false,\r\n        size = LinkSizeEnum.medium,\r\n        target,\r\n        variant = LinkVariantEnum.default,\r\n        onClick,\r\n        ...rest\r\n    } = props;\r\n\r\n    const targetRef = useEnsureRef(forwardedRef);\r\n\r\n    const classes = classNames(\r\n        className,\r\n        'arthur-link',\r\n        `arthur-link--size-${size}`,\r\n        `arthur-link--variant-${variant}`,\r\n        {\r\n            'arthur-link--disabled': disabled === true,\r\n            'arthur-link--inline': inline,\r\n        },\r\n    );\r\n\r\n    const handleClick = useCallback(\r\n        (event: React.MouseEvent<HTMLAnchorElement>) => {\r\n            if (disabled === true || href === undefined) {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n            }\r\n\r\n            if (disabled !== true) {\r\n                onClick?.(event);\r\n            }\r\n        },\r\n        [disabled, onClick],\r\n    );\r\n\r\n    return (\r\n        <StyledRoot\r\n            className={classes}\r\n            href={href || '#'}\r\n            onClick={handleClick}\r\n            ref={targetRef}\r\n            rel={target === '_blank' ? 'noopener noreferrer' : undefined}\r\n            role='link'\r\n            size={size}\r\n            target={target}\r\n            variant={variant}\r\n            {...rest}\r\n        >\r\n            {children}\r\n        </StyledRoot>\r\n    );\r\n});\r\n\r\nexport default Link;\r\nLink.displayName = 'Link';\r\n"],"names":[],"sourceRoot":""}