{"version":3,"file":"button-Button-stories.be669fca.iframe.bundle.js","mappings":";;AAsCA;;AAEA;AAEA;AACA;;AAEA;AAEA;AACA;;AAEA;AAIA;AAEA;AACA;;;AAGA;;;;AAIA;AACA;AACA;;AAGA;AACA;AACA;;;AAGA;;;;AAIA;AACA;AACA;;AAGA;;AAEA;AACA;;;AAGA;;;;;AAKA;AACA;AACA;;;;;AAKA;;AAGA;AACA;AACA;;;AAGA;;;;AAIA;AACA;AACA;;AAKA;;AAOA;AACA;;;;;AAKA;AACA;;;AAGA;AACA;;;;AAIA;AACA;;;;;;;;;;AAYA;ACrIA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;;;;;;;;;;;AAWA;;;;;;;;AAQA;;;AAKA;AACA;AAGA","sources":["webpack://@arthur/docs/../../packages/arthur-ui/src/Button/Button.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/Icon/Icon.tsx"],"sourcesContent":["import type { PropsWithChildren } from 'react';\nimport React, { forwardRef, useCallback } from 'react';\nimport styled, { css } from 'styled-components';\nimport classNames from 'classnames';\nimport {\n  ButtonSizesEnum,\n  type ButtonSizes,\n  type ButtonTypes,\n  type ButtonVariants,\n  ButtonTypesEnum,\n  ButtonVariantsEnum,\n} from './types';\n\nexport interface ButtonProps {\n  className?: string;\n  /**\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * @default medium\n   */\n  size?: ButtonSizes;\n  /**\n   * @default default\n   */\n  variant?: ButtonVariants;\n  onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  formId?: string;\n  name?: string;\n  /**\n   * @default button\n   */\n  type?: ButtonTypes;\n}\n\nconst buttonSizeStyles = {\n  small: css`\n    font-size: ${(props) => props.theme.token.size.font.small};\n    height: 30px;\n    padding: 0px ${(props) => props.theme.token.size.spacing.small};\n  `,\n  medium: css`\n    font-size: ${(props) => props.theme.token.size.font.medium};\n    height: 40px;\n    padding: 0px ${(props) => props.theme.token.size.spacing.medium};\n  `,\n  large: css`\n    font-size: ${(props) => props.theme.token.size.font.large};\n    height: 50px;\n    padding: 0px ${(props) => props.theme.token.size.spacing.medium};\n  `,\n};\n\nconst buttonVariantStyles = {\n  default: css`\n    background-color: ${(props) => props.theme.token.color.palette.gold.base};\n    color: ${(props) => props.theme.token.color.black};\n\n    &:not(.arthur-button--disabled):hover {\n      background-color: ${(props) => props.theme.token.color.palette.gold.lighter};\n    }\n\n    &:not(.arthur-button--disabled):active {\n      background-color: ${(props) => props.theme.token.color.palette.gold.darker};\n      box-shadow: inset 0 0 0 1px ${(props) => props.theme.token.color.palette.gold.darker},\n        inset 0 0 0 2px ${(props) => props.theme.token.color.white};\n    }\n  `,\n  secondary: css`\n    background-color: ${(props) => props.theme.token.color.palette.gray[80]};\n    color: ${(props) => props.theme.token.color.white};\n\n    &:not(.arthur-button--disabled):hover {\n      background-color: ${(props) => props.theme.token.color.palette.gray[70]};\n    }\n\n    &:not(.arthur-button--disabled):active {\n      background-color: ${(props) => props.theme.token.color.palette.gray[60]};\n      box-shadow: inset 0 0 0 1px ${(props) => props.theme.token.color.palette.gray[60]},\n        inset 0 0 0 2px ${(props) => props.theme.token.color.white};\n    }\n  `,\n  tertiary: css`\n    background-color: transparent;\n    box-shadow: inset 0 0 0 2px ${(props) => props.theme.token.color.palette.gold.base};\n    color: ${(props) => props.theme.token.color.black};\n\n    &:not(.arthur-button--disabled):hover {\n      background-color: ${(props) => props.theme.token.color.palette.gold.lighter};\n      box-shadow: none;\n    }\n\n    &:not(.arthur-button--disabled):active {\n      background-color: ${(props) => props.theme.token.color.palette.gold.darker};\n      box-shadow: inset 0 0 0 1px ${(props) => props.theme.token.color.palette.gold.darker},\n        inset 0 0 0 2px ${(props) => props.theme.token.color.white};\n    }\n\n    &.arthur-button--disabled {\n      background-color: transparent;\n      box-shadow: inset 0 0 0 2px ${(props) => props.theme.token.color.palette.gray[20]};\n    }\n  `,\n  danger: css`\n    background-color: ${(props) => props.theme.token.color.palette.red.base};\n    color: ${(props) => props.theme.token.color.white};\n\n    &:not(.arthur-button--disabled):hover {\n      background-color: ${(props) => props.theme.token.color.palette.red.darker};\n    }\n\n    &:not(.arthur-button--disabled):active {\n      background-color: ${(props) => props.theme.token.color.palette.red.darkest};\n      box-shadow: inset 0 0 0 1px ${(props) => props.theme.token.color.palette.red.darkest},\n        inset 0 0 0 2px ${(props) => props.theme.token.color.white};\n    }\n  `,\n};\n\nconst StyledRoot = styled.button<{\n  variant: ButtonVariants;\n  size: ButtonSizes;\n  type: ButtonTypes;\n  ref: React.ForwardedRef<unknown>;\n}>`\n  border: none;\n  border-radius: ${(props) => props.theme.token.radius.border.pill};\n  font-weight: ${(props) => props.theme.token.weight.font.regular};\n  min-width: 140px;\n  outline: none;\n\n  &.arthur-button--disabled {\n    background-color: ${(props) => props.theme.token.color.palette.gray[20]};\n    color: ${(props) => props.theme.token.color.palette.gray[40]};\n  }\n\n  ${(props) => buttonSizeStyles[props.size]}\n  ${(props) => buttonVariantStyles[props.variant]} {\n    /* HACK: HANDLES TOKENS FOR CHILD ICONS */\n  }\n  & .arthur-icon {\n    margin-left: ${(props) => props.theme.token.size.spacing[props.size === 'large' ? 'small' : 'small-1x']};\n    margin-right: ${(props) => props.theme.token.size.spacing[props.size === 'large' ? 'small' : 'small-1x']};\n\n    &:first-child {\n      margin-left: 0px;\n    }\n\n    &:last-child {\n      margin-right: 0px;\n    }\n  }\n`;\n\nconst Button = forwardRef((props: PropsWithChildren<ButtonProps>, forwardedRef) => {\n  const {\n    children,\n    className,\n    disabled = false,\n    size = ButtonSizesEnum.medium,\n    type = ButtonTypesEnum.button,\n    variant = ButtonVariantsEnum.default,\n    onClick,\n    ...rest\n  } = props;\n\n  const classes = classNames(\n    className,\n    'arthur-button',\n    `arthur-button--size-${size}`,\n    `arthur-button--variant-${variant}`,\n    {\n      'arthur-button--disabled': disabled,\n    },\n  );\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLButtonElement>) => {\n      onClick?.(event);\n    },\n    [onClick],\n  );\n\n  return (\n    <StyledRoot\n      className={classes}\n      disabled={disabled}\n      onClick={handleClick}\n      ref={forwardedRef}\n      role='button'\n      size={size}\n      type={type}\n      variant={variant}\n      {...rest}\n    >\n      {children}\n    </StyledRoot>\n  );\n});\n\nexport default Button;\n\nButton.displayName = 'Button';\n","import React, { forwardRef, useCallback } from 'react';\nimport styled, { css } from 'styled-components';\nimport classNames from 'classnames';\nimport { type IconValue, type IconSizes, IconSizesEnum } from './types';\nimport { ICON_VALUES } from './constants';\n\nexport interface IconProps {\n    className?: string;\n    /**\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * @default medium\n     */\n    size?: IconSizes;\n    onClick?: (event: React.MouseEvent<HTMLSpanElement>) => unknown;\n    value: IconValue;\n}\n\nconst iconSizeStyles = {\n    'small-1x': css`\n        font-size: ${(props) => props.theme.token.size.font['small-1x']};\n    `,\n    small: css`\n        font-size: ${(props) => props.theme.token.size.font.small};\n    `,\n    medium: css`\n        font-size: ${(props) => props.theme.token.size.font.medium};\n    `,\n    large: css`\n        font-size: ${(props) => props.theme.token.size.font.large};\n    `,\n};\n\nconst StyledRoot = styled.span<{ disabled?: boolean }>`\n    background-color: transparent;\n    border: 0px none;\n    outline: 0px none;\n    padding: 0px;\n\n    &:not(.arthur-icon--disabled) {\n        &.arthur-icon--clickable {\n            &:hover,\n            &:focus,\n            &:active {\n                color: ${(props) => props.theme.token.color.palette.gold.base};\n                cursor: pointer;\n                outline: 0px none;\n            }\n        }\n    }\n\n    &.arthur-icon--disabled {\n        color: ${(props) => props.theme.token.color.action.text.primary.disabled};\n        cursor: default;\n    }\n`;\n\nconst StyledIcon = styled.i<{ size: IconSizes }>`\n    ${(props) => iconSizeStyles[props.size]}\n`;\n\nconst Icon = forwardRef<HTMLSpanElement | HTMLButtonElement, IconProps>((props, forwardedRef) => {\n    const { className, disabled, size = 'medium', value, onClick, ...rest } = props;\n\n    const iconClass = ICON_VALUES[value];\n\n    if (!IconSizesEnum[size]) {\n        throw new Error(`icon: invalid size \"${size}\"`);\n    }\n\n    const isClickable = disabled === true || typeof onClick === 'function';\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLSpanElement>) => {\n            if (disabled) return;\n\n            onClick?.(event);\n        },\n        [disabled, onClick],\n    );\n\n    const classes = {\n        root: classNames(className, 'arthur-icon', `arthur-icon--size-${size}`, {\n            'arthur-icon--clickable': isClickable,\n            'arthur-icon--disabled': disabled === true,\n        }),\n        regular: classNames('arthur-icon-regular', 'fa-regular', {\n            'fa-foobar': Boolean(iconClass) && Boolean(value),\n            [iconClass]: Boolean(iconClass),\n            [value as string]: Boolean(iconClass) && Boolean(value),\n        }),\n    };\n\n    // The wrapping span is needed because an error is thrown if one attempts\n    // to remove this from the dom once it is rendered. This is because the \"rendered\"\n    // node is the <i /> element, but a sibling <svg /> element is created as well.\n    // Without the wrapper and in the case that the element is added and removed again,\n    // React throws.\n    return (\n        <StyledRoot\n            as={isClickable ? 'button' : 'span'}\n            className={classes.root}\n            disabled={disabled}\n            onClick={handleClick}\n            ref={forwardedRef}\n        >\n            <StyledIcon className={classes.regular} size={size} {...rest} />\n        </StyledRoot>\n    );\n});\n\nexport default Icon;\n\nIcon.displayName = 'Icon';\n"],"names":[],"sourceRoot":""}