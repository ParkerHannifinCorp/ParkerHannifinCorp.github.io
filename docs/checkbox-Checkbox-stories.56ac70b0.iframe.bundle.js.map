{"version":3,"file":"checkbox-Checkbox-stories.56ac70b0.iframe.bundle.js","mappings":";;;;AAwBA;;;;;;;;;;;;;;;;;;;;;;;AAyBA;AACA;AACA;;;;;AAKA;AACA;;;;;;;AAOA;;;AAGA;;;;;;;;;;;;AAYA;AACA;;;;;AAKA;AACA;;;;;;AAMA;;;;AAIA;;;;;;;;;;;;AA8CA;;AChIA;;AAKA;;;AAGA;AA0CA;AC1BA;;AAEA;AAEA;AACA;;AAEA;AAEA;AACA;;AAEA;AAIA;AAEA;AACA;;;AAGA;;;;AAIA;AACA;AACA;;AAGA;AACA;AACA;;;AAGA;;;;AAIA;AACA;AACA;;AAGA;;AAEA;AACA;;;AAGA;;;;;AAKA;AACA;AACA;;;;;AAKA;;AAGA;AACA;AACA;;;AAGA;;;;AAIA;AACA;AACA;;AAKA;;AAOA;AACA;;;;;AAKA;AACA;;;AAGA;AACA;;;;AAIA;AACA;;;;;;;;;;AAYA;ACjJA;;;AAGA;;;;;AAKA;;;;AAIA;;;AAIA;AACA;;;AAGA;;;;;AAKA;;;;AAIA;;;AAMA;AACA;AACA;;;AAGA;;;;AAIA;;;;AAIA;AACA;;;;AAIA;AACA;AACA;;;AAGA;;;;;;;;AAQA;;;AAGA;;;;AAIA;;;;AAIA;AA0BA;AC3FA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;;;;;;;;;;;AAWA;;;;;;;;AAQA;;;AAKA;AACA;AAGA","sources":["webpack://@arthur/docs/../../packages/arthur-ui/src/Checkbox/Checkbox.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/CheckboxGroup/CheckboxGroup.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/Button/Button.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/FormField/FormField.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/Icon/Icon.tsx"],"sourcesContent":["import type { Ref } from 'react';\r\nimport React, { forwardRef, useCallback, useContext, useEffect, useRef, useState } from 'react';\r\nimport { styled, type CSSProp } from 'styled-components';\r\nimport classnames from 'classnames';\r\nimport type tokens from '@arthur/design-tokens';\r\nimport Icon from '../Icon';\r\nimport { CheckboxGroupContext } from '../CheckboxGroup/CheckboxGroupContext';\r\nimport { useCombineRefs } from '../util';\r\n\r\ntype TokenType = typeof tokens;\r\n\r\ndeclare module 'styled-components' {\r\n  export interface DefaultTheme extends TokenType {}\r\n}\r\n\r\ndeclare module 'react' {\r\n  interface DOMAttributes<T> {\r\n    css?: CSSProp;\r\n  }\r\n}\r\n\r\nconst StyledRoot = styled.span`\r\n  align-items: center;\r\n  display: flex;\r\n  padding: ${(props) => {\r\n    return props.theme.token.size.spacing['small-2x'];\r\n  }};\r\n\r\n  position: relative;\r\n\r\n  & .arthur-checkbox-input {\r\n    appearance: none;\r\n    box-sizing: border-box;\r\n    height: 16.5px;\r\n    margin: 0px;\r\n    position: absolute;\r\n    outline: 0px none;\r\n    width: 16.5px;\r\n\r\n    /*** THIS COMBATS LACK OF SPECIFICITY IN CONSUMING APPS' CSS ***/\r\n    border: inherit;\r\n    background-color: inherit;\r\n  }\r\n\r\n  & .arthur-checkbox-button {\r\n    height: 16px;\r\n    width: 16px;\r\n    border-radius: 0px;\r\n    background-color: transparent;\r\n    border: 1px solid ${(props) => props.theme.token.color.palette.gray[75]};\r\n    border-radius: ${(props) => props.theme.token.radius.border.basic};\r\n    margin-right: ${(props) => props.theme.token.size.spacing['small-1x']};\r\n    padding: 0px;\r\n\r\n    &:focus,\r\n    &:active {\r\n      outline: ${(props) => props.theme.token.size.border.medium} solid\r\n        ${(props) => props.theme.token.color.palette.gold.base};\r\n    }\r\n  }\r\n\r\n  &.arthur-checkbox--checked,\r\n  &.arthur-checkbox--indeterminate {\r\n    & .arthur-checkbox-button {\r\n      background-color: ${(props) => props.theme.token.color.palette.gray[75]};\r\n\r\n      & .arthur-icon {\r\n        color: ${(props) => props.theme.token.color.white};\r\n        top: -1px;\r\n        position: relative;\r\n      }\r\n    }\r\n  }\r\n\r\n  &:has(.arthur-checkbox-input:focus),\r\n  &:has(.arthur-checkbox-input:active),\r\n  &:has(.arthur-checkbox-label:focus),\r\n  &:has(.arthur-checkbox-label:active) {\r\n    & .arthur-checkbox-button {\r\n      outline: ${(props) => props.theme.token.size.border.medium} solid\r\n        ${(props) => props.theme.token.color.palette.gold.base};\r\n    }\r\n  }\r\n\r\n  & .arthur-checkbox-label {\r\n    color: ${(props) => props.theme.token.color.palette.gray[75]};\r\n    font-size: ${(props) => props.theme.token.size.font.medium};\r\n    user-select: none;\r\n  }\r\n\r\n  &.arthur-checkbox--disabled {\r\n    & .arthur-checkbox-button {\r\n      border-color: ${(props) => props.theme.token.color.action.text.primary.disabled};\r\n    }\r\n\r\n    & .arthur-checkbox-label {\r\n      color: ${(props) => props.theme.token.color.action.text.primary.disabled};\r\n    }\r\n\r\n    &:has(.arthur-checkbox-input:focus),\r\n    &:has(.arthur-checkbox-input:active),\r\n    &:has(.arthur-checkbox-label:focus),\r\n    &:has(.arthur-checkbox-label:active) {\r\n      & .arthur-checkbox-button {\r\n        outline: 0px none;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport interface CheckboxProps {\r\n  /**\r\n   * Sets the value for a controlled checkbox\r\n   *\r\n   * @default false\r\n   */\r\n  checked?: boolean;\r\n  /**\r\n   * Sets the initial value for an uncontrolled checkbox\r\n   *\r\n   * @default false\r\n   */\r\n  defaultChecked?: boolean;\r\n  className?: string;\r\n  indeterminate?: boolean;\r\n  /**\r\n   * @default false\r\n   */\r\n  disabled?: boolean;\r\n  label: string;\r\n  value: string;\r\n  inputRef?: Ref<Element>;\r\n  /**\r\n   * @default false\r\n   */\r\n  required?: boolean;\r\n  onChange?: (\r\n    event: React.ChangeEvent<HTMLInputElement> | React.MouseEvent<HTMLButtonElement>,\r\n    checked?: boolean,\r\n  ) => void;\r\n}\r\n\r\nconst Checkbox = forwardRef<HTMLInputElement, CheckboxProps>((props, forwardedRef) => {\r\n  const {\r\n    checked: checkedProp,\r\n    defaultChecked,\r\n    className,\r\n    disabled: disabledProp,\r\n    inputRef,\r\n    label,\r\n    indeterminate,\r\n    value,\r\n    onChange,\r\n    required,\r\n  } = props;\r\n\r\n  const internalCheckboxRef = useRef<HTMLInputElement>(null);\r\n  const combinedCheckboxRef = useCombineRefs([inputRef, internalCheckboxRef]);\r\n  const groupContext = useContext(CheckboxGroupContext);\r\n  const contextOnChange = groupContext?.onChange;\r\n  const disabled = groupContext?.disabled || disabledProp;\r\n  const contextValue = groupContext?.value;\r\n  const isInGroup = Boolean(groupContext);\r\n  const isCheckedControlled = checkedProp !== undefined || isInGroup;\r\n  const [internalChecked, setInternalChecked] = useState<boolean | undefined>(defaultChecked);\r\n  const checked =\r\n    (isInGroup\r\n      ? typeof value === 'string' && Array.isArray(contextValue) && contextValue.includes(value)\r\n      : checkedProp) ?? internalChecked;\r\n\r\n  const inputOnChange = useCallback<NonNullable<React.InputHTMLAttributes<HTMLInputElement>['onChange']>>(\r\n    (event) => {\r\n      const newChecked = event.target.checked;\r\n\r\n      if (!isCheckedControlled) setInternalChecked(newChecked);\r\n\r\n      onChange?.(event, newChecked);\r\n      contextOnChange?.(event);\r\n    },\r\n    [contextOnChange, isCheckedControlled, onChange],\r\n  );\r\n\r\n  // Update the indeterminate property when it changes\r\n  useEffect(() => {\r\n    if (internalCheckboxRef.current && indeterminate !== undefined) {\r\n      internalCheckboxRef.current.indeterminate = indeterminate;\r\n    }\r\n  }, [indeterminate]);\r\n\r\n  const classes = classnames(className, 'arthur-checkbox', {\r\n    'arthur-checkbox--unchecked': checked === false,\r\n    'arthur-checkbox--checked': checked === true,\r\n    'arthur-checkbox--indeterminate': indeterminate === true,\r\n    'arthur-checkbox--disabled': disabled === true,\r\n  });\r\n\r\n  return (\r\n    <StyledRoot as={label ? 'label' : 'span'} className={classes} ref={forwardedRef}>\r\n      <input\r\n        aria-checked={checked}\r\n        checked={checked}\r\n        className='arthur-checkbox-input'\r\n        disabled={disabled}\r\n        onChange={inputOnChange}\r\n        ref={combinedCheckboxRef}\r\n        required={required}\r\n        type='checkbox'\r\n        value={value}\r\n      />\r\n      <button className='arthur-checkbox-button' tabIndex={-1} type='button'>\r\n        {checked ? <Icon value='check' /> : null}\r\n        {indeterminate ? <Icon value='hyphen' /> : null}\r\n      </button>\r\n      {label}\r\n    </StyledRoot>\r\n  );\r\n});\r\n\r\nexport default Checkbox;\r\nCheckbox.displayName = 'Checkbox';\r\n","import type { PropsWithChildren } from 'react';\r\nimport React, { forwardRef, useCallback, useMemo, useState } from 'react';\r\nimport { css, styled } from 'styled-components';\r\nimport classNames from 'classnames';\r\nimport FormField from '../FormField';\r\nimport type { CheckboxLayouts } from './types';\r\nimport { CheckboxLayoutsEnum } from './types';\r\nimport type { CheckboxGroupContextProps } from './CheckboxGroupContext';\r\nimport { CheckboxGroupContext } from './CheckboxGroupContext';\r\n\r\nconst layoutStyles = {\r\n    vertical: css`\r\n        flex-direction: column;\r\n    `,\r\n    horizontal: css`\r\n        flex-direction: row;\r\n    `,\r\n};\r\n\r\nconst StyledRoot = styled.div<{ layout: CheckboxLayouts }>`\r\n    display: flex;\r\n\r\n    ${(props) => layoutStyles[props.layout]}\r\n`;\r\n\r\nexport interface CheckboxGroupProps {\r\n    /**\r\n     * Determines the visual layout\r\n     *\r\n     * @default vertical\r\n     */\r\n    layout?: CheckboxLayouts;\r\n    indeterminate?: boolean;\r\n    className?: string;\r\n    /**\r\n     * @default false\r\n     */\r\n    disabled?: boolean;\r\n    label?: string;\r\n    onChange?: (newValue: string[]) => void;\r\n    /**\r\n     * @default false\r\n     */\r\n    checked?: boolean;\r\n    /**\r\n     * Sets the value for a controlled checkbox group\r\n     *\r\n     * @default []\r\n     */\r\n    value?: string[];\r\n    /**\r\n     * Sets the initial value for an uncontrolled checkbox\r\n     *\r\n     * @default []\r\n     */\r\n    defaultValue?: string[];\r\n    /**\r\n     * If true, this will add a red * to your label\r\n     *\r\n     * @default false\r\n     */\r\n    required?: boolean;\r\n}\r\n\r\nconst CheckboxGroup = forwardRef<HTMLDivElement, PropsWithChildren<CheckboxGroupProps>>((props, forwardedRef) => {\r\n    const {\r\n        children,\r\n        className,\r\n        disabled,\r\n        defaultValue = [],\r\n        label,\r\n        layout = CheckboxLayoutsEnum.vertical,\r\n        onChange: onChangeProp,\r\n        value: valueProp,\r\n        required,\r\n    } = props;\r\n\r\n    const isValueControlled = valueProp !== undefined;\r\n\r\n    const [internalValue, setInternalValue] = useState<CheckboxGroupContextProps['value']>(defaultValue);\r\n\r\n    const value = valueProp || internalValue;\r\n\r\n    const onChange = useCallback<CheckboxGroupContextProps['onChange']>(\r\n        (ev) => {\r\n            const newValue = value.filter((v) => v !== ev.target.value);\r\n\r\n            if (ev.target.checked) newValue.push(ev.target.value);\r\n\r\n            if (!isValueControlled) setInternalValue(newValue);\r\n\r\n            onChangeProp?.(newValue);\r\n        },\r\n        [isValueControlled, onChangeProp, value],\r\n    );\r\n\r\n    // Context\r\n    const groupContext = useMemo<CheckboxGroupContextProps>(\r\n        () => ({ disabled, onChange, value }),\r\n        [disabled, onChange, value],\r\n    );\r\n\r\n    const classes = classNames(className, 'arthur-checkboxgroup', `arthur-checkboxgroup--layout-${layout}`, {\r\n        'arthur-checkboxgroup--disabled': disabled === true,\r\n    });\r\n\r\n    return (\r\n        <FormField disabled={disabled} label={label} ref={forwardedRef} required={required}>\r\n            <CheckboxGroupContext.Provider value={groupContext}>\r\n                <StyledRoot className={classes} layout={layout} ref={forwardedRef}>\r\n                    {children}\r\n                </StyledRoot>\r\n            </CheckboxGroupContext.Provider>\r\n        </FormField>\r\n    );\r\n});\r\n\r\nexport default CheckboxGroup;\r\nCheckboxGroup.displayName = 'CheckboxGroup';\r\n","import type { PropsWithChildren } from 'react';\r\nimport React, { forwardRef, useCallback } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport classNames from 'classnames';\r\nimport {\r\n  ButtonSizesEnum,\r\n  type ButtonSizes,\r\n  type ButtonTypes,\r\n  type ButtonVariants,\r\n  ButtonTypesEnum,\r\n  ButtonVariantsEnum,\r\n} from './types';\r\n\r\nexport interface ButtonProps {\r\n  className?: string;\r\n  /**\r\n   * @default false\r\n   */\r\n  disabled?: boolean;\r\n  /**\r\n   * @default medium\r\n   */\r\n  size?: ButtonSizes;\r\n  /**\r\n   * @default default\r\n   */\r\n  variant?: ButtonVariants;\r\n  onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n  formId?: string;\r\n  name?: string;\r\n  /**\r\n   * @default button\r\n   */\r\n  type?: ButtonTypes;\r\n}\r\n\r\nconst buttonSizeStyles = {\r\n  small: css`\r\n    font-size: ${(props) => props.theme.token.size.font.small};\r\n    height: 30px;\r\n    padding: 0px ${(props) => props.theme.token.size.spacing.small};\r\n  `,\r\n  medium: css`\r\n    font-size: ${(props) => props.theme.token.size.font.medium};\r\n    height: 40px;\r\n    padding: 0px ${(props) => props.theme.token.size.spacing.medium};\r\n  `,\r\n  large: css`\r\n    font-size: ${(props) => props.theme.token.size.font.large};\r\n    height: 50px;\r\n    padding: 0px ${(props) => props.theme.token.size.spacing.medium};\r\n  `,\r\n};\r\n\r\nconst buttonVariantStyles = {\r\n  default: css`\r\n    background-color: ${(props) => props.theme.token.color.palette.gold.base};\r\n    color: ${(props) => props.theme.token.color.black};\r\n\r\n    &:not(.arthur-button--disabled):hover {\r\n      background-color: ${(props) => props.theme.token.color.palette.gold.lighter};\r\n    }\r\n\r\n    &:not(.arthur-button--disabled):active {\r\n      background-color: ${(props) => props.theme.token.color.palette.gold.darker};\r\n      box-shadow: inset 0 0 0 1px ${(props) => props.theme.token.color.palette.gold.darker},\r\n        inset 0 0 0 2px ${(props) => props.theme.token.color.white};\r\n    }\r\n  `,\r\n  secondary: css`\r\n    background-color: ${(props) => props.theme.token.color.palette.gray[80]};\r\n    color: ${(props) => props.theme.token.color.white};\r\n\r\n    &:not(.arthur-button--disabled):hover {\r\n      background-color: ${(props) => props.theme.token.color.palette.gray[70]};\r\n    }\r\n\r\n    &:not(.arthur-button--disabled):active {\r\n      background-color: ${(props) => props.theme.token.color.palette.gray[60]};\r\n      box-shadow: inset 0 0 0 1px ${(props) => props.theme.token.color.palette.gray[60]},\r\n        inset 0 0 0 2px ${(props) => props.theme.token.color.white};\r\n    }\r\n  `,\r\n  tertiary: css`\r\n    background-color: transparent;\r\n    box-shadow: inset 0 0 0 2px ${(props) => props.theme.token.color.palette.gold.base};\r\n    color: ${(props) => props.theme.token.color.black};\r\n\r\n    &:not(.arthur-button--disabled):hover {\r\n      background-color: ${(props) => props.theme.token.color.palette.gold.lighter};\r\n      box-shadow: none;\r\n    }\r\n\r\n    &:not(.arthur-button--disabled):active {\r\n      background-color: ${(props) => props.theme.token.color.palette.gold.darker};\r\n      box-shadow: inset 0 0 0 1px ${(props) => props.theme.token.color.palette.gold.darker},\r\n        inset 0 0 0 2px ${(props) => props.theme.token.color.white};\r\n    }\r\n\r\n    &.arthur-button--disabled {\r\n      background-color: transparent;\r\n      box-shadow: inset 0 0 0 2px ${(props) => props.theme.token.color.palette.gray[20]};\r\n    }\r\n  `,\r\n  danger: css`\r\n    background-color: ${(props) => props.theme.token.color.palette.red.base};\r\n    color: ${(props) => props.theme.token.color.white};\r\n\r\n    &:not(.arthur-button--disabled):hover {\r\n      background-color: ${(props) => props.theme.token.color.palette.red.darker};\r\n    }\r\n\r\n    &:not(.arthur-button--disabled):active {\r\n      background-color: ${(props) => props.theme.token.color.palette.red.darkest};\r\n      box-shadow: inset 0 0 0 1px ${(props) => props.theme.token.color.palette.red.darkest},\r\n        inset 0 0 0 2px ${(props) => props.theme.token.color.white};\r\n    }\r\n  `,\r\n};\r\n\r\nconst StyledRoot = styled.button<{\r\n  variant: ButtonVariants;\r\n  size: ButtonSizes;\r\n  type: ButtonTypes;\r\n  ref: React.ForwardedRef<unknown>;\r\n}>`\r\n  border: none;\r\n  border-radius: ${(props) => props.theme.token.radius.border.pill};\r\n  font-weight: ${(props) => props.theme.token.weight.font.regular};\r\n  min-width: 140px;\r\n  outline: none;\r\n\r\n  &.arthur-button--disabled {\r\n    background-color: ${(props) => props.theme.token.color.palette.gray[20]};\r\n    color: ${(props) => props.theme.token.color.palette.gray[40]};\r\n  }\r\n\r\n  ${(props) => buttonSizeStyles[props.size]}\r\n  ${(props) => buttonVariantStyles[props.variant]} {\r\n    /* HACK: HANDLES TOKENS FOR CHILD ICONS */\r\n  }\r\n  & .arthur-icon {\r\n    margin-left: ${(props) => props.theme.token.size.spacing[props.size === 'large' ? 'small' : 'small-1x']};\r\n    margin-right: ${(props) => props.theme.token.size.spacing[props.size === 'large' ? 'small' : 'small-1x']};\r\n\r\n    &:first-child {\r\n      margin-left: 0px;\r\n    }\r\n\r\n    &:last-child {\r\n      margin-right: 0px;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Button = forwardRef((props: PropsWithChildren<ButtonProps>, forwardedRef) => {\r\n  const {\r\n    children,\r\n    className,\r\n    disabled = false,\r\n    size = ButtonSizesEnum.medium,\r\n    type = ButtonTypesEnum.button,\r\n    variant = ButtonVariantsEnum.default,\r\n    onClick,\r\n    ...rest\r\n  } = props;\r\n\r\n  const classes = classNames(\r\n    className,\r\n    'arthur-button',\r\n    `arthur-button--size-${size}`,\r\n    `arthur-button--variant-${variant}`,\r\n    {\r\n      'arthur-button--disabled': disabled,\r\n    },\r\n  );\r\n\r\n  const handleClick = useCallback(\r\n    (event: React.MouseEvent<HTMLButtonElement>) => {\r\n      onClick?.(event);\r\n    },\r\n    [onClick],\r\n  );\r\n\r\n  return (\r\n    <StyledRoot\r\n      className={classes}\r\n      disabled={disabled}\r\n      onClick={handleClick}\r\n      ref={forwardedRef}\r\n      role='button'\r\n      size={size}\r\n      type={type}\r\n      variant={variant}\r\n      {...rest}\r\n    >\r\n      {children}\r\n    </StyledRoot>\r\n  );\r\n});\r\n\r\nexport default Button;\r\n\r\nButton.displayName = 'Button';\r\n","import type { PropsWithChildren } from 'react';\r\nimport React, { forwardRef } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport classNames from 'classnames';\r\nimport { useEnsureId } from '../hook';\r\nimport type { FormFieldSize } from './types';\r\nimport { FormFieldSizeEnum } from './types';\r\n\r\nconst sizeStyles = {\r\n    small: css`\r\n        font-size: ${(props) => props.theme.token.size.font.small};\r\n\r\n        & .arthur-field-header-label {\r\n            font-size: ${(props) => props.theme.token.size.font.small};\r\n        }\r\n\r\n        & .arthur-field-footer {\r\n            & .arthur-field-footer-info {\r\n                font-size: ${(props) => props.theme.token.size.font.small};\r\n            }\r\n\r\n            & .arthur-field-footer-error {\r\n                font-size: ${(props) => props.theme.token.size.font.small};\r\n            }\r\n        }\r\n    `,\r\n    medium: css`\r\n        font-size: ${(props) => props.theme.token.size.font.medium};\r\n\r\n        & .arthur-field-header-label {\r\n            font-size: ${(props) => props.theme.token.size.font.medium};\r\n        }\r\n\r\n        & .arthur-field-footer {\r\n            & .arthur-field-footer-info {\r\n                font-size: ${(props) => props.theme.token.size.font.medium};\r\n            }\r\n\r\n            & .arthur-field-footer-error {\r\n                font-size: ${(props) => props.theme.token.size.font.medium};\r\n            }\r\n        }\r\n    `,\r\n};\r\n\r\nconst StyledRoot = styled.div<{ size: FormFieldSize; $showInfoText: boolean; $showErrorText: boolean }>`\r\n    font-family: ${(props) => props.theme.token.font.family['sans-serif']};\r\n    color: ${(props) => props.theme.token.color.black};\r\n\r\n    & .arthur-field-header {\r\n        margin-bottom: ${(props) => props.theme.token.size.spacing['small-2x']};\r\n    }\r\n\r\n    & .arthur-field-header-label {\r\n        font-weight: ${(props) => props.theme.token.weight.font.bold};\r\n    }\r\n\r\n    & .arthur-field-header-required {\r\n        color: ${(props) => props.theme.token.color.feedback.error};\r\n        padding-left: ${(props) => props.theme.token.size.spacing['small-2x']};\r\n    }\r\n\r\n    & .arthur-field-footer {\r\n        margin-top: ${(props) => props.theme.token.size.spacing['small-2x']};\r\n        ${(props) => props.$showInfoText && `color: ${props.theme.token.color.feedback.info};`}\r\n        ${(props) => props.$showErrorText && `color: ${props.theme.token.color.feedback.error};`}\r\n\r\n    & .arthur-field-footer-info {\r\n            padding-right: ${(props) => props.theme.token.size.spacing['small-2x']};\r\n        }\r\n\r\n        & .arthur-field-footer-error {\r\n        }\r\n    }\r\n\r\n    &.arthur-field--disabled {\r\n        color: ${(props) => props.theme.token.color.palette.gray[20]};\r\n\r\n        & .arthur-field-header-required {\r\n            color: ${(props) => props.theme.token.color.palette.gray[20]};\r\n        }\r\n\r\n        & .arthur-field-footer {\r\n            color: ${(props) => props.theme.token.color.palette.gray[20]};\r\n        }\r\n    }\r\n\r\n    ${(props) => sizeStyles[props.size]}\r\n`;\r\n\r\nexport interface FormFieldProps {\r\n    errorText?: string;\r\n    infoText?: string;\r\n    invalid?: boolean;\r\n    /**\r\n     * If true, this will add a red * to your label\r\n     *\r\n     * @default false\r\n     */\r\n    required?: boolean;\r\n    /**\r\n     * @default medium\r\n     */\r\n    size?: FormFieldSize;\r\n    /**\r\n     * @default false\r\n     */\r\n    disabled?: boolean;\r\n    label?: string;\r\n    id?: string;\r\n    className?: string;\r\n}\r\n\r\nconst FormField = forwardRef<HTMLDivElement, PropsWithChildren<FormFieldProps>>((props, forwardedRef) => {\r\n    const {\r\n        className,\r\n        id,\r\n        children,\r\n        disabled,\r\n        errorText,\r\n        label,\r\n        infoText,\r\n        size = FormFieldSizeEnum.medium,\r\n        required,\r\n        ...rest\r\n    } = props;\r\n\r\n    const targetId = useEnsureId(id);\r\n\r\n    const showHeader = Boolean(label);\r\n\r\n    const showErrorText = Boolean(errorText);\r\n\r\n    const showInfoText = Boolean(infoText);\r\n\r\n    const showFooter = showErrorText || showInfoText;\r\n\r\n    const classes = classNames(className, 'arthur-field', `arthur-field--size-${size}`, {\r\n        'arthur-field--disabled': disabled === true,\r\n    });\r\n\r\n    return (\r\n        <StyledRoot\r\n            $showErrorText={showErrorText}\r\n            $showInfoText={showInfoText}\r\n            className={classes}\r\n            ref={forwardedRef}\r\n            size={size}\r\n            {...rest}\r\n        >\r\n            {showHeader ? (\r\n                <div className='arthur-field-header'>\r\n                    <label className='arthur-field-header-label' htmlFor={targetId}>\r\n                        {label}\r\n                    </label>\r\n                    {required === true && <span className='arthur-field-header-required'>*</span>}\r\n                </div>\r\n            ) : null}\r\n            {children}\r\n            {showFooter ? (\r\n                <div className='arthur-field-footer'>\r\n                    {showInfoText ? <span className='arthur-field-footer-info'>{infoText}</span> : null}\r\n                    {showErrorText ? <span className='arthur-field-footer-error'>{errorText}</span> : null}\r\n                </div>\r\n            ) : null}\r\n        </StyledRoot>\r\n    );\r\n});\r\n\r\nexport default FormField;\r\nFormField.displayName = 'FormField';\r\n","import React, { forwardRef, useCallback } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport classNames from 'classnames';\r\nimport { type IconValue, type IconSizes, IconSizesEnum } from './types';\r\nimport { ICON_VALUES } from './constants';\r\n\r\nexport interface IconProps {\r\n    className?: string;\r\n    /**\r\n     * @default false\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * @default medium\r\n     */\r\n    size?: IconSizes;\r\n    onClick?: (event: React.MouseEvent<HTMLSpanElement>) => unknown;\r\n    value: IconValue;\r\n}\r\n\r\nconst iconSizeStyles = {\r\n    'small-1x': css`\r\n        font-size: ${(props) => props.theme.token.size.font['small-1x']};\r\n    `,\r\n    small: css`\r\n        font-size: ${(props) => props.theme.token.size.font.small};\r\n    `,\r\n    medium: css`\r\n        font-size: ${(props) => props.theme.token.size.font.medium};\r\n    `,\r\n    large: css`\r\n        font-size: ${(props) => props.theme.token.size.font.large};\r\n    `,\r\n};\r\n\r\nconst StyledRoot = styled.span<{ disabled?: boolean }>`\r\n    background-color: transparent;\r\n    border: 0px none;\r\n    outline: 0px none;\r\n    padding: 0px;\r\n\r\n    &:not(.arthur-icon--disabled) {\r\n        &.arthur-icon--clickable {\r\n            &:hover,\r\n            &:focus,\r\n            &:active {\r\n                color: ${(props) => props.theme.token.color.palette.gold.base};\r\n                cursor: pointer;\r\n                outline: 0px none;\r\n            }\r\n        }\r\n    }\r\n\r\n    &.arthur-icon--disabled {\r\n        color: ${(props) => props.theme.token.color.action.text.primary.disabled};\r\n        cursor: default;\r\n    }\r\n`;\r\n\r\nconst StyledIcon = styled.i<{ size: IconSizes }>`\r\n    ${(props) => iconSizeStyles[props.size]}\r\n`;\r\n\r\nconst Icon = forwardRef<HTMLSpanElement | HTMLButtonElement, IconProps>((props, forwardedRef) => {\r\n    const { className, disabled, size = 'medium', value, onClick, ...rest } = props;\r\n\r\n    const iconClass = ICON_VALUES[value];\r\n\r\n    if (!IconSizesEnum[size]) {\r\n        throw new Error(`icon: invalid size \"${size}\"`);\r\n    }\r\n\r\n    const isClickable = disabled === true || typeof onClick === 'function';\r\n\r\n    const handleClick = useCallback(\r\n        (event: React.MouseEvent<HTMLSpanElement>) => {\r\n            if (disabled) return;\r\n\r\n            onClick?.(event);\r\n        },\r\n        [disabled, onClick],\r\n    );\r\n\r\n    const classes = {\r\n        root: classNames(className, 'arthur-icon', `arthur-icon--size-${size}`, {\r\n            'arthur-icon--clickable': isClickable,\r\n            'arthur-icon--disabled': disabled === true,\r\n        }),\r\n        regular: classNames('arthur-icon-regular', 'fa-regular', {\r\n            'fa-foobar': Boolean(iconClass) && Boolean(value),\r\n            [iconClass]: Boolean(iconClass),\r\n            [value as string]: Boolean(iconClass) && Boolean(value),\r\n        }),\r\n    };\r\n\r\n    // The wrapping span is needed because an error is thrown if one attempts\r\n    // to remove this from the dom once it is rendered. This is because the \"rendered\"\r\n    // node is the <i /> element, but a sibling <svg /> element is created as well.\r\n    // Without the wrapper and in the case that the element is added and removed again,\r\n    // React throws.\r\n    return (\r\n        <StyledRoot\r\n            as={isClickable ? 'button' : 'span'}\r\n            className={classes.root}\r\n            disabled={disabled}\r\n            onClick={handleClick}\r\n            ref={forwardedRef}\r\n        >\r\n            <StyledIcon className={classes.regular} size={size} {...rest} />\r\n        </StyledRoot>\r\n    );\r\n});\r\n\r\nexport default Icon;\r\n\r\nIcon.displayName = 'Icon';\r\n"],"names":[],"sourceRoot":""}