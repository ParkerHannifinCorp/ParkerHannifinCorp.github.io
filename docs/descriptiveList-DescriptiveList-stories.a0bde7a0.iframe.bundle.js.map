{"version":3,"file":"descriptiveList-DescriptiveList-stories.a0bde7a0.iframe.bundle.js","mappings":";;;;AAUA;;AAKA;AACA;AACA;;;;;;;AAOA;;;;AAIA;AACA;;;;;;AAMA;;;;AAIA;AACA;;;;AAIA;;AAEA;;;;;;AAMA;;;AAcA","sources":["webpack://@arthur/docs/../../packages/arthur-ui/src/DescriptiveList/DescriptiveList.tsx"],"sourcesContent":["import React, { forwardRef } from 'react';\r\nimport { styled, css } from 'styled-components';\r\nimport classNames from 'classnames';\r\nimport type { DescriptiveListItem, DescriptiveListVariants } from './types';\r\n\r\nconst variantStyles = {\r\n  default: css``,\r\n  striped: css`\r\n    & dt:nth-of-type(odd),\r\n    dd:nth-of-type(odd) {\r\n      background-color: ${(props) => props.theme.token.color.gray[5]};\r\n    }\r\n  `,\r\n};\r\n\r\nconst StyledRoot = styled.dl<{ variant: DescriptiveListVariants }>`\r\n  color: ${(props) => props.theme.token.color.gray[75]};\r\n  font-size: ${(props) => props.theme.token.size.font.medium};\r\n  margin: 0px;\r\n  overflow: visible;\r\n  padding: 0px;\r\n\r\n  & dt {\r\n    box-sizing: border-box;\r\n    font-weight: ${(props) => props.theme.token.weight.font.medium};\r\n    flex: 0 0 40%;\r\n    line-height: 1;\r\n    padding: 2px 0;\r\n    padding-left: ${(props) => props.theme.token.size.spacing['small-1x']};\r\n    padding-right: ${(props) => props.theme.token.size.spacing['small-1x']};\r\n  }\r\n\r\n  & dd {\r\n    box-sizing: border-box;\r\n    flex: 0 0 60%;\r\n    font-weight: ${(props) => props.theme.token.weight.font.regular};\r\n    line-height: 1;\r\n    margin-left: auto;\r\n    padding: 2px 0;\r\n    padding-left: ${(props) => props.theme.token.size.spacing['small-1x']};\r\n    padding-right: ${(props) => props.theme.token.size.spacing['small-1x']};\r\n    text-align: left;\r\n  }\r\n\r\n  ${(props) => variantStyles[props.variant]}\r\n\r\n  @media (min-width: ${(props) => props.theme.token.size.breakpoint['small-1x']}) {\r\n    display: flex;\r\n    flex-flow: row;\r\n    flex-wrap: wrap;\r\n\r\n    & dd {\r\n      padding-left: ${(props) => props.theme.token.size.spacing.medium};\r\n    }\r\n  }\r\n`;\r\n\r\nexport interface DescriptiveListProps {\r\n  className?: string;\r\n  items: DescriptiveListItem[];\r\n  /**\r\n   * @default default\r\n   */\r\n  variant?: DescriptiveListVariants;\r\n}\r\n\r\nconst DescriptiveList = forwardRef<HTMLUListElement, DescriptiveListProps>((props, forwardedRef) => {\r\n  const { className, items, variant = 'default', ...rest } = props;\r\n\r\n  const classes = classNames(className, 'arthur-descriptivelist', `arthur-descriptivelist--variant-${variant}`);\r\n\r\n  return (\r\n    <StyledRoot className={classes} ref={forwardedRef} variant={variant} {...rest}>\r\n      {items.map((item, index) => (\r\n        <React.Fragment key={index}>\r\n          <dt className='arthur-descriptivelist-item-label'>{item.label}</dt>\r\n          <dd className='arthur-descriptivelist-item-value'>{item.value}</dd>\r\n        </React.Fragment>\r\n      ))}\r\n    </StyledRoot>\r\n  );\r\n});\r\n\r\nexport default DescriptiveList;\r\nDescriptiveList.displayName = 'DescriptiveList';\r\n"],"names":[],"sourceRoot":""}