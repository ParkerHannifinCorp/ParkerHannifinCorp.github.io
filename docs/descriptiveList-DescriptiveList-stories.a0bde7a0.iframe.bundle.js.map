{"version":3,"file":"descriptiveList-DescriptiveList-stories.a0bde7a0.iframe.bundle.js","mappings":";;;;AAUA;;AAKA;AACA;AACA;;;;;;;AAOA;;;;AAIA;AACA;;;;;;AAMA;;;;AAIA;AACA;;;;AAIA;;AAEA;;;;;;AAMA;;;AAcA","sources":["webpack://@arthur/docs/../../packages/arthur-ui/src/DescriptiveList/DescriptiveList.tsx"],"sourcesContent":["import React, { forwardRef } from 'react';\nimport { styled, css } from 'styled-components';\nimport classNames from 'classnames';\nimport type { DescriptiveListItem, DescriptiveListVariants } from './types';\n\nconst variantStyles = {\n  default: css``,\n  striped: css`\n    & dt:nth-of-type(odd),\n    dd:nth-of-type(odd) {\n      background-color: ${(props) => props.theme.token.color.gray[5]};\n    }\n  `,\n};\n\nconst StyledRoot = styled.dl<{ variant: DescriptiveListVariants }>`\n  color: ${(props) => props.theme.token.color.gray[75]};\n  font-size: ${(props) => props.theme.token.size.font.medium};\n  margin: 0px;\n  overflow: visible;\n  padding: 0px;\n\n  & dt {\n    box-sizing: border-box;\n    font-weight: ${(props) => props.theme.token.weight.font.medium};\n    flex: 0 0 40%;\n    line-height: 1;\n    padding: 2px 0;\n    padding-left: ${(props) => props.theme.token.size.spacing['small-1x']};\n    padding-right: ${(props) => props.theme.token.size.spacing['small-1x']};\n  }\n\n  & dd {\n    box-sizing: border-box;\n    flex: 0 0 60%;\n    font-weight: ${(props) => props.theme.token.weight.font.regular};\n    line-height: 1;\n    margin-left: auto;\n    padding: 2px 0;\n    padding-left: ${(props) => props.theme.token.size.spacing['small-1x']};\n    padding-right: ${(props) => props.theme.token.size.spacing['small-1x']};\n    text-align: left;\n  }\n\n  ${(props) => variantStyles[props.variant]}\n\n  @media (min-width: ${(props) => props.theme.token.size.breakpoint['small-1x']}) {\n    display: flex;\n    flex-flow: row;\n    flex-wrap: wrap;\n\n    & dd {\n      padding-left: ${(props) => props.theme.token.size.spacing.medium};\n    }\n  }\n`;\n\nexport interface DescriptiveListProps {\n  className?: string;\n  items: DescriptiveListItem[];\n  /**\n   * @default default\n   */\n  variant?: DescriptiveListVariants;\n}\n\nconst DescriptiveList = forwardRef<HTMLUListElement, DescriptiveListProps>((props, forwardedRef) => {\n  const { className, items, variant = 'default', ...rest } = props;\n\n  const classes = classNames(className, 'arthur-descriptivelist', `arthur-descriptivelist--variant-${variant}`);\n\n  return (\n    <StyledRoot className={classes} ref={forwardedRef} variant={variant} {...rest}>\n      {items.map((item, index) => (\n        <React.Fragment key={index}>\n          <dt className='arthur-descriptivelist-item-label'>{item.label}</dt>\n          <dd className='arthur-descriptivelist-item-value'>{item.value}</dd>\n        </React.Fragment>\n      ))}\n    </StyledRoot>\n  );\n});\n\nexport default DescriptiveList;\nDescriptiveList.displayName = 'DescriptiveList';\n"],"names":[],"sourceRoot":""}