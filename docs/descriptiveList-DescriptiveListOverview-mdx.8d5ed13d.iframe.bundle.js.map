{"version":3,"file":"descriptiveList-DescriptiveListOverview-mdx.8d5ed13d.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAgCA;;;;;;ACrBA;AAoCA;;;ACrCA;;AAKA;AACA;AACA;;;;;;;AAOA;;;;AAIA;AACA;;;;;;AAMA;;;;AAIA;AACA;;;;AAIA;;AAEA;;;;;;AAMA;;;AAcA","sources":["webpack://@arthur/docs/./helpers/common/PictureBox.tsx","webpack://@arthur/docs/./helpers/common/StoryPicture.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/DescriptiveList/DescriptiveList.tsx"],"sourcesContent":["import React, { type PropsWithChildren, type ReactNode } from 'react';\r\nimport { styled } from 'styled-components';\r\n\r\nconst StyledRoot = styled.div`\r\n  position: relative;\r\n  overflow: hidden;\r\n  margin: 25px 0 40px;\r\n  border-radius: 4px;\r\n  background: #ffffff;\r\n  box-shadow: rgba(0, 0, 0, 0.1) 0 1px 3px 0;\r\n  border: 1px solid hsla(203, 50%, 30%, 0.15);\r\n\r\n  & .ardocs-picture {\r\n    overflow: hidden;\r\n    position: relative;\r\n\r\n    & > div {\r\n      display: block;\r\n      position: relative;\r\n      flex-wrap: wrap;\r\n      overflow: auto;\r\n      flex-direction: column;\r\n      padding: 30px 20px;\r\n      margin: -10px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport interface PictureBoxProps extends PropsWithChildren {\r\n  children: ReactNode;\r\n}\r\n\r\nfunction PictureBox(props: PictureBoxProps): JSX.Element {\r\n  const { children } = props;\r\n  return (\r\n    <StyledRoot className='ardocs ardoc-picture-box'>\r\n      <div className='ardocs-picture'>\r\n        <div>{children}</div>\r\n      </div>\r\n    </StyledRoot>\r\n  );\r\n}\r\n\r\nexport default PictureBox;\r\nPictureBox.displayName = 'ArthurCanvas';\r\n","import React from 'react';\r\nimport { styled } from 'styled-components';\r\nimport type { ImageProps } from '@arthur/ui';\r\nimport PictureBox from './PictureBox';\r\n\r\nconst StyledPicture = styled.picture<{ csx: any }>`\r\n  display: block;\r\n  width: fit-content;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n\r\n  ${(props) => ({ ...props.csx })}\r\n`;\r\n\r\nexport interface StoryPictureProps extends ImageProps {\r\n  alt: string;\r\n  assetDir: string;\r\n  assetPath: string;\r\n  className: string;\r\n  csx: { string: string | number };\r\n  densities: string[];\r\n  sourceName: string;\r\n  sourceSuffix: string;\r\n  withBox?: boolean;\r\n}\r\n\r\nfunction sourceResolution(assetPath: string, densities: string[]): { default: string; candidates: string } {\r\n  const lowRes = assetPath;\r\n  const pathParts = assetPath.split('/');\r\n\r\n  const dirname = pathParts.slice(0, pathParts.length - 1).join('/');\r\n  const basename = pathParts[pathParts.length - 1];\r\n  const filename = basename.slice(0, basename.indexOf('.'));\r\n  const extension = basename.slice(basename.indexOf('.'));\r\n\r\n  const hiRes = densities.map((density) => {\r\n    return ` ${dirname}/${filename}@${density}${extension} ${density}`;\r\n  });\r\n\r\n  const setPaths = {\r\n    default: `${lowRes}`,\r\n    candidates: `${lowRes},${[...hiRes]}`,\r\n  };\r\n\r\n  return setPaths;\r\n}\r\n\r\nfunction StoryPicture(props: StoryPictureProps): JSX.Element {\r\n  const { alt, assetPath, className, csx, densities = ['2x'], withBox = false, ...rest } = props;\r\n\r\n  const sourcePath = sourceResolution(assetPath, densities);\r\n  if (withBox) {\r\n    return (\r\n      <PictureBox>\r\n        <StyledPicture className={className} csx={csx} data-arthur-block={rest.dataAttr}>\r\n          <source srcSet={sourcePath.candidates} />\r\n          <img src={sourcePath.default} alt={alt} />\r\n        </StyledPicture>\r\n      </PictureBox>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <StyledPicture className='arthur-story-image' data-arthur-block={rest.dataAttr} csx={csx}>\r\n      <source srcSet={sourcePath.candidates} />\r\n      <img src={sourcePath.default} alt={alt} />\r\n    </StyledPicture>\r\n  );\r\n}\r\n\r\nexport default StoryPicture;\r\nStoryPicture.displayName = 'StoryPicture';\r\nStoryPicture.defaultProps = {};\r\n","import React, { forwardRef } from 'react';\r\nimport { styled, css } from 'styled-components';\r\nimport classNames from 'classnames';\r\nimport type { DescriptiveListItem, DescriptiveListVariants } from './types';\r\n\r\nconst variantStyles = {\r\n  default: css``,\r\n  striped: css`\r\n    & dt:nth-of-type(odd),\r\n    dd:nth-of-type(odd) {\r\n      background-color: ${(props) => props.theme.token.color.gray[5]};\r\n    }\r\n  `,\r\n};\r\n\r\nconst StyledRoot = styled.dl<{ variant: DescriptiveListVariants }>`\r\n  color: ${(props) => props.theme.token.color.gray[75]};\r\n  font-size: ${(props) => props.theme.token.size.font.medium};\r\n  margin: 0px;\r\n  overflow: visible;\r\n  padding: 0px;\r\n\r\n  & dt {\r\n    box-sizing: border-box;\r\n    font-weight: ${(props) => props.theme.token.weight.font.medium};\r\n    flex: 0 0 40%;\r\n    line-height: 1;\r\n    padding: 2px 0;\r\n    padding-left: ${(props) => props.theme.token.size.spacing['small-1x']};\r\n    padding-right: ${(props) => props.theme.token.size.spacing['small-1x']};\r\n  }\r\n\r\n  & dd {\r\n    box-sizing: border-box;\r\n    flex: 0 0 60%;\r\n    font-weight: ${(props) => props.theme.token.weight.font.regular};\r\n    line-height: 1;\r\n    margin-left: auto;\r\n    padding: 2px 0;\r\n    padding-left: ${(props) => props.theme.token.size.spacing['small-1x']};\r\n    padding-right: ${(props) => props.theme.token.size.spacing['small-1x']};\r\n    text-align: left;\r\n  }\r\n\r\n  ${(props) => variantStyles[props.variant]}\r\n\r\n  @media (min-width: ${(props) => props.theme.token.size.breakpoint['small-1x']}) {\r\n    display: flex;\r\n    flex-flow: row;\r\n    flex-wrap: wrap;\r\n\r\n    & dd {\r\n      padding-left: ${(props) => props.theme.token.size.spacing.medium};\r\n    }\r\n  }\r\n`;\r\n\r\nexport interface DescriptiveListProps {\r\n  className?: string;\r\n  items: DescriptiveListItem[];\r\n  /**\r\n   * @default default\r\n   */\r\n  variant?: DescriptiveListVariants;\r\n}\r\n\r\nconst DescriptiveList = forwardRef<HTMLUListElement, DescriptiveListProps>((props, forwardedRef) => {\r\n  const { className, items, variant = 'default', ...rest } = props;\r\n\r\n  const classes = classNames(className, 'arthur-descriptivelist', `arthur-descriptivelist--variant-${variant}`);\r\n\r\n  return (\r\n    <StyledRoot className={classes} ref={forwardedRef} variant={variant} {...rest}>\r\n      {items.map((item, index) => (\r\n        <React.Fragment key={index}>\r\n          <dt className='arthur-descriptivelist-item-label'>{item.label}</dt>\r\n          <dd className='arthur-descriptivelist-item-value'>{item.value}</dd>\r\n        </React.Fragment>\r\n      ))}\r\n    </StyledRoot>\r\n  );\r\n});\r\n\r\nexport default DescriptiveList;\r\nDescriptiveList.displayName = 'DescriptiveList';\r\n"],"names":[],"sourceRoot":""}