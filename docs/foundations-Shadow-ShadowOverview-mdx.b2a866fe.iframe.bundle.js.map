{"version":3,"file":"foundations-Shadow-ShadowOverview-mdx.b2a866fe.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAgCA;;;;;;ACrBA;AAoCA;;;;;;;;;;;ACtBA;;;;;;;AAOA;AAGA","sources":["webpack://@arthur/docs/./helpers/common/PictureBox.tsx","webpack://@arthur/docs/./helpers/common/StoryPicture.tsx","webpack://@arthur/docs/./stories/foundations/Card.tsx"],"sourcesContent":["import React, { type PropsWithChildren, type ReactNode } from 'react';\nimport { styled } from 'styled-components';\n\nconst StyledRoot = styled.div`\n  position: relative;\n  overflow: hidden;\n  margin: 25px 0 40px;\n  border-radius: 4px;\n  background: #ffffff;\n  box-shadow: rgba(0, 0, 0, 0.1) 0 1px 3px 0;\n  border: 1px solid hsla(203, 50%, 30%, 0.15);\n\n  & .ardocs-picture {\n    overflow: hidden;\n    position: relative;\n\n    & > div {\n      display: block;\n      position: relative;\n      flex-wrap: wrap;\n      overflow: auto;\n      flex-direction: column;\n      padding: 30px 20px;\n      margin: -10px;\n    }\n  }\n`;\n\nexport interface PictureBoxProps extends PropsWithChildren {\n  children: ReactNode;\n}\n\nfunction PictureBox(props: PictureBoxProps): JSX.Element {\n  const { children } = props;\n  return (\n    <StyledRoot className='ardocs ardoc-picture-box'>\n      <div className='ardocs-picture'>\n        <div>{children}</div>\n      </div>\n    </StyledRoot>\n  );\n}\n\nexport default PictureBox;\nPictureBox.displayName = 'ArthurCanvas';\n","import React from 'react';\nimport { styled } from 'styled-components';\nimport type { ImageProps } from '@arthur/ui';\nimport PictureBox from './PictureBox';\n\nconst StyledPicture = styled.picture<{ csx: any }>`\n  display: block;\n  width: fit-content;\n  margin-left: auto;\n  margin-right: auto;\n\n  ${(props) => ({ ...props.csx })}\n`;\n\nexport interface StoryPictureProps extends ImageProps {\n  alt: string;\n  assetDir: string;\n  assetPath: string;\n  className: string;\n  csx: { string: string | number };\n  densities: string[];\n  sourceName: string;\n  sourceSuffix: string;\n  withBox?: boolean;\n}\n\nfunction sourceResolution(assetPath: string, densities: string[]): { default: string; candidates: string } {\n  const lowRes = assetPath;\n  const pathParts = assetPath.split('/');\n\n  const dirname = pathParts.slice(0, pathParts.length - 1).join('/');\n  const basename = pathParts[pathParts.length - 1];\n  const filename = basename.slice(0, basename.indexOf('.'));\n  const extension = basename.slice(basename.indexOf('.'));\n\n  const hiRes = densities.map((density) => {\n    return ` ${dirname}/${filename}@${density}${extension} ${density}`;\n  });\n\n  const setPaths = {\n    default: `${lowRes}`,\n    candidates: `${lowRes},${[...hiRes]}`,\n  };\n\n  return setPaths;\n}\n\nfunction StoryPicture(props: StoryPictureProps): JSX.Element {\n  const { alt, assetPath, className, csx, densities = ['2x'], withBox = false, ...rest } = props;\n\n  const sourcePath = sourceResolution(assetPath, densities);\n  if (withBox) {\n    return (\n      <PictureBox>\n        <StyledPicture className={className} csx={csx} data-arthur-block={rest.dataAttr}>\n          <source srcSet={sourcePath.candidates} />\n          <img src={sourcePath.default} alt={alt} />\n        </StyledPicture>\n      </PictureBox>\n    );\n  }\n\n  return (\n    <StyledPicture className='arthur-story-image' data-arthur-block={rest.dataAttr} csx={csx}>\n      <source srcSet={sourcePath.candidates} />\n      <img src={sourcePath.default} alt={alt} />\n    </StyledPicture>\n  );\n}\n\nexport default StoryPicture;\nStoryPicture.displayName = 'StoryPicture';\nStoryPicture.defaultProps = {};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { styled, css } from 'styled-components';\n\nconst CARD_VARIANT = {\n  default: css`\n    align-items: center;\n    border-color: #cccccc;\n    border-style: solid;\n    height: 328px;\n    justify-content: center;\n    padding-top: 20px;\n\n    & img {\n      width: min-content;\n    }\n  `,\n};\n\nexport interface CardProps {\n  children?: React.ReactChild;\n  className?: string;\n  variant?: keyof typeof CARD_VARIANT;\n}\n\nconst StyledCard = styled.div<CardProps>`\n  border-radius: 2px;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  position: relative;\n\n  ${(props) => CARD_VARIANT[props.variant]}\n`;\n\nfunction Card(props: CardProps): JSX.Element {\n  const { className, children, variant = 'default' } = props;\n\n  const classes = classNames('card', className);\n\n  return (\n    <StyledCard className={classes} variant={variant}>\n      {children}\n    </StyledCard>\n  );\n}\n\nexport default Card;\nCard.displayName = 'Card';\n"],"names":[],"sourceRoot":""}