{"version":3,"file":"icon-IconGallery-mdx.13bf4d80.iframe.bundle.js","mappings":";;AAsBA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;;;;;;;;;;;AAWA;;;;;;;;AAQA;;;AAKA;AACA;AAGA","sources":["webpack://@arthur/docs/../../packages/arthur-ui/src/Icon/Icon.tsx"],"sourcesContent":["import React, { forwardRef, useCallback } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport classNames from 'classnames';\r\nimport { type IconValue, type IconSizes, IconSizesEnum } from './types';\r\nimport { ICON_VALUES } from './constants';\r\n\r\nexport interface IconProps {\r\n    className?: string;\r\n    /**\r\n     * @default false\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * @default medium\r\n     */\r\n    size?: IconSizes;\r\n    onClick?: (event: React.MouseEvent<HTMLSpanElement>) => unknown;\r\n    value: IconValue;\r\n}\r\n\r\nconst iconSizeStyles = {\r\n    'small-1x': css`\r\n        font-size: ${(props) => props.theme.token.size.font['small-1x']};\r\n    `,\r\n    small: css`\r\n        font-size: ${(props) => props.theme.token.size.font.small};\r\n    `,\r\n    medium: css`\r\n        font-size: ${(props) => props.theme.token.size.font.medium};\r\n    `,\r\n    large: css`\r\n        font-size: ${(props) => props.theme.token.size.font.large};\r\n    `,\r\n};\r\n\r\nconst StyledRoot = styled.span<{ disabled?: boolean }>`\r\n    background-color: transparent;\r\n    border: 0px none;\r\n    outline: 0px none;\r\n    padding: 0px;\r\n\r\n    &:not(.arthur-icon--disabled) {\r\n        &.arthur-icon--clickable {\r\n            &:hover,\r\n            &:focus,\r\n            &:active {\r\n                color: ${(props) => props.theme.token.color.palette.gold.base};\r\n                cursor: pointer;\r\n                outline: 0px none;\r\n            }\r\n        }\r\n    }\r\n\r\n    &.arthur-icon--disabled {\r\n        color: ${(props) => props.theme.token.color.action.text.primary.disabled};\r\n        cursor: default;\r\n    }\r\n`;\r\n\r\nconst StyledIcon = styled.i<{ size: IconSizes }>`\r\n    ${(props) => iconSizeStyles[props.size]}\r\n`;\r\n\r\nconst Icon = forwardRef<HTMLSpanElement | HTMLButtonElement, IconProps>((props, forwardedRef) => {\r\n    const { className, disabled, size = 'medium', value, onClick, ...rest } = props;\r\n\r\n    const iconClass = ICON_VALUES[value];\r\n\r\n    if (!IconSizesEnum[size]) {\r\n        throw new Error(`icon: invalid size \"${size}\"`);\r\n    }\r\n\r\n    const isClickable = disabled === true || typeof onClick === 'function';\r\n\r\n    const handleClick = useCallback(\r\n        (event: React.MouseEvent<HTMLSpanElement>) => {\r\n            if (disabled) return;\r\n\r\n            onClick?.(event);\r\n        },\r\n        [disabled, onClick],\r\n    );\r\n\r\n    const classes = {\r\n        root: classNames(className, 'arthur-icon', `arthur-icon--size-${size}`, {\r\n            'arthur-icon--clickable': isClickable,\r\n            'arthur-icon--disabled': disabled === true,\r\n        }),\r\n        regular: classNames('arthur-icon-regular', 'fa-regular', {\r\n            'fa-foobar': Boolean(iconClass) && Boolean(value),\r\n            [iconClass]: Boolean(iconClass),\r\n            [value as string]: Boolean(iconClass) && Boolean(value),\r\n        }),\r\n    };\r\n\r\n    // The wrapping span is needed because an error is thrown if one attempts\r\n    // to remove this from the dom once it is rendered. This is because the \"rendered\"\r\n    // node is the <i /> element, but a sibling <svg /> element is created as well.\r\n    // Without the wrapper and in the case that the element is added and removed again,\r\n    // React throws.\r\n    return (\r\n        <StyledRoot\r\n            as={isClickable ? 'button' : 'span'}\r\n            className={classes.root}\r\n            disabled={disabled}\r\n            onClick={handleClick}\r\n            ref={forwardedRef}\r\n        >\r\n            <StyledIcon className={classes.regular} size={size} {...rest} />\r\n        </StyledRoot>\r\n    );\r\n});\r\n\r\nexport default Icon;\r\n\r\nIcon.displayName = 'Icon';\r\n"],"names":[],"sourceRoot":""}