{"version":3,"file":"link-Link-stories.9f94aed5.iframe.bundle.js","mappings":";;AAsBA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;;;;;;;;;;;AAWA;;;;;;;;AAQA;;;AAKA;AACA;AAGA;ACrDA;AAEA;AACA;AAEA;AACA;AAWA;;AAGA;;AAGA;;AAEA;;AAKA;AACA;;;;;;;;AAQA;;;;;AAKA;;;;AAIA;;;;;;;AAOA;AACA;;;;AAIA;AACA;;;;;;;;;;AA2CA","sources":["webpack://@arthur/docs/../../packages/arthur-ui/src/Icon/Icon.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/Link/Link.tsx"],"sourcesContent":["import React, { forwardRef, useCallback } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport classNames from 'classnames';\r\nimport { type IconValue, type IconSizes, IconSizesEnum } from './types';\r\nimport { ICON_VALUES } from './constants';\r\n\r\nexport interface IconProps {\r\n    className?: string;\r\n    /**\r\n     * @default false\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * @default medium\r\n     */\r\n    size?: IconSizes;\r\n    onClick?: (event: React.MouseEvent<HTMLSpanElement>) => unknown;\r\n    value: IconValue;\r\n}\r\n\r\nconst iconSizeStyles = {\r\n    'small-1x': css`\r\n        font-size: ${(props) => props.theme.token.size.font['small-1x']};\r\n    `,\r\n    small: css`\r\n        font-size: ${(props) => props.theme.token.size.font.small};\r\n    `,\r\n    medium: css`\r\n        font-size: ${(props) => props.theme.token.size.font.medium};\r\n    `,\r\n    large: css`\r\n        font-size: ${(props) => props.theme.token.size.font.large};\r\n    `,\r\n};\r\n\r\nconst StyledRoot = styled.span<{ disabled?: boolean }>`\r\n    background-color: transparent;\r\n    border: 0px none;\r\n    outline: 0px none;\r\n    padding: 0px;\r\n\r\n    &:not(.arthur-icon--disabled) {\r\n        &.arthur-icon--clickable {\r\n            &:hover,\r\n            &:focus,\r\n            &:active {\r\n                color: ${(props) => props.theme.token.color.palette.gold.base};\r\n                cursor: pointer;\r\n                outline: 0px none;\r\n            }\r\n        }\r\n    }\r\n\r\n    &.arthur-icon--disabled {\r\n        color: ${(props) => props.theme.token.color.action.text.primary.disabled};\r\n        cursor: default;\r\n    }\r\n`;\r\n\r\nconst StyledIcon = styled.i<{ size: IconSizes }>`\r\n    ${(props) => iconSizeStyles[props.size]}\r\n`;\r\n\r\nconst Icon = forwardRef<HTMLSpanElement | HTMLButtonElement, IconProps>((props, forwardedRef) => {\r\n    const { className, disabled, size = 'medium', value, onClick, ...rest } = props;\r\n\r\n    const iconClass = ICON_VALUES[value];\r\n\r\n    if (!IconSizesEnum[size]) {\r\n        throw new Error(`icon: invalid size \"${size}\"`);\r\n    }\r\n\r\n    const isClickable = disabled === true || typeof onClick === 'function';\r\n\r\n    const handleClick = useCallback(\r\n        (event: React.MouseEvent<HTMLSpanElement>) => {\r\n            if (disabled) return;\r\n\r\n            onClick?.(event);\r\n        },\r\n        [disabled, onClick],\r\n    );\r\n\r\n    const classes = {\r\n        root: classNames(className, 'arthur-icon', `arthur-icon--size-${size}`, {\r\n            'arthur-icon--clickable': isClickable,\r\n            'arthur-icon--disabled': disabled === true,\r\n        }),\r\n        regular: classNames('arthur-icon-regular', 'fa-regular', {\r\n            'fa-foobar': Boolean(iconClass) && Boolean(value),\r\n            [iconClass]: Boolean(iconClass),\r\n            [value as string]: Boolean(iconClass) && Boolean(value),\r\n        }),\r\n    };\r\n\r\n    // The wrapping span is needed because an error is thrown if one attempts\r\n    // to remove this from the dom once it is rendered. This is because the \"rendered\"\r\n    // node is the <i /> element, but a sibling <svg /> element is created as well.\r\n    // Without the wrapper and in the case that the element is added and removed again,\r\n    // React throws.\r\n    return (\r\n        <StyledRoot\r\n            as={isClickable ? 'button' : 'span'}\r\n            className={classes.root}\r\n            disabled={disabled}\r\n            onClick={handleClick}\r\n            ref={forwardedRef}\r\n        >\r\n            <StyledIcon className={classes.regular} size={size} {...rest} />\r\n        </StyledRoot>\r\n    );\r\n});\r\n\r\nexport default Icon;\r\n\r\nIcon.displayName = 'Icon';\r\n","import type { PropsWithChildren } from 'react';\r\nimport React, { forwardRef, useCallback } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport classNames from 'classnames';\r\nimport { useEnsureRef } from '../hook';\r\nimport type { LinkSize, LinkVariant } from './types';\r\nimport { LinkSizeEnum, LinkVariantEnum } from './types';\r\n\r\nconst linkStyles = {\r\n    small: css`\r\n        font-size: ${(props) => props.theme.token.size.font.small};\r\n    `,\r\n    medium: css`\r\n        font-size: ${(props) => props.theme.token.size.font.medium};\r\n    `,\r\n    large: css`\r\n        font-size: ${(props) => props.theme.token.size.font.large};\r\n    `,\r\n};\r\n\r\nconst LINK_TARGET = {\r\n    _self: true,\r\n    _blank: true,\r\n    _parent: true,\r\n    _top: true,\r\n};\r\n\r\nconst variantStyles = {\r\n    default: css`\r\n        &:active {\r\n            color: ${(props) => props.theme.token.color.black};\r\n        }\r\n    `,\r\n    secondary: css`\r\n        &:active {\r\n            color: ${(props) => props.theme.token.color.white};\r\n        }\r\n    `,\r\n};\r\n\r\nconst StyledRoot = styled.a<{ variant: LinkVariant; size: LinkSize }>`\r\n    color: ${(props) => props.theme.token.color.palette.blue.base};\r\n    text-decoration: none;\r\n\r\n    &:active {\r\n        text-decoration: underline;\r\n    }\r\n\r\n    &:hover {\r\n        color: ${(props) => props.theme.token.color.palette.blue.darker};\r\n        text-decoration: underline;\r\n    }\r\n\r\n    &:visited {\r\n        color: ${(props) => props.theme.token.color.palette.purple.base};\r\n    }\r\n\r\n    &.arthur-link--disabled {\r\n        color: ${(props) => props.theme.token.color.palette.gray[20]};\r\n    }\r\n\r\n    &.arthur-link--inline {\r\n        text-decoration: underline;\r\n    }\r\n\r\n    ${(props) => linkStyles[props.size]}\r\n    ${(props) => variantStyles[props.variant]} {\r\n        /* HACK: HANDLES TOKENS FOR CHILD ICONS */\r\n    }\r\n    & .arthur-icon {\r\n        margin-left: ${(props) => props.theme.token.size.spacing[props.size === 'large' ? 'small' : 'small-1x']};\r\n        margin-right: ${(props) => props.theme.token.size.spacing[props.size === 'large' ? 'small' : 'small-1x']};\r\n\r\n        &:first-child {\r\n            margin-left: 0px;\r\n        }\r\n\r\n        &:last-child {\r\n            margin-right: 0px;\r\n        }\r\n    }\r\n`;\r\n\r\n/**\r\n * Enumerates the pre-defined target attributes for Link components.\r\n */\r\nexport type LinkTarget = keyof typeof LINK_TARGET;\r\n\r\nexport interface LinkProps {\r\n    /**\r\n     * @default #\r\n     */\r\n    href?: string;\r\n    className?: string;\r\n    /**\r\n     * @default false\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * @default false\r\n     */\r\n    inline?: boolean;\r\n    target?: LinkTarget;\r\n    /**\r\n     * @default default\r\n     */\r\n    variant?: LinkVariant;\r\n    /**\r\n     * @default medium\r\n     */\r\n    size?: LinkSize;\r\n    onClick?: (event: React.MouseEvent<HTMLAnchorElement>) => void;\r\n}\r\n\r\nconst Link = forwardRef<HTMLAnchorElement, PropsWithChildren<LinkProps>>((props, forwardedRef) => {\r\n    const {\r\n        children,\r\n        className,\r\n        disabled,\r\n        href,\r\n        inline = false,\r\n        size = LinkSizeEnum.medium,\r\n        target,\r\n        variant = LinkVariantEnum.default,\r\n        onClick,\r\n        ...rest\r\n    } = props;\r\n\r\n    const targetRef = useEnsureRef(forwardedRef);\r\n\r\n    const classes = classNames(\r\n        className,\r\n        'arthur-link',\r\n        `arthur-link--size-${size}`,\r\n        `arthur-link--variant-${variant}`,\r\n        {\r\n            'arthur-link--disabled': disabled === true,\r\n            'arthur-link--inline': inline,\r\n        },\r\n    );\r\n\r\n    const handleClick = useCallback(\r\n        (event: React.MouseEvent<HTMLAnchorElement>) => {\r\n            if (disabled === true || href === undefined) {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n            }\r\n\r\n            if (disabled !== true) {\r\n                onClick?.(event);\r\n            }\r\n        },\r\n        [disabled, onClick],\r\n    );\r\n\r\n    return (\r\n        <StyledRoot\r\n            className={classes}\r\n            href={href || '#'}\r\n            onClick={handleClick}\r\n            ref={targetRef}\r\n            rel={target === '_blank' ? 'noopener noreferrer' : undefined}\r\n            role='link'\r\n            size={size}\r\n            target={target}\r\n            variant={variant}\r\n            {...rest}\r\n        >\r\n            {children}\r\n        </StyledRoot>\r\n    );\r\n});\r\n\r\nexport default Link;\r\nLink.displayName = 'Link';\r\n"],"names":[],"sourceRoot":""}