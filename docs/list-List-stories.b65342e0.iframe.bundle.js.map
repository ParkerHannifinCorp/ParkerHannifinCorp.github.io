{"version":3,"file":"list-List-stories.b65342e0.iframe.bundle.js","mappings":";;;;;AAYA;;AAGA;;;AAGA;;AAGA;;;;AAIA;;;;;AAQA;AACA;AACA;;;;AAIA;;AAEA;AAeA;;;ACjDA;AACA;AACA;;;AASA","sources":["webpack://@arthur/docs/../../packages/arthur-ui/src/List/List.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/List/ListItem.tsx"],"sourcesContent":["import type { PropsWithChildren } from 'react';\r\nimport { forwardRef } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport classnames from 'classnames';\r\nimport type { ListVariants } from './types';\r\nimport { ListVariantsEnum } from './types';\r\n\r\nconst variantStyles = {\r\n    default: css`\r\n        list-style-type: 'â€¢';\r\n        & ul {\r\n            list-style-type: '-';\r\n            margin-left: ${(props) => props.theme.token.size.spacing['large-1x']};\r\n        }\r\n    `,\r\n    ordered: css`\r\n        & ol {\r\n            list-style-type: lower-alpha;\r\n            margin-left: ${(props) => props.theme.token.size.spacing['large-2x']};\r\n        }\r\n    `,\r\n    plain: css`\r\n        & ol,\r\n        ul {\r\n            list-style-type: none;\r\n            margin-left: ${(props) => props.theme.token.size.spacing.small};\r\n        }\r\n        li {\r\n            list-style-type: none;\r\n        }\r\n    `,\r\n};\r\n\r\nconst StyledRoot = styled.ul<Pick<ListProps, 'columns'> & { variant: ListVariants }>`\r\n    color: ${(props) => props.theme.token.color.black};\r\n    font-size: ${(props) => props.theme.token.size.font.medium};\r\n    list-style-position: outside;\r\n    margin: 0px;\r\n    padding: 0px;\r\n    columns: ${(props) => (props.columns ? props.columns : 'initial')};\r\n\r\n    ${(props) => variantStyles[props.variant]}\r\n`;\r\n\r\nexport interface ListProps {\r\n    className?: string;\r\n    /**\r\n     * @default default\r\n     */\r\n    variant?: ListVariants;\r\n    /**\r\n     * Splits the layout into columns\r\n     */\r\n    columns?: number;\r\n}\r\n\r\nconst List = forwardRef<HTMLUListElement | HTMLOListElement, PropsWithChildren<ListProps>>((props, forwardedRef) => {\r\n    const { children, className, variant = ListVariantsEnum.default, ...rest } = props;\r\n\r\n    const classes = classnames(className, 'arthur-list', `arthur-list--variant-${variant}`);\r\n\r\n    return (\r\n        <StyledRoot\r\n            as={variant === 'ordered' ? 'ol' : 'ul'}\r\n            className={classes}\r\n            ref={forwardedRef}\r\n            variant={variant}\r\n            {...rest}\r\n        >\r\n            {children}\r\n        </StyledRoot>\r\n    );\r\n});\r\n\r\nexport default List;\r\nList.displayName = 'List';\r\n","import { PropsWithChildren } from 'react';\r\nimport styled from 'styled-components';\r\nimport classnames from 'classnames';\r\n\r\nconst StyledRoot = styled.li`\r\n        list-style-position: outside;\r\n        margin: 0px;\r\n        margin-bottom: ${(props) => props.theme.token.size.spacing['small-2x']};\r\n        margin-left: ${(props) => props.theme.token.size.spacing['small-1x']};\r\n        padding-left: ${(props) => props.theme.token.size.spacing['small-1x']};\r\n        line-height: 1.25;\r\n    }\r\n`;\r\n\r\nexport interface ListItemProps {\r\n    className?: string;\r\n}\r\n\r\nexport const ListItem = (props: PropsWithChildren<ListItemProps>) => {\r\n    const { children, className } = props;\r\n\r\n    const classes = classnames(className, 'arthur-list-item');\r\n\r\n    return <StyledRoot className={classes}>{children}</StyledRoot>;\r\n};\r\n\r\nListItem.displayName = 'ListItem';\r\n"],"names":[],"sourceRoot":""}