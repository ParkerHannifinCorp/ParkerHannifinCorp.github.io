{"version":3,"file":"list-ListOverview-mdx.c56d1e77.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAgCA;;;;;;ACrBA;AAoCA;;;;ACnCA;;AAGA;;;AAGA;;AAGA;;;;AAIA;;;;;AAQA;AACA;AACA;;;;AAIA;;AAEA;AAeA;;;ACjDA;AACA;AACA;;;AASA","sources":["webpack://@arthur/docs/./helpers/common/PictureBox.tsx","webpack://@arthur/docs/./helpers/common/StoryPicture.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/List/List.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/List/ListItem.tsx"],"sourcesContent":["import React, { type PropsWithChildren, type ReactNode } from 'react';\r\nimport { styled } from 'styled-components';\r\n\r\nconst StyledRoot = styled.div`\r\n  position: relative;\r\n  overflow: hidden;\r\n  margin: 25px 0 40px;\r\n  border-radius: 4px;\r\n  background: #ffffff;\r\n  box-shadow: rgba(0, 0, 0, 0.1) 0 1px 3px 0;\r\n  border: 1px solid hsla(203, 50%, 30%, 0.15);\r\n\r\n  & .ardocs-picture {\r\n    overflow: hidden;\r\n    position: relative;\r\n\r\n    & > div {\r\n      display: block;\r\n      position: relative;\r\n      flex-wrap: wrap;\r\n      overflow: auto;\r\n      flex-direction: column;\r\n      padding: 30px 20px;\r\n      margin: -10px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport interface PictureBoxProps extends PropsWithChildren {\r\n  children: ReactNode;\r\n}\r\n\r\nfunction PictureBox(props: PictureBoxProps): JSX.Element {\r\n  const { children } = props;\r\n  return (\r\n    <StyledRoot className='ardocs ardoc-picture-box'>\r\n      <div className='ardocs-picture'>\r\n        <div>{children}</div>\r\n      </div>\r\n    </StyledRoot>\r\n  );\r\n}\r\n\r\nexport default PictureBox;\r\nPictureBox.displayName = 'ArthurCanvas';\r\n","import React from 'react';\r\nimport { styled } from 'styled-components';\r\nimport type { ImageProps } from '@arthur/ui';\r\nimport PictureBox from './PictureBox';\r\n\r\nconst StyledPicture = styled.picture<{ csx: any }>`\r\n  display: block;\r\n  width: fit-content;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n\r\n  ${(props) => ({ ...props.csx })}\r\n`;\r\n\r\nexport interface StoryPictureProps extends ImageProps {\r\n  alt: string;\r\n  assetDir: string;\r\n  assetPath: string;\r\n  className: string;\r\n  csx: { string: string | number };\r\n  densities: string[];\r\n  sourceName: string;\r\n  sourceSuffix: string;\r\n  withBox?: boolean;\r\n}\r\n\r\nfunction sourceResolution(assetPath: string, densities: string[]): { default: string; candidates: string } {\r\n  const lowRes = assetPath;\r\n  const pathParts = assetPath.split('/');\r\n\r\n  const dirname = pathParts.slice(0, pathParts.length - 1).join('/');\r\n  const basename = pathParts[pathParts.length - 1];\r\n  const filename = basename.slice(0, basename.indexOf('.'));\r\n  const extension = basename.slice(basename.indexOf('.'));\r\n\r\n  const hiRes = densities.map((density) => {\r\n    return ` ${dirname}/${filename}@${density}${extension} ${density}`;\r\n  });\r\n\r\n  const setPaths = {\r\n    default: `${lowRes}`,\r\n    candidates: `${lowRes},${[...hiRes]}`,\r\n  };\r\n\r\n  return setPaths;\r\n}\r\n\r\nfunction StoryPicture(props: StoryPictureProps): JSX.Element {\r\n  const { alt, assetPath, className, csx, densities = ['2x'], withBox = false, ...rest } = props;\r\n\r\n  const sourcePath = sourceResolution(assetPath, densities);\r\n  if (withBox) {\r\n    return (\r\n      <PictureBox>\r\n        <StyledPicture className={className} csx={csx} data-arthur-block={rest.dataAttr}>\r\n          <source srcSet={sourcePath.candidates} />\r\n          <img src={sourcePath.default} alt={alt} />\r\n        </StyledPicture>\r\n      </PictureBox>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <StyledPicture className='arthur-story-image' data-arthur-block={rest.dataAttr} csx={csx}>\r\n      <source srcSet={sourcePath.candidates} />\r\n      <img src={sourcePath.default} alt={alt} />\r\n    </StyledPicture>\r\n  );\r\n}\r\n\r\nexport default StoryPicture;\r\nStoryPicture.displayName = 'StoryPicture';\r\nStoryPicture.defaultProps = {};\r\n","import type { PropsWithChildren } from 'react';\r\nimport { forwardRef } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport classnames from 'classnames';\r\nimport type { ListVariants } from './types';\r\nimport { ListVariantsEnum } from './types';\r\n\r\nconst variantStyles = {\r\n    default: css`\r\n        list-style-type: 'â€¢';\r\n        & ul {\r\n            list-style-type: '-';\r\n            margin-left: ${(props) => props.theme.token.size.spacing['large-1x']};\r\n        }\r\n    `,\r\n    ordered: css`\r\n        & ol {\r\n            list-style-type: lower-alpha;\r\n            margin-left: ${(props) => props.theme.token.size.spacing['large-2x']};\r\n        }\r\n    `,\r\n    plain: css`\r\n        & ol,\r\n        ul {\r\n            list-style-type: none;\r\n            margin-left: ${(props) => props.theme.token.size.spacing.small};\r\n        }\r\n        li {\r\n            list-style-type: none;\r\n        }\r\n    `,\r\n};\r\n\r\nconst StyledRoot = styled.ul<Pick<ListProps, 'columns'> & { variant: ListVariants }>`\r\n    color: ${(props) => props.theme.token.color.black};\r\n    font-size: ${(props) => props.theme.token.size.font.medium};\r\n    list-style-position: outside;\r\n    margin: 0px;\r\n    padding: 0px;\r\n    columns: ${(props) => (props.columns ? props.columns : 'initial')};\r\n\r\n    ${(props) => variantStyles[props.variant]}\r\n`;\r\n\r\nexport interface ListProps {\r\n    className?: string;\r\n    /**\r\n     * @default default\r\n     */\r\n    variant?: ListVariants;\r\n    /**\r\n     * Splits the layout into columns\r\n     */\r\n    columns?: number;\r\n}\r\n\r\nconst List = forwardRef<HTMLUListElement | HTMLOListElement, PropsWithChildren<ListProps>>((props, forwardedRef) => {\r\n    const { children, className, variant = ListVariantsEnum.default, ...rest } = props;\r\n\r\n    const classes = classnames(className, 'arthur-list', `arthur-list--variant-${variant}`);\r\n\r\n    return (\r\n        <StyledRoot\r\n            as={variant === 'ordered' ? 'ol' : 'ul'}\r\n            className={classes}\r\n            ref={forwardedRef}\r\n            variant={variant}\r\n            {...rest}\r\n        >\r\n            {children}\r\n        </StyledRoot>\r\n    );\r\n});\r\n\r\nexport default List;\r\nList.displayName = 'List';\r\n","import { PropsWithChildren } from 'react';\r\nimport styled from 'styled-components';\r\nimport classnames from 'classnames';\r\n\r\nconst StyledRoot = styled.li`\r\n        list-style-position: outside;\r\n        margin: 0px;\r\n        margin-bottom: ${(props) => props.theme.token.size.spacing['small-2x']};\r\n        margin-left: ${(props) => props.theme.token.size.spacing['small-1x']};\r\n        padding-left: ${(props) => props.theme.token.size.spacing['small-1x']};\r\n        line-height: 1.25;\r\n    }\r\n`;\r\n\r\nexport interface ListItemProps {\r\n    className?: string;\r\n}\r\n\r\nexport const ListItem = (props: PropsWithChildren<ListItemProps>) => {\r\n    const { children, className } = props;\r\n\r\n    const classes = classnames(className, 'arthur-list-item');\r\n\r\n    return <StyledRoot className={classes}>{children}</StyledRoot>;\r\n};\r\n\r\nListItem.displayName = 'ListItem';\r\n"],"names":[],"sourceRoot":""}