{"version":3,"file":"Radio-stories.bff55c88.iframe.bundle.js","mappings":";;;;AAUA;;;;AAIA;;;;;;AAMA;;;;;;;;;;;;AAYA;;;;;;;;AAQA;AACA;;;;;;;AAOA;AACA;AACA;;;;AAIA;;;;;AAKA;AACA;;;;AAIA;;;AAKA;;ACtDA;;AAKA;;;AAGA;AAwCA;ACzBA;;AAEA;AAEA;AACA;;AAEA;AAEA;AACA;;AAEA;AAIA;AAEA;AACA;;;AAGA;;;;AAIA;AACA;AACA;;AAGA;AACA;AACA;;;AAGA;;;;AAIA;AACA;AACA;;AAGA;;AAEA;AACA;;;AAGA;;;;;AAKA;AACA;AACA;;;;;AAKA;;AAGA;AACA;AACA;;;AAGA;;;;AAIA;AACA;AACA;;AAKA;;AAOA;AACA;;;;;AAKA;AACA;;;AAGA;AACA;;;;AAIA;AACA;;;;;;;;;;AAYA;ACjJA;;;AAGA;;;;;AAKA;;;;AAIA;;;AAIA;AACA;;;AAGA;;;;;AAKA;;;;AAIA;;;AAMA;AACA;AACA;;;AAGA;;;;AAIA;;;;AAIA;AACA;;;;AAIA;AACA;AACA;;;AAGA;;;;;;;;AAQA;;;AAGA;;;;AAIA;;;;AAIA;AA0BA","sources":["webpack://@arthur/docs/../../packages/arthur-ui/src/Radio/Radio.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/RadioGroup/RadioGroup.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/Button/Button.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/FormField/FormField.tsx"],"sourcesContent":["import type { PropsWithChildren } from 'react';\nimport React, { forwardRef, useCallback, useContext, useRef } from 'react';\nimport styled from 'styled-components';\nimport classNames from 'classnames';\nimport { useEnsureId } from '../hook';\nimport { RadioGroupContext } from '../RadioGroup/RadioGroupContext';\n\nconst StyledRoot = styled.span`\n    align-items: center;\n    display: flex;\n    padding: ${(props) => props.theme.token.size.spacing['small-2x']};\n    position: relative;\n\n    & .arthur-radio-input {\n        accent-color: ${(props) => props.theme.token.color.black};\n        appearance: none;\n        height: 16px;\n        width: 16px;\n        position: relative;\n        border-radius: 50%;\n        outline: ${(props) => `1px solid ${props.theme.token.color.palette.gray[75]}`};\n        outline-offset: 0px;\n        cursor: 'pointer';\n        margin: 0;\n        flex-shrink: 0;\n\n        &:checked {\n            height: 14px;\n            width: 14px;\n            margin: 1px;\n            outline: 1px solid black;\n            outline-offset: 2px;\n            background-color: ${(props) => props.theme.token.color.black};\n        }\n\n        &:focus-visible {\n            outline: 0px none;\n        }\n\n        &:focus {\n            outline: ${(props) => props.theme.token.size.border.medium} solid\n                ${(props) => props.theme.token.color.palette.gold.base};\n            outline-offset: 0px;\n            background-color: transparent;\n        }\n    }\n\n    & .arthur-radio-label {\n        color: ${(props) => props.theme.token.color.palette.gray[75]};\n        font-size: ${(props) => props.theme.token.size.font.medium};\n        margin-left: ${(props) => props.theme.token.size.spacing['small-1x']};\n        user-select: none;\n        display: flex;\n        align-items: center;\n        gap: ${(props) => props.theme.token.size.spacing['small-1x']};\n    }\n\n    &.arthur-radio--disabled {\n        & .arthur-radio-input {\n            border: 1px solid ${(props) => props.theme.token.color.action.text.primary.disabled};\n            outline-color: ${(props) => props.theme.token.color.action.text.primary.disabled};\n        }\n\n        & .arthur-radio-label {\n            color: ${(props) => props.theme.token.color.action.text.primary.disabled};\n        }\n    }\n`;\n\nfunction isString(value: unknown): value is string {\n    return typeof value === 'string' || value instanceof String;\n}\n\nexport interface RadioProps {\n    /**\n     * Sets the value for a controlled radio\n     *\n     * @default false\n     */\n    checked?: boolean;\n    className?: string;\n    /**\n     * @default false\n     */\n    disabled?: boolean;\n    label?: string;\n    name?: string;\n    value?: number | string;\n    id?: string;\n    /**\n     * Sets the value for a uncontrolled radio\n     *\n     * @default false\n     */\n    defaultChecked?: boolean;\n    onChange?: (event: React.ChangeEvent<HTMLInputElement>, checked: boolean) => void;\n}\n\nconst Radio = forwardRef<HTMLSpanElement, PropsWithChildren<RadioProps>>((props, forwardedRef) => {\n    const { checked, defaultChecked, children, className, disabled, label, name, value, id, onChange } = props;\n\n    const isControlled = checked !== undefined && onChange !== undefined;\n\n    const groupContext = useContext(RadioGroupContext);\n\n    const contextName = groupContext?.name;\n    const contextOnChange = groupContext?.handleChange;\n    const contextValue = groupContext?.value;\n    const isInGroup = Boolean(groupContext);\n\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    const targetId = useEnsureId(id);\n\n    const classes = classNames(className, 'arthur-radio', {\n        'arthur-radio--checked': isControlled ? checked : inputRef.current?.checked,\n        'arthur-radio--disabled': disabled === true,\n    });\n\n    const handleChange = useCallback<NonNullable<React.InputHTMLAttributes<HTMLInputElement>['onChange']>>(\n        (ev) => {\n            onChange?.(ev, ev.target.checked);\n            contextOnChange?.(ev);\n        },\n        [contextOnChange, onChange],\n    );\n\n    return (\n        <StyledRoot as={label ? 'label' : 'span'} className={classes} ref={forwardedRef}>\n            <input\n                checked={isInGroup ? isString(value) && contextValue === value : checked}\n                className='arthur-radio-input'\n                defaultChecked={defaultChecked}\n                disabled={disabled}\n                id={targetId}\n                name={name ?? contextName}\n                onChange={handleChange}\n                ref={inputRef}\n                type='radio'\n                value={value}\n            />\n\n            {label ? <span className='arthur-radio-label'>{label || children}</span> : null}\n        </StyledRoot>\n    );\n});\n\nexport default Radio;\nRadio.displayName = 'Radio';\n","import type { PropsWithChildren } from 'react';\nimport React, { forwardRef, useCallback, useMemo, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport classNames from 'classnames';\nimport type { RadioProps } from '../Radio';\nimport FormField from '../FormField';\nimport type { RadioLayoutTypes } from './types';\nimport { RadioLayoutTypesEnum } from './types';\nimport type { RadioGroupContextProps } from './RadioGroupContext';\nimport { RadioGroupContext } from './RadioGroupContext';\n\nconst layoutStyles = {\n    vertical: css`\n        flex-direction: column;\n    `,\n    horizontal: css`\n        flex-direction: row;\n    `,\n};\n\nconst StyledRoot = styled.div<{ layout: RadioLayoutTypes }>`\n    display: flex;\n\n    ${(props) => layoutStyles[props.layout]}\n`;\n\nexport type RadioGroupItem = Pick<RadioProps, 'checked' | 'disabled' | 'label' | 'name' | 'value'>;\n\nexport interface RadioGroupProps {\n    className?: string;\n    /**\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * Determines the visual layout\n     *\n     * @default vertical\n     */\n    label?: string;\n    layout?: RadioLayoutTypes;\n    onChange?: (event: React.ChangeEvent<HTMLInputElement>, value: string) => void;\n    name: string;\n    /**\n     * Sets the value for a uncontrolled radio group\n     *\n     * @default false\n     */\n    defaultValue?: string;\n    /**\n     * Sets the value for a controlled radio group\n     *\n     * @default false\n     */\n    value?: string;\n    /**\n     * If true, this will add a red * to your label\n     *\n     * @default false\n     */\n    required?: boolean;\n}\n\nconst RadioGroup = forwardRef<HTMLDivElement, PropsWithChildren<RadioGroupProps>>((props, forwardedRef) => {\n    const {\n        children,\n        className,\n        disabled,\n        label,\n        layout = RadioLayoutTypesEnum.vertical,\n        onChange,\n        value: valueProp,\n        defaultValue,\n        name,\n    } = props;\n    const isValueControlled = valueProp !== undefined;\n\n    const [internalValue, setInternalValue] = useState<RadioGroupContextProps['value']>(\n        defaultValue === undefined ? defaultValue : String(defaultValue),\n    );\n\n    const value = isValueControlled ? String(valueProp) : internalValue;\n\n    const handleChange = useCallback<RadioGroupContextProps['handleChange']>(\n        (event) => {\n            const newValue = event.target.value;\n\n            if (!isValueControlled) setInternalValue(newValue);\n\n            onChange?.(event, newValue);\n        },\n        [isValueControlled, onChange],\n    );\n\n    const groupContext = useMemo<RadioGroupContextProps>(\n        () => ({ disabled, name, handleChange, value }),\n        [disabled, name, handleChange, value],\n    );\n\n    const classes = classNames(className, 'arthur-radiogroup', `arthur-radiogroup--layout-${layout}`, {\n        'arthur-radiogroup--disabled': disabled === true,\n    });\n\n    return (\n        <FormField disabled={disabled} label={label} ref={forwardedRef}>\n            <RadioGroupContext.Provider value={groupContext}>\n                <StyledRoot className={classes} layout={layout}>\n                    {children}\n                </StyledRoot>\n            </RadioGroupContext.Provider>\n        </FormField>\n    );\n});\n\nexport default RadioGroup;\nRadioGroup.displayName = 'RadioGroup';\n","import type { PropsWithChildren } from 'react';\nimport React, { forwardRef, useCallback } from 'react';\nimport styled, { css } from 'styled-components';\nimport classNames from 'classnames';\nimport {\n  ButtonSizesEnum,\n  type ButtonSizes,\n  type ButtonTypes,\n  type ButtonVariants,\n  ButtonTypesEnum,\n  ButtonVariantsEnum,\n} from './types';\n\nexport interface ButtonProps {\n  className?: string;\n  /**\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * @default medium\n   */\n  size?: ButtonSizes;\n  /**\n   * @default default\n   */\n  variant?: ButtonVariants;\n  onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  formId?: string;\n  name?: string;\n  /**\n   * @default button\n   */\n  type?: ButtonTypes;\n}\n\nconst buttonSizeStyles = {\n  small: css`\n    font-size: ${(props) => props.theme.token.size.font.small};\n    height: 30px;\n    padding: 0px ${(props) => props.theme.token.size.spacing.small};\n  `,\n  medium: css`\n    font-size: ${(props) => props.theme.token.size.font.medium};\n    height: 40px;\n    padding: 0px ${(props) => props.theme.token.size.spacing.medium};\n  `,\n  large: css`\n    font-size: ${(props) => props.theme.token.size.font.large};\n    height: 50px;\n    padding: 0px ${(props) => props.theme.token.size.spacing.medium};\n  `,\n};\n\nconst buttonVariantStyles = {\n  default: css`\n    background-color: ${(props) => props.theme.token.color.palette.gold.base};\n    color: ${(props) => props.theme.token.color.black};\n\n    &:not(.arthur-button--disabled):hover {\n      background-color: ${(props) => props.theme.token.color.palette.gold.lighter};\n    }\n\n    &:not(.arthur-button--disabled):active {\n      background-color: ${(props) => props.theme.token.color.palette.gold.darker};\n      box-shadow: inset 0 0 0 1px ${(props) => props.theme.token.color.palette.gold.darker},\n        inset 0 0 0 2px ${(props) => props.theme.token.color.white};\n    }\n  `,\n  secondary: css`\n    background-color: ${(props) => props.theme.token.color.palette.gray[80]};\n    color: ${(props) => props.theme.token.color.white};\n\n    &:not(.arthur-button--disabled):hover {\n      background-color: ${(props) => props.theme.token.color.palette.gray[70]};\n    }\n\n    &:not(.arthur-button--disabled):active {\n      background-color: ${(props) => props.theme.token.color.palette.gray[60]};\n      box-shadow: inset 0 0 0 1px ${(props) => props.theme.token.color.palette.gray[60]},\n        inset 0 0 0 2px ${(props) => props.theme.token.color.white};\n    }\n  `,\n  tertiary: css`\n    background-color: transparent;\n    box-shadow: inset 0 0 0 2px ${(props) => props.theme.token.color.palette.gold.base};\n    color: ${(props) => props.theme.token.color.black};\n\n    &:not(.arthur-button--disabled):hover {\n      background-color: ${(props) => props.theme.token.color.palette.gold.lighter};\n      box-shadow: none;\n    }\n\n    &:not(.arthur-button--disabled):active {\n      background-color: ${(props) => props.theme.token.color.palette.gold.darker};\n      box-shadow: inset 0 0 0 1px ${(props) => props.theme.token.color.palette.gold.darker},\n        inset 0 0 0 2px ${(props) => props.theme.token.color.white};\n    }\n\n    &.arthur-button--disabled {\n      background-color: transparent;\n      box-shadow: inset 0 0 0 2px ${(props) => props.theme.token.color.palette.gray[20]};\n    }\n  `,\n  danger: css`\n    background-color: ${(props) => props.theme.token.color.palette.red.base};\n    color: ${(props) => props.theme.token.color.white};\n\n    &:not(.arthur-button--disabled):hover {\n      background-color: ${(props) => props.theme.token.color.palette.red.darker};\n    }\n\n    &:not(.arthur-button--disabled):active {\n      background-color: ${(props) => props.theme.token.color.palette.red.darkest};\n      box-shadow: inset 0 0 0 1px ${(props) => props.theme.token.color.palette.red.darkest},\n        inset 0 0 0 2px ${(props) => props.theme.token.color.white};\n    }\n  `,\n};\n\nconst StyledRoot = styled.button<{\n  variant: ButtonVariants;\n  size: ButtonSizes;\n  type: ButtonTypes;\n  ref: React.ForwardedRef<unknown>;\n}>`\n  border: none;\n  border-radius: ${(props) => props.theme.token.radius.border.pill};\n  font-weight: ${(props) => props.theme.token.weight.font.regular};\n  min-width: 140px;\n  outline: none;\n\n  &.arthur-button--disabled {\n    background-color: ${(props) => props.theme.token.color.palette.gray[20]};\n    color: ${(props) => props.theme.token.color.palette.gray[40]};\n  }\n\n  ${(props) => buttonSizeStyles[props.size]}\n  ${(props) => buttonVariantStyles[props.variant]} {\n    /* HACK: HANDLES TOKENS FOR CHILD ICONS */\n  }\n  & .arthur-icon {\n    margin-left: ${(props) => props.theme.token.size.spacing[props.size === 'large' ? 'small' : 'small-1x']};\n    margin-right: ${(props) => props.theme.token.size.spacing[props.size === 'large' ? 'small' : 'small-1x']};\n\n    &:first-child {\n      margin-left: 0px;\n    }\n\n    &:last-child {\n      margin-right: 0px;\n    }\n  }\n`;\n\nconst Button = forwardRef((props: PropsWithChildren<ButtonProps>, forwardedRef) => {\n  const {\n    children,\n    className,\n    disabled = false,\n    size = ButtonSizesEnum.medium,\n    type = ButtonTypesEnum.button,\n    variant = ButtonVariantsEnum.default,\n    onClick,\n    ...rest\n  } = props;\n\n  const classes = classNames(\n    className,\n    'arthur-button',\n    `arthur-button--size-${size}`,\n    `arthur-button--variant-${variant}`,\n    {\n      'arthur-button--disabled': disabled,\n    },\n  );\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLButtonElement>) => {\n      onClick?.(event);\n    },\n    [onClick],\n  );\n\n  return (\n    <StyledRoot\n      className={classes}\n      disabled={disabled}\n      onClick={handleClick}\n      ref={forwardedRef}\n      role='button'\n      size={size}\n      type={type}\n      variant={variant}\n      {...rest}\n    >\n      {children}\n    </StyledRoot>\n  );\n});\n\nexport default Button;\n\nButton.displayName = 'Button';\n","import type { PropsWithChildren } from 'react';\nimport React, { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport classNames from 'classnames';\nimport { useEnsureId } from '../hook';\nimport type { FormFieldSize } from './types';\nimport { FormFieldSizeEnum } from './types';\n\nconst sizeStyles = {\n    small: css`\n        font-size: ${(props) => props.theme.token.size.font.small};\n\n        & .arthur-field-header-label {\n            font-size: ${(props) => props.theme.token.size.font.small};\n        }\n\n        & .arthur-field-footer {\n            & .arthur-field-footer-info {\n                font-size: ${(props) => props.theme.token.size.font.small};\n            }\n\n            & .arthur-field-footer-error {\n                font-size: ${(props) => props.theme.token.size.font.small};\n            }\n        }\n    `,\n    medium: css`\n        font-size: ${(props) => props.theme.token.size.font.medium};\n\n        & .arthur-field-header-label {\n            font-size: ${(props) => props.theme.token.size.font.medium};\n        }\n\n        & .arthur-field-footer {\n            & .arthur-field-footer-info {\n                font-size: ${(props) => props.theme.token.size.font.medium};\n            }\n\n            & .arthur-field-footer-error {\n                font-size: ${(props) => props.theme.token.size.font.medium};\n            }\n        }\n    `,\n};\n\nconst StyledRoot = styled.div<{ size: FormFieldSize; $showInfoText: boolean; $showErrorText: boolean }>`\n    font-family: ${(props) => props.theme.token.font.family['sans-serif']};\n    color: ${(props) => props.theme.token.color.black};\n\n    & .arthur-field-header {\n        margin-bottom: ${(props) => props.theme.token.size.spacing['small-2x']};\n    }\n\n    & .arthur-field-header-label {\n        font-weight: ${(props) => props.theme.token.weight.font.bold};\n    }\n\n    & .arthur-field-header-required {\n        color: ${(props) => props.theme.token.color.feedback.error};\n        padding-left: ${(props) => props.theme.token.size.spacing['small-2x']};\n    }\n\n    & .arthur-field-footer {\n        margin-top: ${(props) => props.theme.token.size.spacing['small-2x']};\n        ${(props) => props.$showInfoText && `color: ${props.theme.token.color.feedback.info};`}\n        ${(props) => props.$showErrorText && `color: ${props.theme.token.color.feedback.error};`}\n\n    & .arthur-field-footer-info {\n            padding-right: ${(props) => props.theme.token.size.spacing['small-2x']};\n        }\n\n        & .arthur-field-footer-error {\n        }\n    }\n\n    &.arthur-field--disabled {\n        color: ${(props) => props.theme.token.color.palette.gray[20]};\n\n        & .arthur-field-header-required {\n            color: ${(props) => props.theme.token.color.palette.gray[20]};\n        }\n\n        & .arthur-field-footer {\n            color: ${(props) => props.theme.token.color.palette.gray[20]};\n        }\n    }\n\n    ${(props) => sizeStyles[props.size]}\n`;\n\nexport interface FormFieldProps {\n    errorText?: string;\n    infoText?: string;\n    invalid?: boolean;\n    /**\n     * If true, this will add a red * to your label\n     *\n     * @default false\n     */\n    required?: boolean;\n    /**\n     * @default medium\n     */\n    size?: FormFieldSize;\n    /**\n     * @default false\n     */\n    disabled?: boolean;\n    label?: string;\n    id?: string;\n    className?: string;\n}\n\nconst FormField = forwardRef<HTMLDivElement, PropsWithChildren<FormFieldProps>>((props, forwardedRef) => {\n    const {\n        className,\n        id,\n        children,\n        disabled,\n        errorText,\n        label,\n        infoText,\n        size = FormFieldSizeEnum.medium,\n        required,\n        ...rest\n    } = props;\n\n    const targetId = useEnsureId(id);\n\n    const showHeader = Boolean(label);\n\n    const showErrorText = Boolean(errorText);\n\n    const showInfoText = Boolean(infoText);\n\n    const showFooter = showErrorText || showInfoText;\n\n    const classes = classNames(className, 'arthur-field', `arthur-field--size-${size}`, {\n        'arthur-field--disabled': disabled === true,\n    });\n\n    return (\n        <StyledRoot\n            $showErrorText={showErrorText}\n            $showInfoText={showInfoText}\n            className={classes}\n            ref={forwardedRef}\n            size={size}\n            {...rest}\n        >\n            {showHeader ? (\n                <div className='arthur-field-header'>\n                    <label className='arthur-field-header-label' htmlFor={targetId}>\n                        {label}\n                    </label>\n                    {required === true && <span className='arthur-field-header-required'>*</span>}\n                </div>\n            ) : null}\n            {children}\n            {showFooter ? (\n                <div className='arthur-field-footer'>\n                    {showInfoText ? <span className='arthur-field-footer-info'>{infoText}</span> : null}\n                    {showErrorText ? <span className='arthur-field-footer-error'>{errorText}</span> : null}\n                </div>\n            ) : null}\n        </StyledRoot>\n    );\n});\n\nexport default FormField;\nFormField.displayName = 'FormField';\n"],"names":[],"sourceRoot":""}