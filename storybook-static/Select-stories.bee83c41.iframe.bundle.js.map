{"version":3,"file":"Select-stories.bee83c41.iframe.bundle.js","mappings":";;AAIA;AACA;AACA;AAYA;;ACZA;;;;;AAWA;;;ACIA;ACXA;;;AAGA;;;;;AAKA;;;;AAIA;;;AAIA;AACA;;;AAGA;;;;;AAKA;;;;AAIA;;;AAMA;AACA;AACA;;;AAGA;;;;AAIA;;;;AAIA;AACA;;;;AAIA;AACA;AACA;;;AAGA;;;;;;;;AAQA;;;AAGA;;;;AAIA;;;;AAIA;AA0BA;AC3FA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;;;;;;;;;;;AAWA;;;;;;;;AAQA;;;AAKA;AACA;AAGA;;ACnDA;;AAGA;;AAEA;;AAGA;;AAEA;;AAKA;AAEA;;;;AAIA;;;AAIA;AACA;;;;AAIA;;;AAMA;;AAEA;AACA;;;;;;;;;AASA;AACA;;;;;AAKA;AACA;;;;;AAKA;;;AAGA;AACA;;;;AAIA;;;;;;;;;;AAUA;AACA;;;;AAIA;;;AAGA;AACA;;;;;AAKA;AACA;;;AAGA;;;;;;;;;;AAUA;AACA;AAuCA","sources":["webpack://@arthur/docs/../../packages/arthur-ui/src/Select/SelectOption.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/Select/SelectBody.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/Select/Select.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/FormField/FormField.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/Icon/Icon.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/TextInput/TextInput.tsx"],"sourcesContent":["import React, { useCallback } from 'react';\nimport styled from 'styled-components';\n\nconst StyledRoot = styled.div`\n    font-size: ${(props) => props.theme.token.size.font.medium};\n    padding: ${(props) => props.theme.token.size.spacing.small};\n    border-bottom: ${(props) => `1px solid ${props.theme.token.color.palette.gray[20]}`};\n`;\n\nexport interface SelectOptionProps {\n    className?: string;\n    value: string;\n    label: string;\n    disabled?: boolean;\n    idx: number;\n    onClick: (idx: number) => void;\n}\n\nfunction SelectOption(props: SelectOptionProps) {\n    const { label, onClick, idx } = props;\n\n    const handleClick = useCallback(() => {\n        onClick(idx);\n    }, [idx, onClick]);\n\n    return <StyledRoot onClick={handleClick}>{label}</StyledRoot>;\n}\n\nexport default SelectOption;\n","import type { PropsWithChildren } from 'react';\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst StyledRoot = styled.div<SelectBodyProps>`\n    border: 1px solid transparent;\n    max-height: ${(props) => (props.open ? '500px' : 0)};\n    transition: max-height 500ms ease;\n    overflow: hidden;\n    position: absolute;\n    width: 100%;\n`;\n\nexport interface SelectBodyProps {\n    open: boolean;\n}\n\nfunction SelectBody(props: PropsWithChildren<SelectBodyProps>) {\n    const { children, open } = props;\n\n    return <StyledRoot open={open}>{children}</StyledRoot>;\n}\n\nexport default SelectBody;\nSelectBody.displayName = 'SelectBody';\n","import React, { forwardRef, useCallback, useState } from 'react';\nimport styled from 'styled-components';\nimport TextInput from '../TextInput';\nimport Icon from '../Icon';\nimport type { SelectOptionProps } from './SelectOption';\nimport SelectOption from './SelectOption';\nimport SelectBody from './SelectBody';\n\nconst StyledRoot = styled.div`\n  border: 1px solid transparent;\n  position: relative;\n`;\n\nexport interface SelectProps {\n  className?: string;\n  disabled?: boolean;\n  value: string | number;\n  options: SelectOptionProps[];\n  onChange?: (event: React.ChangeEvent<SelectOptionProps>, value: (string | number)[]) => void;\n}\n\nconst Select = forwardRef<HTMLDivElement, SelectProps>((props, _forwardedRef) => {\n  const { options, value } = props;\n\n  const [showBody, _setShowBody] = useState(false);\n\n  const [selectedItemIdx, setSelectedItemIdx] = useState<number | undefined>(\n    options.findIndex((o) => o.value === value),\n  );\n\n  const selectedItemText =\n    selectedItemIdx !== undefined && selectedItemIdx >= 0 ? options[selectedItemIdx].label : undefined;\n\n  // const handleClick = useCallback(\n  //     (_event: React.MouseEvent<HTMLElement>) => {\n  //         setShowBody(!showBody);\n  //     },\n  //     [showBody],\n  // );\n\n  // const handleInputChange = useCallback((_value?: string) => {}, []);\n\n  const handleOptionClick = useCallback((idx: number) => {\n    setSelectedItemIdx(idx);\n  }, []);\n\n  return (\n    <StyledRoot>\n      <TextInput\n        className='arthur-select-input'\n        placeholder='Select an option'\n        suffix={<Icon size='small' value='chevron-down' />}\n        value={selectedItemText}\n      />\n      <SelectBody open={showBody}>\n        {options.map((option, idx) => (\n          <SelectOption key={option.value} {...option} idx={idx} onClick={handleOptionClick} />\n        ))}\n      </SelectBody>\n    </StyledRoot>\n  );\n});\n\nexport default Select;\nSelect.displayName = 'Select';\n","import type { PropsWithChildren } from 'react';\nimport React, { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport classNames from 'classnames';\nimport { useEnsureId } from '../hook';\nimport type { FormFieldSize } from './types';\nimport { FormFieldSizeEnum } from './types';\n\nconst sizeStyles = {\n    small: css`\n        font-size: ${(props) => props.theme.token.size.font.small};\n\n        & .arthur-field-header-label {\n            font-size: ${(props) => props.theme.token.size.font.small};\n        }\n\n        & .arthur-field-footer {\n            & .arthur-field-footer-info {\n                font-size: ${(props) => props.theme.token.size.font.small};\n            }\n\n            & .arthur-field-footer-error {\n                font-size: ${(props) => props.theme.token.size.font.small};\n            }\n        }\n    `,\n    medium: css`\n        font-size: ${(props) => props.theme.token.size.font.medium};\n\n        & .arthur-field-header-label {\n            font-size: ${(props) => props.theme.token.size.font.medium};\n        }\n\n        & .arthur-field-footer {\n            & .arthur-field-footer-info {\n                font-size: ${(props) => props.theme.token.size.font.medium};\n            }\n\n            & .arthur-field-footer-error {\n                font-size: ${(props) => props.theme.token.size.font.medium};\n            }\n        }\n    `,\n};\n\nconst StyledRoot = styled.div<{ size: FormFieldSize; $showInfoText: boolean; $showErrorText: boolean }>`\n    font-family: ${(props) => props.theme.token.font.family['sans-serif']};\n    color: ${(props) => props.theme.token.color.black};\n\n    & .arthur-field-header {\n        margin-bottom: ${(props) => props.theme.token.size.spacing['small-2x']};\n    }\n\n    & .arthur-field-header-label {\n        font-weight: ${(props) => props.theme.token.weight.font.bold};\n    }\n\n    & .arthur-field-header-required {\n        color: ${(props) => props.theme.token.color.feedback.error};\n        padding-left: ${(props) => props.theme.token.size.spacing['small-2x']};\n    }\n\n    & .arthur-field-footer {\n        margin-top: ${(props) => props.theme.token.size.spacing['small-2x']};\n        ${(props) => props.$showInfoText && `color: ${props.theme.token.color.feedback.info};`}\n        ${(props) => props.$showErrorText && `color: ${props.theme.token.color.feedback.error};`}\n\n    & .arthur-field-footer-info {\n            padding-right: ${(props) => props.theme.token.size.spacing['small-2x']};\n        }\n\n        & .arthur-field-footer-error {\n        }\n    }\n\n    &.arthur-field--disabled {\n        color: ${(props) => props.theme.token.color.palette.gray[20]};\n\n        & .arthur-field-header-required {\n            color: ${(props) => props.theme.token.color.palette.gray[20]};\n        }\n\n        & .arthur-field-footer {\n            color: ${(props) => props.theme.token.color.palette.gray[20]};\n        }\n    }\n\n    ${(props) => sizeStyles[props.size]}\n`;\n\nexport interface FormFieldProps {\n    errorText?: string;\n    infoText?: string;\n    invalid?: boolean;\n    /**\n     * If true, this will add a red * to your label\n     *\n     * @default false\n     */\n    required?: boolean;\n    /**\n     * @default medium\n     */\n    size?: FormFieldSize;\n    /**\n     * @default false\n     */\n    disabled?: boolean;\n    label?: string;\n    id?: string;\n    className?: string;\n}\n\nconst FormField = forwardRef<HTMLDivElement, PropsWithChildren<FormFieldProps>>((props, forwardedRef) => {\n    const {\n        className,\n        id,\n        children,\n        disabled,\n        errorText,\n        label,\n        infoText,\n        size = FormFieldSizeEnum.medium,\n        required,\n        ...rest\n    } = props;\n\n    const targetId = useEnsureId(id);\n\n    const showHeader = Boolean(label);\n\n    const showErrorText = Boolean(errorText);\n\n    const showInfoText = Boolean(infoText);\n\n    const showFooter = showErrorText || showInfoText;\n\n    const classes = classNames(className, 'arthur-field', `arthur-field--size-${size}`, {\n        'arthur-field--disabled': disabled === true,\n    });\n\n    return (\n        <StyledRoot\n            $showErrorText={showErrorText}\n            $showInfoText={showInfoText}\n            className={classes}\n            ref={forwardedRef}\n            size={size}\n            {...rest}\n        >\n            {showHeader ? (\n                <div className='arthur-field-header'>\n                    <label className='arthur-field-header-label' htmlFor={targetId}>\n                        {label}\n                    </label>\n                    {required === true && <span className='arthur-field-header-required'>*</span>}\n                </div>\n            ) : null}\n            {children}\n            {showFooter ? (\n                <div className='arthur-field-footer'>\n                    {showInfoText ? <span className='arthur-field-footer-info'>{infoText}</span> : null}\n                    {showErrorText ? <span className='arthur-field-footer-error'>{errorText}</span> : null}\n                </div>\n            ) : null}\n        </StyledRoot>\n    );\n});\n\nexport default FormField;\nFormField.displayName = 'FormField';\n","import React, { forwardRef, useCallback } from 'react';\nimport styled, { css } from 'styled-components';\nimport classNames from 'classnames';\nimport { type IconValue, type IconSizes, IconSizesEnum } from './types';\nimport { ICON_VALUES } from './constants';\n\nexport interface IconProps {\n    className?: string;\n    /**\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * @default medium\n     */\n    size?: IconSizes;\n    onClick?: (event: React.MouseEvent<HTMLSpanElement>) => unknown;\n    value: IconValue;\n}\n\nconst iconSizeStyles = {\n    'small-1x': css`\n        font-size: ${(props) => props.theme.token.size.font['small-1x']};\n    `,\n    small: css`\n        font-size: ${(props) => props.theme.token.size.font.small};\n    `,\n    medium: css`\n        font-size: ${(props) => props.theme.token.size.font.medium};\n    `,\n    large: css`\n        font-size: ${(props) => props.theme.token.size.font.large};\n    `,\n};\n\nconst StyledRoot = styled.span<{ disabled?: boolean }>`\n    background-color: transparent;\n    border: 0px none;\n    outline: 0px none;\n    padding: 0px;\n\n    &:not(.arthur-icon--disabled) {\n        &.arthur-icon--clickable {\n            &:hover,\n            &:focus,\n            &:active {\n                color: ${(props) => props.theme.token.color.palette.gold.base};\n                cursor: pointer;\n                outline: 0px none;\n            }\n        }\n    }\n\n    &.arthur-icon--disabled {\n        color: ${(props) => props.theme.token.color.action.text.primary.disabled};\n        cursor: default;\n    }\n`;\n\nconst StyledIcon = styled.i<{ size: IconSizes }>`\n    ${(props) => iconSizeStyles[props.size]}\n`;\n\nconst Icon = forwardRef<HTMLSpanElement | HTMLButtonElement, IconProps>((props, forwardedRef) => {\n    const { className, disabled, size = 'medium', value, onClick, ...rest } = props;\n\n    const iconClass = ICON_VALUES[value];\n\n    if (!IconSizesEnum[size]) {\n        throw new Error(`icon: invalid size \"${size}\"`);\n    }\n\n    const isClickable = disabled === true || typeof onClick === 'function';\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLSpanElement>) => {\n            if (disabled) return;\n\n            onClick?.(event);\n        },\n        [disabled, onClick],\n    );\n\n    const classes = {\n        root: classNames(className, 'arthur-icon', `arthur-icon--size-${size}`, {\n            'arthur-icon--clickable': isClickable,\n            'arthur-icon--disabled': disabled === true,\n        }),\n        regular: classNames('arthur-icon-regular', 'fa-regular', {\n            'fa-foobar': Boolean(iconClass) && Boolean(value),\n            [iconClass]: Boolean(iconClass),\n            [value as string]: Boolean(iconClass) && Boolean(value),\n        }),\n    };\n\n    // The wrapping span is needed because an error is thrown if one attempts\n    // to remove this from the dom once it is rendered. This is because the \"rendered\"\n    // node is the <i /> element, but a sibling <svg /> element is created as well.\n    // Without the wrapper and in the case that the element is added and removed again,\n    // React throws.\n    return (\n        <StyledRoot\n            as={isClickable ? 'button' : 'span'}\n            className={classes.root}\n            disabled={disabled}\n            onClick={handleClick}\n            ref={forwardedRef}\n        >\n            <StyledIcon className={classes.regular} size={size} {...rest} />\n        </StyledRoot>\n    );\n});\n\nexport default Icon;\n\nIcon.displayName = 'Icon';\n","import type { ReactNode } from 'react';\nimport React, { forwardRef, useCallback, useEffect, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport classNames from 'classnames';\nimport { useEnsureId } from '../hook';\nimport FormField from '../FormField';\nimport type { TextInputAlignment, TextInputSize } from './types';\nimport { TextInputAlignmentEnum, TextInputSizeEnum } from './types';\n\nconst alignmentStyles = {\n  left: css`\n    & .arthur-textinput-input {\n      text-align: ${(props) => props.theme.token['text-align'].left};\n    }\n  `,\n  center: css`\n    & .arthur-textinput-input {\n      text-align: ${(props) => props.theme.token['text-align'].center};\n    }\n  `,\n  right: css`\n    & .arthur-textinput-input {\n      text-align: ${(props) => props.theme.token['text-align'].right};\n    }\n  `,\n};\n\nconst sizeStyles = {\n  small: css`\n    font-size: ${(props) => props.theme.token.size.font.small};\n    min-height: 32px;\n\n    & .arthur-textinput-input {\n      font-size: ${(props) => props.theme.token.size.font.small};\n      min-height: 32px;\n    }\n  `,\n  medium: css`\n    font-size: ${(props) => props.theme.token.size.font.medium};\n    min-height: 40px;\n\n    & .arthur-textinput-input {\n      font-size: ${(props) => props.theme.token.size.font.medium};\n      min-height: 40px;\n    }\n  `,\n};\n\nconst StyledRoot = styled.span<{ alignment: TextInputAlignment; size: TextInputSize }>`\n  align-items: center;\n  border: 1px solid ${(props) => props.theme.token.color.palette.gray[75]};\n  border-radius: ${(props) => props.theme.token.radius.border.basic};\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: row;\n  min-width: 300px;\n  overflow: hidden;\n  position: relative;\n\n  & .arthur-textinput-prefix {\n    font-family: ${(props) => props.theme.token.font.family['sans-serif']};\n    padding-left: ${(props) => props.theme.token.size.spacing['small-1x']};\n    user-select: none;\n  }\n\n  & .arthur-textinput-suffix {\n    font-family: ${(props) => props.theme.token.font.family['sans-serif']};\n    padding-right: ${(props) => props.theme.token.size.spacing['small-1x']};\n    user-select: none;\n  }\n\n  & .arthur-textinput-input {\n    background-color: ${(props) => props.theme.token.color.white};\n    border: 0px none;\n    box-sizing: border-box;\n    font-family: ${(props) => props.theme.token.font.family['sans-serif']};\n    padding: 0px ${(props) => props.theme.token.size.spacing[1]};\n    width: 100%;\n\n    &::placeholder {\n      color: ${(props) => props.theme.token.color.palette.gray[20]};\n    }\n\n    &:focus {\n      outline: none;\n    }\n  }\n\n  &:has(.arthur-textinput-input:focus) {\n    border: 1px solid transparent;\n    outline: ${(props) => props.theme.token.size.border.medium} solid\n      ${(props) => props.theme.token.color.palette.gold.base};\n  }\n\n  &.arthur-textinput--invalid {\n    border-color: ${(props) => props.theme.token.color.feedback.error};\n\n    &:has(.arthur-textinput-input:focus) {\n      outline: ${(props) => props.theme.token.size.border.medium} solid\n        ${(props) => props.theme.token.color.feedback.error};\n    }\n  }\n\n  &.arthur-textinput--disabled {\n    border: 1px solid ${(props) => props.theme.token.color.palette.gray[20]};\n    color: ${(props) => props.theme.token.color.palette.gray[20]};\n\n    & .arthur-textinput-input {\n      color: ${(props) => props.theme.token.color.palette.gray[20]};\n    }\n  }\n\n  &.arthur-textinput--readonly {\n    & .arthur-textinput-input {\n      cursor: pointer;\n    }\n  }\n\n  ${(props) => alignmentStyles[props.alignment]}\n  ${(props) => sizeStyles[props.size]}\n`;\n\nexport interface TextInputProps {\n  /**\n   * @default  left\n   */\n  alignment?: TextInputAlignment;\n  /**\n   * @default medium\n   */\n  size?: TextInputSize;\n  autoComplete?: boolean;\n  className?: string;\n  /**\n   * @default false\n   */\n  disabled?: boolean;\n  id?: string;\n  maxLength?: number;\n  minLength?: number;\n  /**\n   * If true, this will add a red * to your label\n   *\n   * @default false\n   */\n  required?: boolean;\n  prefix?: ReactNode;\n  errorText?: string;\n  infoText?: string;\n  readOnly?: boolean;\n  label?: string;\n  suffix?: ReactNode;\n  placeholder?: string;\n  value?: string;\n  defaultValue?: string;\n  onChange?: (value?: string) => void;\n}\n\nconst TextInput = forwardRef<HTMLDivElement, TextInputProps>((props, forwardedRef) => {\n  const {\n    alignment = TextInputAlignmentEnum.left,\n    autoComplete,\n    className,\n    disabled,\n    errorText,\n    id,\n    infoText,\n    label,\n    prefix,\n    readOnly,\n    required,\n    size = TextInputSizeEnum.medium,\n    suffix,\n    onChange,\n    placeholder,\n    value,\n    defaultValue,\n  } = props;\n\n  const isControlled = Boolean(Boolean(value) && !defaultValue && Boolean(onChange));\n\n  const classes = classNames(\n    className,\n    'arthur-textinput',\n    `arthur-textinput--alignment-${alignment}`,\n    `arthur-textinput--size-${size}`,\n    {\n      'arthur-textinput--disabled': disabled === true,\n      'arthur-textinput--readonly': readOnly === true,\n    },\n  );\n\n  const [uncontrolledValue, setUncontrolledValue] = useState(defaultValue);\n\n  const internalValue = isControlled ? value : uncontrolledValue;\n\n  const targetId = useEnsureId(id);\n\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const nextValue = event.target.value;\n      if (isControlled) {\n        onChange?.(nextValue);\n      } else {\n        setUncontrolledValue(nextValue);\n      }\n    },\n    [isControlled, onChange],\n  );\n\n  // call onChange when internalValue changes\n  useEffect(() => {\n    onChange?.(internalValue);\n  }, [internalValue, onChange]);\n\n  return (\n    <FormField\n      className={className}\n      disabled={disabled}\n      errorText={errorText}\n      id={targetId}\n      infoText={infoText}\n      label={label}\n      ref={forwardedRef}\n      required={required}\n      size={size}\n    >\n      <StyledRoot alignment={alignment} className={classes} size={size}>\n        {prefix ? <span className='arthur-textinput-prefix'>{prefix}</span> : null}\n\n        <input\n          autoComplete={autoComplete === true ? 'on' : 'off'}\n          className='arthur-textinput-input'\n          disabled={disabled}\n          id={targetId}\n          onChange={handleChange}\n          placeholder={placeholder}\n          readOnly={readOnly}\n          type='text'\n          value={internalValue || ''}\n        />\n        {suffix ? <span className='arthur-textinput-suffix'>{suffix}</span> : null}\n      </StyledRoot>\n    </FormField>\n  );\n});\n\nexport default TextInput;\n\nTextInput.displayName = 'TextInput';\n"],"names":[],"sourceRoot":""}