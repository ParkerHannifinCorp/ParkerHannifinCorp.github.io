{"version":3,"file":"ToggleButton-stories.b7b45ce3.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;AA2DA;ACrBA;;AAEA;AAEA;AACA;;AAEA;AAEA;AACA;;AAEA;AAIA;AAEA;AACA;;;AAGA;;;;AAIA;AACA;AACA;;AAGA;AACA;AACA;;;AAGA;;;;AAIA;AACA;AACA;;AAGA;;AAEA;AACA;;;AAGA;;;;;AAKA;AACA;AACA;;;;;AAKA;;AAGA;AACA;AACA;;;AAGA;;;;AAIA;AACA;AACA;;AAKA;;AAOA;AACA;;;;;AAKA;AACA;;;AAGA;AACA;;;;AAIA;AACA;;;;;;;;;;AAYA","sources":["webpack://@arthur/docs/../../packages/arthur-ui/src/ToggleButton/ToggleButton.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/Button/Button.tsx"],"sourcesContent":["import type { ReactNode } from 'react';\nimport React, { forwardRef, useCallback, useState } from 'react';\nimport styled from 'styled-components';\nimport classNames from 'classnames';\nimport Button from '../Button';\nimport type { ToggleButtonSize } from './types';\nimport { ToggleButtonSizeEnum } from './types';\n\nconst StyledRoot = styled.span<ToggleButtonProps>`\n    & .arthur-togglebutton-button-active {\n        border-top-left-radius: 0px;\n        border-bottom-left-radius: 0px;\n        position: relative;\n        right: 1px;\n    }\n\n    & .arthur-togglebutton-button-inactive {\n        border-top-right-radius: 0px;\n        border-bottom-right-radius: 0px;\n        position: relative;\n        left: 1px;\n    }\n\n    & button:focus {\n        z-index: 999;\n    }\n`;\n\n/**\n *\n */\nexport interface ToggleButtonProps {\n    /**\n     * Sets the initial state of the toggle\n     *\n     * @default false\n     */\n    defaultActive?: boolean;\n    className?: string;\n    /**\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * @default medium\n     */\n    size?: ToggleButtonSize;\n    onChange?: (event: React.MouseEvent<HTMLButtonElement>, active: boolean) => void;\n    /**\n     * Sets the contents of the active button\n     */\n    activeLabel?: ReactNode;\n\n    /**\n     * Sets the contents of the inactive button\n     */\n    inactiveLabel?: ReactNode;\n}\n\nconst ToggleButton = forwardRef<HTMLSpanElement, ToggleButtonProps>((props, forwardedRef) => {\n    const {\n        defaultActive,\n        activeLabel,\n        className,\n        disabled,\n        inactiveLabel,\n        size = ToggleButtonSizeEnum.medium,\n        onChange,\n        ...rest\n    } = props;\n\n    const [active, setActive] = useState(defaultActive);\n\n    const classes = classNames(className, 'arthur-togglebutton', {\n        'arthur-togglebutton--active': active === true,\n        'arthur-togglebutton--disabled': disabled === true,\n        'arthur-togglebutton--inactive': active !== true,\n    });\n\n    const handleClick = useCallback(\n        (isActiveButton: boolean) => (event: React.MouseEvent<HTMLButtonElement>) => {\n            if (!disabled) {\n                setActive(isActiveButton);\n                onChange?.(event, isActiveButton);\n            }\n        },\n        [onChange, disabled],\n    );\n\n    return (\n        <StyledRoot className={classes} ref={forwardedRef} {...rest}>\n            <Button\n                className='arthur-togglebutton-button-inactive'\n                disabled={disabled}\n                onClick={handleClick(false)}\n                size={size}\n                variant={active ? 'tertiary' : 'default'}\n            >\n                {inactiveLabel}\n            </Button>\n            <Button\n                className='arthur-togglebutton-button-active'\n                disabled={disabled}\n                onClick={handleClick(true)}\n                size={size}\n                variant={active ? 'default' : 'tertiary'}\n            >\n                {activeLabel}\n            </Button>\n        </StyledRoot>\n    );\n});\n\nexport default ToggleButton;\nToggleButton.displayName = 'ToggleButton';\n","import type { PropsWithChildren } from 'react';\nimport React, { forwardRef, useCallback } from 'react';\nimport styled, { css } from 'styled-components';\nimport classNames from 'classnames';\nimport {\n  ButtonSizesEnum,\n  type ButtonSizes,\n  type ButtonTypes,\n  type ButtonVariants,\n  ButtonTypesEnum,\n  ButtonVariantsEnum,\n} from './types';\n\nexport interface ButtonProps {\n  className?: string;\n  /**\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * @default medium\n   */\n  size?: ButtonSizes;\n  /**\n   * @default default\n   */\n  variant?: ButtonVariants;\n  onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  formId?: string;\n  name?: string;\n  /**\n   * @default button\n   */\n  type?: ButtonTypes;\n}\n\nconst buttonSizeStyles = {\n  small: css`\n    font-size: ${(props) => props.theme.token.size.font.small};\n    height: 30px;\n    padding: 0px ${(props) => props.theme.token.size.spacing.small};\n  `,\n  medium: css`\n    font-size: ${(props) => props.theme.token.size.font.medium};\n    height: 40px;\n    padding: 0px ${(props) => props.theme.token.size.spacing.medium};\n  `,\n  large: css`\n    font-size: ${(props) => props.theme.token.size.font.large};\n    height: 50px;\n    padding: 0px ${(props) => props.theme.token.size.spacing.medium};\n  `,\n};\n\nconst buttonVariantStyles = {\n  default: css`\n    background-color: ${(props) => props.theme.token.color.palette.gold.base};\n    color: ${(props) => props.theme.token.color.black};\n\n    &:not(.arthur-button--disabled):hover {\n      background-color: ${(props) => props.theme.token.color.palette.gold.lighter};\n    }\n\n    &:not(.arthur-button--disabled):active {\n      background-color: ${(props) => props.theme.token.color.palette.gold.darker};\n      box-shadow: inset 0 0 0 1px ${(props) => props.theme.token.color.palette.gold.darker},\n        inset 0 0 0 2px ${(props) => props.theme.token.color.white};\n    }\n  `,\n  secondary: css`\n    background-color: ${(props) => props.theme.token.color.palette.gray[80]};\n    color: ${(props) => props.theme.token.color.white};\n\n    &:not(.arthur-button--disabled):hover {\n      background-color: ${(props) => props.theme.token.color.palette.gray[70]};\n    }\n\n    &:not(.arthur-button--disabled):active {\n      background-color: ${(props) => props.theme.token.color.palette.gray[60]};\n      box-shadow: inset 0 0 0 1px ${(props) => props.theme.token.color.palette.gray[60]},\n        inset 0 0 0 2px ${(props) => props.theme.token.color.white};\n    }\n  `,\n  tertiary: css`\n    background-color: transparent;\n    box-shadow: inset 0 0 0 2px ${(props) => props.theme.token.color.palette.gold.base};\n    color: ${(props) => props.theme.token.color.black};\n\n    &:not(.arthur-button--disabled):hover {\n      background-color: ${(props) => props.theme.token.color.palette.gold.lighter};\n      box-shadow: none;\n    }\n\n    &:not(.arthur-button--disabled):active {\n      background-color: ${(props) => props.theme.token.color.palette.gold.darker};\n      box-shadow: inset 0 0 0 1px ${(props) => props.theme.token.color.palette.gold.darker},\n        inset 0 0 0 2px ${(props) => props.theme.token.color.white};\n    }\n\n    &.arthur-button--disabled {\n      background-color: transparent;\n      box-shadow: inset 0 0 0 2px ${(props) => props.theme.token.color.palette.gray[20]};\n    }\n  `,\n  danger: css`\n    background-color: ${(props) => props.theme.token.color.palette.red.base};\n    color: ${(props) => props.theme.token.color.white};\n\n    &:not(.arthur-button--disabled):hover {\n      background-color: ${(props) => props.theme.token.color.palette.red.darker};\n    }\n\n    &:not(.arthur-button--disabled):active {\n      background-color: ${(props) => props.theme.token.color.palette.red.darkest};\n      box-shadow: inset 0 0 0 1px ${(props) => props.theme.token.color.palette.red.darkest},\n        inset 0 0 0 2px ${(props) => props.theme.token.color.white};\n    }\n  `,\n};\n\nconst StyledRoot = styled.button<{\n  variant: ButtonVariants;\n  size: ButtonSizes;\n  type: ButtonTypes;\n  ref: React.ForwardedRef<unknown>;\n}>`\n  border: none;\n  border-radius: ${(props) => props.theme.token.radius.border.pill};\n  font-weight: ${(props) => props.theme.token.weight.font.regular};\n  min-width: 140px;\n  outline: none;\n\n  &.arthur-button--disabled {\n    background-color: ${(props) => props.theme.token.color.palette.gray[20]};\n    color: ${(props) => props.theme.token.color.palette.gray[40]};\n  }\n\n  ${(props) => buttonSizeStyles[props.size]}\n  ${(props) => buttonVariantStyles[props.variant]} {\n    /* HACK: HANDLES TOKENS FOR CHILD ICONS */\n  }\n  & .arthur-icon {\n    margin-left: ${(props) => props.theme.token.size.spacing[props.size === 'large' ? 'small' : 'small-1x']};\n    margin-right: ${(props) => props.theme.token.size.spacing[props.size === 'large' ? 'small' : 'small-1x']};\n\n    &:first-child {\n      margin-left: 0px;\n    }\n\n    &:last-child {\n      margin-right: 0px;\n    }\n  }\n`;\n\nconst Button = forwardRef((props: PropsWithChildren<ButtonProps>, forwardedRef) => {\n  const {\n    children,\n    className,\n    disabled = false,\n    size = ButtonSizesEnum.medium,\n    type = ButtonTypesEnum.button,\n    variant = ButtonVariantsEnum.default,\n    onClick,\n    ...rest\n  } = props;\n\n  const classes = classNames(\n    className,\n    'arthur-button',\n    `arthur-button--size-${size}`,\n    `arthur-button--variant-${variant}`,\n    {\n      'arthur-button--disabled': disabled,\n    },\n  );\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLButtonElement>) => {\n      onClick?.(event);\n    },\n    [onClick],\n  );\n\n  return (\n    <StyledRoot\n      className={classes}\n      disabled={disabled}\n      onClick={handleClick}\n      ref={forwardedRef}\n      role='button'\n      size={size}\n      type={type}\n      variant={variant}\n      {...rest}\n    >\n      {children}\n    </StyledRoot>\n  );\n});\n\nexport default Button;\n\nButton.displayName = 'Button';\n"],"names":[],"sourceRoot":""}