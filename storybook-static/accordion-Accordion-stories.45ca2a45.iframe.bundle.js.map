{"version":3,"file":"accordion-Accordion-stories.45ca2a45.iframe.bundle.js","mappings":";;;AA+CA;ACzBA;AACA;;AAGA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;;;;AAIA;;;;;;;;AAQA;;;;;;;;;;;;;AAaA;;;;;AAKA;;AAIA;AACA;;;;AAIA;;AAGA;;AAEA;;;;AAIA;;;;;;;;AAQA;;;;;;;;;;;;;AAaA;;;;;AAKA;;AAKA;AAIA;;;;AAIA;AACA;;;AAGA;;;;;;;;AAQA;;;;;;;;;AASA;AAGA;;AAIA;AAGA;;;AAMA;;AAEA;;;AAKA;AAIA;;AAEA;;;AAGA;;;;AAIA;;;;;AAKA;;AAEA;AAGA;AC1KA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;;;;;;;;;;;AAWA;;;;;;;;AAQA;;;AAKA;AACA;AAGA","sources":["webpack://@arthur/docs/../../packages/arthur-ui/src/Accordion/Accordion.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/Accordion/AccordionItem.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/Icon/Icon.tsx"],"sourcesContent":["import React, { forwardRef, useCallback, useEffect, useMemo, useState } from 'react';\nimport type { MouseEvent, PropsWithChildren } from 'react';\nimport styled from 'styled-components';\nimport classnames from 'classnames';\nimport { AccordionContext } from './AccordionContext';\nimport {\n  AccordionSizeEnum,\n  type AccordionSectionId,\n  type AccordionSize,\n  type AccordionVariant,\n  type ExpandedItems,\n  AccordionVariantsEnum,\n} from './types';\n\nconst StyledRoot = styled.div<Partial<AccordionProps>>`\n  counter-reset: number;\n`;\n\nexport interface AccordionProps {\n  className?: string;\n  /**\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * @default medium\n   */\n  size?: AccordionSize;\n  /**\n   * @default default\n   */\n  variant?: AccordionVariant;\n  /**\n   * Controls how many accordions can be open simultaneously.\n   *\n   * @default false\n   */\n  singleSelect?: boolean;\n  onChange?: (event: React.MouseEvent, expandedItems: ExpandedItems) => void;\n  /**\n   * Array of ids for accordions that should render open\n   *\n   * @default []\n   */\n  defaultExpandedItems?: ExpandedItems;\n}\n\nconst Accordion = forwardRef<HTMLDivElement, PropsWithChildren<AccordionProps>>((props, forwardedRef) => {\n  const {\n    className: classesProp,\n    defaultExpandedItems = [],\n    disabled = false,\n    onChange: onChangeProp,\n    variant = AccordionVariantsEnum.default,\n    singleSelect = false,\n    size = AccordionSizeEnum.medium,\n  } = props;\n\n  const [expandedItems, setExpandedItems] = useState<ExpandedItems>(defaultExpandedItems);\n\n  const [activeItem, setActiveItem] = useState<AccordionSectionId | undefined>();\n\n  const handleChange = useCallback(\n    (event: React.MouseEvent, id: AccordionSectionId) => {\n      if (singleSelect) {\n        onChangeProp?.(event, [id]);\n        setExpandedItems([id]);\n        return;\n      }\n\n      const nextExpandedItems = [...expandedItems];\n\n      // if the accordion section id was already selected we can conclude\n      // that the user clicked it again to de-select it\n      const idx = nextExpandedItems.indexOf(id);\n      const isDeSelected = idx !== -1;\n\n      if (isDeSelected) {\n        // de-select the item by removing it from the expandedItems array\n        nextExpandedItems.splice(idx, 1);\n      } else {\n        // select the item by adding it to the expandedItems array\n        nextExpandedItems.push(id);\n      }\n\n      onChangeProp?.(event, nextExpandedItems);\n      setExpandedItems(nextExpandedItems);\n    },\n    [expandedItems, onChangeProp, singleSelect],\n  );\n\n  const handleHeaderClick = useCallback((id: AccordionSectionId) => {\n    setActiveItem(id);\n  }, []);\n\n  useEffect(() => {\n    const handler: EventListener = (event) => {\n      const isInAccordion = (event.target as HTMLElement).closest('.arthur-accordion');\n\n      if (!isInAccordion) {\n        setActiveItem(undefined);\n      }\n    };\n    document.body.addEventListener('click', handler);\n\n    return function cleanup() {\n      window.removeEventListener('click', handler);\n    };\n  }, []);\n\n  const accordionContext = useMemo(\n    () => ({\n      disabled,\n      expandedItems,\n      variant,\n      onChange: handleChange,\n      size,\n      onHeaderClick: handleHeaderClick,\n      activeItem,\n    }),\n    [disabled, expandedItems, variant, handleChange, size, handleHeaderClick, activeItem],\n  );\n\n  const classes = classnames('arthur-accordion', classesProp);\n\n  return (\n    <AccordionContext.Provider value={accordionContext}>\n      <StyledRoot className={classes} ref={forwardedRef} variant={variant}>\n        {props.children}\n      </StyledRoot>\n    </AccordionContext.Provider>\n  );\n});\n\nexport default Accordion;\n\nAccordion.displayName = 'Accordion';\n","import type { PropsWithChildren } from 'react';\nimport { forwardRef, useCallback, useContext } from 'react';\nimport { styled, css } from 'styled-components';\nimport classnames from 'classnames';\nimport Icon from '../Icon';\nimport { AccordionContext } from './AccordionContext';\nimport {\n  AccordionSizeEnum,\n  type AccordionSectionId,\n  type AccordionSize,\n  type AccordionVariant,\n  AccordionVariantsEnum,\n} from './types';\n\ninterface AccordionItemProps {\n  title: string;\n  id: AccordionSectionId;\n  disabled?: boolean;\n}\n\nconst AccordionSizeStyles = {\n  small: css`\n    font-size: ${(props) => props.theme.token.size.font.small};\n    padding: ${(props) => props.theme.token.size.spacing['small-2x']};\n    }\n  `,\n  medium: css`\n    font-size: ${(props) => props.theme.token.size.font.medium};\n    padding: ${(props) => props.theme.token.size.spacing['small-1x']};\n  `,\n  large: css`\n    font-size: ${(props) => props.theme.token.size.font.large};\n    padding: ${(props) => props.theme.token.size.spacing.small};\n  `,\n};\n\nconst AccordionVariantStyles = {\n  default: css`\n    border-top: 1px solid ${(props) => props.theme.token.color.black};\n    margin-top: 0px;\n\n    &:last-child {\n      border-bottom: 1px solid ${(props) => props.theme.token.color.black};\n    }\n\n    &:last-child.active {\n      border-bottom-color: transparent;\n    }\n\n    &:last-child.active.expanded {\n      border-bottom-color: ${(props) => props.theme.token.color.black};\n    }\n\n    &.active {\n      border-top-color: transparent;\n      + .arthur-accordion-item {\n        border-top-color: transparent;\n      }\n    }\n\n    &.active.expanded {\n      border-top-color: transparent;\n      + .arthur-accordion-item {\n        border-top-color: ${(props) => props.theme.token.color.black};\n      }\n    }\n\n    & .accordion-header.active {\n      border-color: ${(props) => props.theme.token.color.palette.gold.base};\n    }\n  `,\n\n  boxed: css`\n    border: 1px solid ${(props) => props.theme.token.color.black};\n    margin-bottom: 12px;\n\n    &.active {\n      border-color: ${(props) => props.theme.token.color.palette.gold.base};\n    }\n  `,\n  numbered: css`\n    counter-increment: number;\n    border-top: 1px solid ${(props) => props.theme.token.color.black};\n    margin-top: 0px;\n\n    &:last-child {\n      border-bottom: 1px solid ${(props) => props.theme.token.color.black};\n    }\n\n    &:last-child.active {\n      border-bottom-color: transparent;\n    }\n\n    &:last-child.active.expanded {\n      border-bottom-color: ${(props) => props.theme.token.color.black};\n    }\n\n    &.active {\n      border-top-color: transparent;\n      + .arthur-accordion-item {\n        border-top-color: transparent;\n      }\n    }\n\n    &.active.expanded {\n      border-top-color: transparent;\n      + .arthur-accordion-item {\n        border-top-color: ${(props) => props.theme.token.color.black};\n      }\n    }\n\n    & .accordion-header.active {\n      border-color: ${(props) => props.theme.token.color.palette.gold.base};\n    }\n  `,\n};\n\nconst StyledRoot = styled.div<{\n  variant: AccordionVariant;\n  ref: React.ForwardedRef<unknown>;\n}>`\n  ${(props) => AccordionVariantStyles[props.variant]}\n  &:focus-within,\n  \n  &.disabled {\n    border-color: ${(props) => props.theme.token.color.action.text.primary.disabled};\n    color: ${(props) => props.theme.token.color.action.text.primary.disabled};\n\n    & .accordion-header {\n      color: ${(props) => props.theme.token.color.action.text.primary.disabled};\n      cursor: default;\n    }\n\n    &:focus-within,\n    &:active,\n    &:hover {\n      background-color: transparent;\n      border-color: ${(props) => props.theme.token.color.action.text.primary.disabled};\n      outline: 0px none;\n\n      & .arthur-accordion-item-body {\n        background-color: transparent;\n      }\n    }\n  }\n\n  ${(props) => AccordionVariantStyles[props.variant]}\n`;\n\nconst StyledInnerDetails = styled.div<{\n  size: AccordionSize;\n}>`\n  padding: 0 12px 12px 12px;\n  ${(props) => AccordionSizeStyles[props.size]}\n`;\n\nconst StyledDetails = styled.div<{\n  ref: React.ForwardedRef<unknown>;\n  expanded: number;\n}>`\n  overflow: hidden;\n  overflow-y: scroll;\n  max-height: ${(props) => (props.expanded === 1 ? '500px' : 0)};\n  &.disabled {\n    color: ${(props) => props.theme.token.color.action.text.primary.disabled};\n    cursor: default;\n  }\n`;\n\nconst StyledHeader = styled.div<{\n  variant: AccordionVariant;\n  size: AccordionSize;\n}>`\n  grid-template-columns: ${(props) => (props.variant === 'numbered' ? '24px 1fr 30px' : '1fr 30px')};\n  display: grid;\n  padding: ${(props) => props.theme.token.size.spacing[props.size]};\n  border: 2px solid transparent;\n  &::before {\n    content: ${(props) => (props.variant === 'numbered' ? 'counters(number, \".\", decimal-leading-zero)' : '')};\n  }\n\n  &.disabled {\n    color: ${(props) => props.theme.token.color.action.text.primary.disabled};\n    cursor: default;\n  }\n\n  &:hover {\n    background-color: ${(props) => props.theme.token.color.palette.gray[10]};\n  }\n  ${(props) => AccordionSizeStyles[props.size]}\n`;\n\nexport const AccordionItem = forwardRef(\n  ({ title, children, id, disabled }: PropsWithChildren<AccordionItemProps>, forwardedRef) => {\n    const accordionContext = useContext(AccordionContext);\n    const size = accordionContext?.size || AccordionSizeEnum.medium;\n    const variant = accordionContext?.variant || AccordionVariantsEnum.default;\n    const onChange = accordionContext?.onChange;\n    const expandedItems = accordionContext?.expandedItems;\n    const onHeaderClick = accordionContext?.onHeaderClick;\n    const activeItem = accordionContext?.activeItem;\n\n    const expanded = expandedItems?.includes(id);\n\n    const classes = classnames('arthur-accordion-item', { active: id === activeItem, expanded });\n\n    const detailsClasses = classnames('accordion-details', { disabled, expanded });\n\n    const headerClasses = classnames('accordion-header', { disabled, active: id === activeItem });\n\n    const handleClick = useCallback(\n      (event: React.MouseEvent) => {\n        if (disabled) return;\n\n        onChange?.(event, id);\n      },\n      [disabled, id, onChange],\n    );\n\n    const handleHeaderClick = useCallback(() => {\n      onHeaderClick?.(id);\n    }, [id, onHeaderClick]);\n\n    return (\n      <StyledRoot className={classes} onClick={handleClick} ref={forwardedRef} variant={variant}>\n        <StyledHeader className={headerClasses} onClick={handleHeaderClick} size={size} variant={variant}>\n          {title}\n          <Icon value='add' />\n        </StyledHeader>\n        <StyledDetails className={detailsClasses} expanded={expanded ? 1 : 0} ref={forwardedRef}>\n          <StyledInnerDetails size={size}>{children}</StyledInnerDetails>\n        </StyledDetails>\n      </StyledRoot>\n    );\n  },\n);\n\nAccordionItem.displayName = 'AccordionItem';\n","import React, { forwardRef, useCallback } from 'react';\nimport styled, { css } from 'styled-components';\nimport classNames from 'classnames';\nimport { type IconValue, type IconSizes, IconSizesEnum } from './types';\nimport { ICON_VALUES } from './constants';\n\nexport interface IconProps {\n    className?: string;\n    /**\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * @default medium\n     */\n    size?: IconSizes;\n    onClick?: (event: React.MouseEvent<HTMLSpanElement>) => unknown;\n    value: IconValue;\n}\n\nconst iconSizeStyles = {\n    'small-1x': css`\n        font-size: ${(props) => props.theme.token.size.font['small-1x']};\n    `,\n    small: css`\n        font-size: ${(props) => props.theme.token.size.font.small};\n    `,\n    medium: css`\n        font-size: ${(props) => props.theme.token.size.font.medium};\n    `,\n    large: css`\n        font-size: ${(props) => props.theme.token.size.font.large};\n    `,\n};\n\nconst StyledRoot = styled.span<{ disabled?: boolean }>`\n    background-color: transparent;\n    border: 0px none;\n    outline: 0px none;\n    padding: 0px;\n\n    &:not(.arthur-icon--disabled) {\n        &.arthur-icon--clickable {\n            &:hover,\n            &:focus,\n            &:active {\n                color: ${(props) => props.theme.token.color.palette.gold.base};\n                cursor: pointer;\n                outline: 0px none;\n            }\n        }\n    }\n\n    &.arthur-icon--disabled {\n        color: ${(props) => props.theme.token.color.action.text.primary.disabled};\n        cursor: default;\n    }\n`;\n\nconst StyledIcon = styled.i<{ size: IconSizes }>`\n    ${(props) => iconSizeStyles[props.size]}\n`;\n\nconst Icon = forwardRef<HTMLSpanElement | HTMLButtonElement, IconProps>((props, forwardedRef) => {\n    const { className, disabled, size = 'medium', value, onClick, ...rest } = props;\n\n    const iconClass = ICON_VALUES[value];\n\n    if (!IconSizesEnum[size]) {\n        throw new Error(`icon: invalid size \"${size}\"`);\n    }\n\n    const isClickable = disabled === true || typeof onClick === 'function';\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLSpanElement>) => {\n            if (disabled) return;\n\n            onClick?.(event);\n        },\n        [disabled, onClick],\n    );\n\n    const classes = {\n        root: classNames(className, 'arthur-icon', `arthur-icon--size-${size}`, {\n            'arthur-icon--clickable': isClickable,\n            'arthur-icon--disabled': disabled === true,\n        }),\n        regular: classNames('arthur-icon-regular', 'fa-regular', {\n            'fa-foobar': Boolean(iconClass) && Boolean(value),\n            [iconClass]: Boolean(iconClass),\n            [value as string]: Boolean(iconClass) && Boolean(value),\n        }),\n    };\n\n    // The wrapping span is needed because an error is thrown if one attempts\n    // to remove this from the dom once it is rendered. This is because the \"rendered\"\n    // node is the <i /> element, but a sibling <svg /> element is created as well.\n    // Without the wrapper and in the case that the element is added and removed again,\n    // React throws.\n    return (\n        <StyledRoot\n            as={isClickable ? 'button' : 'span'}\n            className={classes.root}\n            disabled={disabled}\n            onClick={handleClick}\n            ref={forwardedRef}\n        >\n            <StyledIcon className={classes.regular} size={size} {...rest} />\n        </StyledRoot>\n    );\n});\n\nexport default Icon;\n\nIcon.displayName = 'Icon';\n"],"names":[],"sourceRoot":""}