{"version":3,"file":"breadcrumbs-Breadcrumbs-stories.0f394a24.iframe.bundle.js","mappings":";;;AAWA;AACA;;;;AAIA;;AAGA;;AAEA;AACA;;;;AAIA;;AAGA;;AAEA;AACA;;;;AAIA;;AAKA;;AAGA;;;AAIA;;AAEA;;;;;;;;;AASA;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;AACA;AAaA;ACnHA;AAEA;AACA;AAEA;AACA;AAWA;;AAGA;;AAGA;;AAEA;;AAKA;AACA;;;;;;;;AAQA;;;;;AAKA;;;;AAIA;;;;;;;AAOA;AACA;;;;AAIA;AACA;;;;;;;;;;AA2CA","sources":["webpack://@arthur/docs/../../packages/arthur-ui/src/Breadcrumbs/Breadcrumbs.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/Link/Link.tsx"],"sourcesContent":["// istanbul ignore file: it is difficult to test resize events that trigger the ToggleIcon and Picker\nimport type { PropsWithChildren } from 'react';\nimport React, { Children, forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport classNames from 'classnames';\nimport type { BreadcrumbsSize, BreadcrumbsVariant } from './types';\nimport { BreadcrumbsSizeEnum, BreadcrumbsVariantEnum } from './types';\n\nconst sizeStyles = {\n  small: css`\n    & .arthur-breadcrumbs-spacer {\n      font-size: ${(props) => props.theme.token.size.font.small};\n      padding: 0px ${(props) => props.theme.token.size.spacing['small-1x']};\n    }\n\n    & .arthur-breadcrumbs-item {\n      font-size: ${(props) => props.theme.token.size.font.small};\n    }\n  `,\n  medium: css`\n    & .arthur-breadcrumbs-spacer {\n      font-size: ${(props) => props.theme.token.size.font.medium};\n      padding: 0px ${(props) => props.theme.token.size.spacing.small};\n    }\n\n    & .arthur-breadcrumbs-item {\n      font-size: ${(props) => props.theme.token.size.font.medium};\n    }\n  `,\n  large: css`\n    & .arthur-breadcrumbs-spacer {\n      font-size: ${(props) => props.theme.token.size.font.medium};\n      padding: 0px ${(props) => props.theme.token.size.spacing.small};\n    }\n\n    & .arthur-breadcrumbs-item {\n      font-size: ${(props) => props.theme.token.size.font.medium};\n    }\n  `,\n};\n\nconst variantStyles = {\n  default: css`\n    & .arthur-breadcrumbs-item {\n      color: ${(props) => props.theme.token.color.black};\n      cursor: default;\n    }\n  `,\n  link: css`\n    & .arthur-breadcrumbs-item {\n      color: ${(props) => props.theme.token.color.palette.gray[50]};\n\n      &:hover {\n        text-decoration: none;\n      }\n    }\n\n    & .arthur-breadcrumbs-items-right {\n      & .arthur-breadcrumbs-item {\n        color: ${(props) => props.theme.token.color.black};\n        text-decoration: underline;\n      }\n    }\n  `,\n};\n\nconst StyledRoot = styled.nav<{ size: BreadcrumbsSize; variant: BreadcrumbsVariant }>`\n  display: flex;\n\n  & .arthur-breadcrumbs-items {\n    position: relative;\n\n    &.arthur-breadcrumbs-items-left {\n      display: flex;\n      overflow: hidden;\n    }\n\n    &.arthur-breadcrumbs-items-right {\n      display: flex;\n      flex: 1;\n    }\n  }\n\n  & .arthur-breadcrumbs-item {\n    position: relative;\n    white-space: nowrap;\n\n    &.arthur-breadcrumbs-item--disabled {\n      cursor: default;\n    }\n\n    &.arthur-breadcrumbs-item--collapsed {\n      & .arthur-breadcrumbs-item-inner {\n        opacity: 0;\n      }\n    }\n  }\n\n  & .arthur-breadcrumbs-spacer {\n    &.arthur-breadcrumbs-spacer--collapsed {\n      opacity: 0;\n    }\n  }\n\n  & .arthur-breadcrumbs-toggle {\n    position: absolute;\n    top: calc(50% - 6px);\n    width: 12px;\n    z-index: 999;\n  }\n\n  ${(props) => sizeStyles[props.size]}\n  ${(props) => variantStyles[props.variant]}\n`;\n\nexport interface BreadcrumbsProps {\n  divider?: string;\n  className?: string;\n  disabled?: boolean;\n  // renderer?: (item: BreadcrumbsItem, index: number, items: BreadcrumbsItem[]) => ArthurNode;\n  // onItemClick?: (item: BreadcrumbsItem, meta: EventMeta) => void;\n  size?: BreadcrumbsSize;\n  variant?: BreadcrumbsVariant;\n}\n\nconst Breadcrumbs = forwardRef<HTMLDivElement, PropsWithChildren<BreadcrumbsProps>>((props, _forwardedRef) => {\n  const {\n    className,\n    disabled = false,\n    divider = '/',\n    children,\n    size = BreadcrumbsSizeEnum.medium,\n    variant = BreadcrumbsVariantEnum.default,\n    ...rest\n  } = props;\n\n  const classes = classNames(\n    className,\n    'arthur-breadcrumbs',\n    `arthur-breadcrumbs--size-${size}`,\n    `arthur-breadcrumbs--variant-${variant}`,\n    {\n      'arthur-breadcrumbs--disabled': disabled,\n    },\n  );\n\n  return (\n    <StyledRoot className={classes} size={size} variant={variant} {...rest}>\n      {Children.map(children, (child, idx) => {\n        const dividerEl = idx > 0 ? <span className='arthur-breadcrumbs-spacer'>{divider}</span> : '';\n        return (\n          <div>\n            {dividerEl}\n            {child}\n          </div>\n        );\n      })}\n    </StyledRoot>\n  );\n});\n\nexport default Breadcrumbs;\nBreadcrumbs.displayName = 'Breadcrumbs';\n","import type { PropsWithChildren } from 'react';\nimport React, { forwardRef, useCallback } from 'react';\nimport styled, { css } from 'styled-components';\nimport classNames from 'classnames';\nimport { useEnsureRef } from '../hook';\nimport type { LinkSize, LinkVariant } from './types';\nimport { LinkSizeEnum, LinkVariantEnum } from './types';\n\nconst linkStyles = {\n    small: css`\n        font-size: ${(props) => props.theme.token.size.font.small};\n    `,\n    medium: css`\n        font-size: ${(props) => props.theme.token.size.font.medium};\n    `,\n    large: css`\n        font-size: ${(props) => props.theme.token.size.font.large};\n    `,\n};\n\nconst LINK_TARGET = {\n    _self: true,\n    _blank: true,\n    _parent: true,\n    _top: true,\n};\n\nconst variantStyles = {\n    default: css`\n        &:active {\n            color: ${(props) => props.theme.token.color.black};\n        }\n    `,\n    secondary: css`\n        &:active {\n            color: ${(props) => props.theme.token.color.white};\n        }\n    `,\n};\n\nconst StyledRoot = styled.a<{ variant: LinkVariant; size: LinkSize }>`\n    color: ${(props) => props.theme.token.color.palette.blue.base};\n    text-decoration: none;\n\n    &:active {\n        text-decoration: underline;\n    }\n\n    &:hover {\n        color: ${(props) => props.theme.token.color.palette.blue.darker};\n        text-decoration: underline;\n    }\n\n    &:visited {\n        color: ${(props) => props.theme.token.color.palette.purple.base};\n    }\n\n    &.arthur-link--disabled {\n        color: ${(props) => props.theme.token.color.palette.gray[20]};\n    }\n\n    &.arthur-link--inline {\n        text-decoration: underline;\n    }\n\n    ${(props) => linkStyles[props.size]}\n    ${(props) => variantStyles[props.variant]} {\n        /* HACK: HANDLES TOKENS FOR CHILD ICONS */\n    }\n    & .arthur-icon {\n        margin-left: ${(props) => props.theme.token.size.spacing[props.size === 'large' ? 'small' : 'small-1x']};\n        margin-right: ${(props) => props.theme.token.size.spacing[props.size === 'large' ? 'small' : 'small-1x']};\n\n        &:first-child {\n            margin-left: 0px;\n        }\n\n        &:last-child {\n            margin-right: 0px;\n        }\n    }\n`;\n\n/**\n * Enumerates the pre-defined target attributes for Link components.\n */\nexport type LinkTarget = keyof typeof LINK_TARGET;\n\nexport interface LinkProps {\n    /**\n     * @default #\n     */\n    href?: string;\n    className?: string;\n    /**\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * @default false\n     */\n    inline?: boolean;\n    target?: LinkTarget;\n    /**\n     * @default default\n     */\n    variant?: LinkVariant;\n    /**\n     * @default medium\n     */\n    size?: LinkSize;\n    onClick?: (event: React.MouseEvent<HTMLAnchorElement>) => void;\n}\n\nconst Link = forwardRef<HTMLAnchorElement, PropsWithChildren<LinkProps>>((props, forwardedRef) => {\n    const {\n        children,\n        className,\n        disabled,\n        href,\n        inline = false,\n        size = LinkSizeEnum.medium,\n        target,\n        variant = LinkVariantEnum.default,\n        onClick,\n        ...rest\n    } = props;\n\n    const targetRef = useEnsureRef(forwardedRef);\n\n    const classes = classNames(\n        className,\n        'arthur-link',\n        `arthur-link--size-${size}`,\n        `arthur-link--variant-${variant}`,\n        {\n            'arthur-link--disabled': disabled === true,\n            'arthur-link--inline': inline,\n        },\n    );\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLAnchorElement>) => {\n            if (disabled === true || href === undefined) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n\n            if (disabled !== true) {\n                onClick?.(event);\n            }\n        },\n        [disabled, onClick],\n    );\n\n    return (\n        <StyledRoot\n            className={classes}\n            href={href || '#'}\n            onClick={handleClick}\n            ref={targetRef}\n            rel={target === '_blank' ? 'noopener noreferrer' : undefined}\n            role='link'\n            size={size}\n            target={target}\n            variant={variant}\n            {...rest}\n        >\n            {children}\n        </StyledRoot>\n    );\n});\n\nexport default Link;\nLink.displayName = 'Link';\n"],"names":[],"sourceRoot":""}