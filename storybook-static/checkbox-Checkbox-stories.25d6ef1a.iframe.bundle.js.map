{"version":3,"file":"checkbox-Checkbox-stories.25d6ef1a.iframe.bundle.js","mappings":";;;;AAwBA;;;;;;;;;;;;;;;;;;;;;;;AAyBA;AACA;AACA;;;;;AAKA;AACA;;;;;;;AAOA;;;AAGA;;;;;;;;;;;;AAYA;AACA;;;;;AAKA;AACA;;;;;;AAMA;;;;AAIA;;;;;;;;;;;;AA8CA;;AChIA;;AAKA;;;AAGA;AA0CA;AC1BA;;AAEA;AAEA;AACA;;AAEA;AAEA;AACA;;AAEA;AAIA;AAEA;AACA;;;AAGA;;;;AAIA;AACA;AACA;;AAGA;AACA;AACA;;;AAGA;;;;AAIA;AACA;AACA;;AAGA;;AAEA;AACA;;;AAGA;;;;;AAKA;AACA;AACA;;;;;AAKA;;AAGA;AACA;AACA;;;AAGA;;;;AAIA;AACA;AACA;;AAKA;;AAOA;AACA;;;;;AAKA;AACA;;;AAGA;AACA;;;;AAIA;AACA;;;;;;;;;;AAYA;ACjJA;;;AAGA;;;;;AAKA;;;;AAIA;;;AAIA;AACA;;;AAGA;;;;;AAKA;;;;AAIA;;;AAMA;AACA;AACA;;;AAGA;;;;AAIA;;;;AAIA;AACA;;;;AAIA;AACA;AACA;;;AAGA;;;;;;;;AAQA;;;AAGA;;;;AAIA;;;;AAIA;AA0BA;AC3FA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;;;;;;;;;;;AAWA;;;;;;;;AAQA;;;AAKA;AACA;AAGA","sources":["webpack://@arthur/docs/../../packages/arthur-ui/src/Checkbox/Checkbox.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/CheckboxGroup/CheckboxGroup.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/Button/Button.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/FormField/FormField.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/Icon/Icon.tsx"],"sourcesContent":["import type { Ref } from 'react';\nimport React, { forwardRef, useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport { styled, type CSSProp } from 'styled-components';\nimport classnames from 'classnames';\nimport type tokens from '@arthur/design-tokens';\nimport Icon from '../Icon';\nimport { CheckboxGroupContext } from '../CheckboxGroup/CheckboxGroupContext';\nimport { useCombineRefs } from '../util';\n\ntype TokenType = typeof tokens;\n\ndeclare module 'styled-components' {\n  export interface DefaultTheme extends TokenType {}\n}\n\ndeclare module 'react' {\n  interface DOMAttributes<T> {\n    css?: CSSProp;\n  }\n}\n\nconst StyledRoot = styled.span`\n  align-items: center;\n  display: flex;\n  padding: ${(props) => {\n    return props.theme.token.size.spacing['small-2x'];\n  }};\n\n  position: relative;\n\n  & .arthur-checkbox-input {\n    appearance: none;\n    box-sizing: border-box;\n    height: 16.5px;\n    margin: 0px;\n    position: absolute;\n    outline: 0px none;\n    width: 16.5px;\n\n    /*** THIS COMBATS LACK OF SPECIFICITY IN CONSUMING APPS' CSS ***/\n    border: inherit;\n    background-color: inherit;\n  }\n\n  & .arthur-checkbox-button {\n    height: 16px;\n    width: 16px;\n    border-radius: 0px;\n    background-color: transparent;\n    border: 1px solid ${(props) => props.theme.token.color.palette.gray[75]};\n    border-radius: ${(props) => props.theme.token.radius.border.basic};\n    margin-right: ${(props) => props.theme.token.size.spacing['small-1x']};\n    padding: 0px;\n\n    &:focus,\n    &:active {\n      outline: ${(props) => props.theme.token.size.border.medium} solid\n        ${(props) => props.theme.token.color.palette.gold.base};\n    }\n  }\n\n  &.arthur-checkbox--checked,\n  &.arthur-checkbox--indeterminate {\n    & .arthur-checkbox-button {\n      background-color: ${(props) => props.theme.token.color.palette.gray[75]};\n\n      & .arthur-icon {\n        color: ${(props) => props.theme.token.color.white};\n        top: -1px;\n        position: relative;\n      }\n    }\n  }\n\n  &:has(.arthur-checkbox-input:focus),\n  &:has(.arthur-checkbox-input:active),\n  &:has(.arthur-checkbox-label:focus),\n  &:has(.arthur-checkbox-label:active) {\n    & .arthur-checkbox-button {\n      outline: ${(props) => props.theme.token.size.border.medium} solid\n        ${(props) => props.theme.token.color.palette.gold.base};\n    }\n  }\n\n  & .arthur-checkbox-label {\n    color: ${(props) => props.theme.token.color.palette.gray[75]};\n    font-size: ${(props) => props.theme.token.size.font.medium};\n    user-select: none;\n  }\n\n  &.arthur-checkbox--disabled {\n    & .arthur-checkbox-button {\n      border-color: ${(props) => props.theme.token.color.action.text.primary.disabled};\n    }\n\n    & .arthur-checkbox-label {\n      color: ${(props) => props.theme.token.color.action.text.primary.disabled};\n    }\n\n    &:has(.arthur-checkbox-input:focus),\n    &:has(.arthur-checkbox-input:active),\n    &:has(.arthur-checkbox-label:focus),\n    &:has(.arthur-checkbox-label:active) {\n      & .arthur-checkbox-button {\n        outline: 0px none;\n      }\n    }\n  }\n`;\n\nexport interface CheckboxProps {\n  /**\n   * Sets the value for a controlled checkbox\n   *\n   * @default false\n   */\n  checked?: boolean;\n  /**\n   * Sets the initial value for an uncontrolled checkbox\n   *\n   * @default false\n   */\n  defaultChecked?: boolean;\n  className?: string;\n  indeterminate?: boolean;\n  /**\n   * @default false\n   */\n  disabled?: boolean;\n  label: string;\n  value: string;\n  inputRef?: Ref<Element>;\n  /**\n   * @default false\n   */\n  required?: boolean;\n  onChange?: (\n    event: React.ChangeEvent<HTMLInputElement> | React.MouseEvent<HTMLButtonElement>,\n    checked?: boolean,\n  ) => void;\n}\n\nconst Checkbox = forwardRef<HTMLInputElement, CheckboxProps>((props, forwardedRef) => {\n  const {\n    checked: checkedProp,\n    defaultChecked,\n    className,\n    disabled: disabledProp,\n    inputRef,\n    label,\n    indeterminate,\n    value,\n    onChange,\n    required,\n  } = props;\n\n  const internalCheckboxRef = useRef<HTMLInputElement>(null);\n  const combinedCheckboxRef = useCombineRefs([inputRef, internalCheckboxRef]);\n  const groupContext = useContext(CheckboxGroupContext);\n  const contextOnChange = groupContext?.onChange;\n  const disabled = groupContext?.disabled || disabledProp;\n  const contextValue = groupContext?.value;\n  const isInGroup = Boolean(groupContext);\n  const isCheckedControlled = checkedProp !== undefined || isInGroup;\n  const [internalChecked, setInternalChecked] = useState<boolean | undefined>(defaultChecked);\n  const checked =\n    (isInGroup\n      ? typeof value === 'string' && Array.isArray(contextValue) && contextValue.includes(value)\n      : checkedProp) ?? internalChecked;\n\n  const inputOnChange = useCallback<NonNullable<React.InputHTMLAttributes<HTMLInputElement>['onChange']>>(\n    (event) => {\n      const newChecked = event.target.checked;\n\n      if (!isCheckedControlled) setInternalChecked(newChecked);\n\n      onChange?.(event, newChecked);\n      contextOnChange?.(event);\n    },\n    [contextOnChange, isCheckedControlled, onChange],\n  );\n\n  // Update the indeterminate property when it changes\n  useEffect(() => {\n    if (internalCheckboxRef.current && indeterminate !== undefined) {\n      internalCheckboxRef.current.indeterminate = indeterminate;\n    }\n  }, [indeterminate]);\n\n  const classes = classnames(className, 'arthur-checkbox', {\n    'arthur-checkbox--unchecked': checked === false,\n    'arthur-checkbox--checked': checked === true,\n    'arthur-checkbox--indeterminate': indeterminate === true,\n    'arthur-checkbox--disabled': disabled === true,\n  });\n\n  return (\n    <StyledRoot as={label ? 'label' : 'span'} className={classes} ref={forwardedRef}>\n      <input\n        aria-checked={checked}\n        checked={checked}\n        className='arthur-checkbox-input'\n        disabled={disabled}\n        onChange={inputOnChange}\n        ref={combinedCheckboxRef}\n        required={required}\n        type='checkbox'\n        value={value}\n      />\n      <button className='arthur-checkbox-button' tabIndex={-1} type='button'>\n        {checked ? <Icon value='check' /> : null}\n        {indeterminate ? <Icon value='hyphen' /> : null}\n      </button>\n      {label}\n    </StyledRoot>\n  );\n});\n\nexport default Checkbox;\nCheckbox.displayName = 'Checkbox';\n","import type { PropsWithChildren } from 'react';\nimport React, { forwardRef, useCallback, useMemo, useState } from 'react';\nimport { css, styled } from 'styled-components';\nimport classNames from 'classnames';\nimport FormField from '../FormField';\nimport type { CheckboxLayouts } from './types';\nimport { CheckboxLayoutsEnum } from './types';\nimport type { CheckboxGroupContextProps } from './CheckboxGroupContext';\nimport { CheckboxGroupContext } from './CheckboxGroupContext';\n\nconst layoutStyles = {\n    vertical: css`\n        flex-direction: column;\n    `,\n    horizontal: css`\n        flex-direction: row;\n    `,\n};\n\nconst StyledRoot = styled.div<{ layout: CheckboxLayouts }>`\n    display: flex;\n\n    ${(props) => layoutStyles[props.layout]}\n`;\n\nexport interface CheckboxGroupProps {\n    /**\n     * Determines the visual layout\n     *\n     * @default vertical\n     */\n    layout?: CheckboxLayouts;\n    indeterminate?: boolean;\n    className?: string;\n    /**\n     * @default false\n     */\n    disabled?: boolean;\n    label?: string;\n    onChange?: (newValue: string[]) => void;\n    /**\n     * @default false\n     */\n    checked?: boolean;\n    /**\n     * Sets the value for a controlled checkbox group\n     *\n     * @default []\n     */\n    value?: string[];\n    /**\n     * Sets the initial value for an uncontrolled checkbox\n     *\n     * @default []\n     */\n    defaultValue?: string[];\n    /**\n     * If true, this will add a red * to your label\n     *\n     * @default false\n     */\n    required?: boolean;\n}\n\nconst CheckboxGroup = forwardRef<HTMLDivElement, PropsWithChildren<CheckboxGroupProps>>((props, forwardedRef) => {\n    const {\n        children,\n        className,\n        disabled,\n        defaultValue = [],\n        label,\n        layout = CheckboxLayoutsEnum.vertical,\n        onChange: onChangeProp,\n        value: valueProp,\n        required,\n    } = props;\n\n    const isValueControlled = valueProp !== undefined;\n\n    const [internalValue, setInternalValue] = useState<CheckboxGroupContextProps['value']>(defaultValue);\n\n    const value = valueProp || internalValue;\n\n    const onChange = useCallback<CheckboxGroupContextProps['onChange']>(\n        (ev) => {\n            const newValue = value.filter((v) => v !== ev.target.value);\n\n            if (ev.target.checked) newValue.push(ev.target.value);\n\n            if (!isValueControlled) setInternalValue(newValue);\n\n            onChangeProp?.(newValue);\n        },\n        [isValueControlled, onChangeProp, value],\n    );\n\n    // Context\n    const groupContext = useMemo<CheckboxGroupContextProps>(\n        () => ({ disabled, onChange, value }),\n        [disabled, onChange, value],\n    );\n\n    const classes = classNames(className, 'arthur-checkboxgroup', `arthur-checkboxgroup--layout-${layout}`, {\n        'arthur-checkboxgroup--disabled': disabled === true,\n    });\n\n    return (\n        <FormField disabled={disabled} label={label} ref={forwardedRef} required={required}>\n            <CheckboxGroupContext.Provider value={groupContext}>\n                <StyledRoot className={classes} layout={layout} ref={forwardedRef}>\n                    {children}\n                </StyledRoot>\n            </CheckboxGroupContext.Provider>\n        </FormField>\n    );\n});\n\nexport default CheckboxGroup;\nCheckboxGroup.displayName = 'CheckboxGroup';\n","import type { PropsWithChildren } from 'react';\nimport React, { forwardRef, useCallback } from 'react';\nimport styled, { css } from 'styled-components';\nimport classNames from 'classnames';\nimport {\n  ButtonSizesEnum,\n  type ButtonSizes,\n  type ButtonTypes,\n  type ButtonVariants,\n  ButtonTypesEnum,\n  ButtonVariantsEnum,\n} from './types';\n\nexport interface ButtonProps {\n  className?: string;\n  /**\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * @default medium\n   */\n  size?: ButtonSizes;\n  /**\n   * @default default\n   */\n  variant?: ButtonVariants;\n  onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  formId?: string;\n  name?: string;\n  /**\n   * @default button\n   */\n  type?: ButtonTypes;\n}\n\nconst buttonSizeStyles = {\n  small: css`\n    font-size: ${(props) => props.theme.token.size.font.small};\n    height: 30px;\n    padding: 0px ${(props) => props.theme.token.size.spacing.small};\n  `,\n  medium: css`\n    font-size: ${(props) => props.theme.token.size.font.medium};\n    height: 40px;\n    padding: 0px ${(props) => props.theme.token.size.spacing.medium};\n  `,\n  large: css`\n    font-size: ${(props) => props.theme.token.size.font.large};\n    height: 50px;\n    padding: 0px ${(props) => props.theme.token.size.spacing.medium};\n  `,\n};\n\nconst buttonVariantStyles = {\n  default: css`\n    background-color: ${(props) => props.theme.token.color.palette.gold.base};\n    color: ${(props) => props.theme.token.color.black};\n\n    &:not(.arthur-button--disabled):hover {\n      background-color: ${(props) => props.theme.token.color.palette.gold.lighter};\n    }\n\n    &:not(.arthur-button--disabled):active {\n      background-color: ${(props) => props.theme.token.color.palette.gold.darker};\n      box-shadow: inset 0 0 0 1px ${(props) => props.theme.token.color.palette.gold.darker},\n        inset 0 0 0 2px ${(props) => props.theme.token.color.white};\n    }\n  `,\n  secondary: css`\n    background-color: ${(props) => props.theme.token.color.palette.gray[80]};\n    color: ${(props) => props.theme.token.color.white};\n\n    &:not(.arthur-button--disabled):hover {\n      background-color: ${(props) => props.theme.token.color.palette.gray[70]};\n    }\n\n    &:not(.arthur-button--disabled):active {\n      background-color: ${(props) => props.theme.token.color.palette.gray[60]};\n      box-shadow: inset 0 0 0 1px ${(props) => props.theme.token.color.palette.gray[60]},\n        inset 0 0 0 2px ${(props) => props.theme.token.color.white};\n    }\n  `,\n  tertiary: css`\n    background-color: transparent;\n    box-shadow: inset 0 0 0 2px ${(props) => props.theme.token.color.palette.gold.base};\n    color: ${(props) => props.theme.token.color.black};\n\n    &:not(.arthur-button--disabled):hover {\n      background-color: ${(props) => props.theme.token.color.palette.gold.lighter};\n      box-shadow: none;\n    }\n\n    &:not(.arthur-button--disabled):active {\n      background-color: ${(props) => props.theme.token.color.palette.gold.darker};\n      box-shadow: inset 0 0 0 1px ${(props) => props.theme.token.color.palette.gold.darker},\n        inset 0 0 0 2px ${(props) => props.theme.token.color.white};\n    }\n\n    &.arthur-button--disabled {\n      background-color: transparent;\n      box-shadow: inset 0 0 0 2px ${(props) => props.theme.token.color.palette.gray[20]};\n    }\n  `,\n  danger: css`\n    background-color: ${(props) => props.theme.token.color.palette.red.base};\n    color: ${(props) => props.theme.token.color.white};\n\n    &:not(.arthur-button--disabled):hover {\n      background-color: ${(props) => props.theme.token.color.palette.red.darker};\n    }\n\n    &:not(.arthur-button--disabled):active {\n      background-color: ${(props) => props.theme.token.color.palette.red.darkest};\n      box-shadow: inset 0 0 0 1px ${(props) => props.theme.token.color.palette.red.darkest},\n        inset 0 0 0 2px ${(props) => props.theme.token.color.white};\n    }\n  `,\n};\n\nconst StyledRoot = styled.button<{\n  variant: ButtonVariants;\n  size: ButtonSizes;\n  type: ButtonTypes;\n  ref: React.ForwardedRef<unknown>;\n}>`\n  border: none;\n  border-radius: ${(props) => props.theme.token.radius.border.pill};\n  font-weight: ${(props) => props.theme.token.weight.font.regular};\n  min-width: 140px;\n  outline: none;\n\n  &.arthur-button--disabled {\n    background-color: ${(props) => props.theme.token.color.palette.gray[20]};\n    color: ${(props) => props.theme.token.color.palette.gray[40]};\n  }\n\n  ${(props) => buttonSizeStyles[props.size]}\n  ${(props) => buttonVariantStyles[props.variant]} {\n    /* HACK: HANDLES TOKENS FOR CHILD ICONS */\n  }\n  & .arthur-icon {\n    margin-left: ${(props) => props.theme.token.size.spacing[props.size === 'large' ? 'small' : 'small-1x']};\n    margin-right: ${(props) => props.theme.token.size.spacing[props.size === 'large' ? 'small' : 'small-1x']};\n\n    &:first-child {\n      margin-left: 0px;\n    }\n\n    &:last-child {\n      margin-right: 0px;\n    }\n  }\n`;\n\nconst Button = forwardRef((props: PropsWithChildren<ButtonProps>, forwardedRef) => {\n  const {\n    children,\n    className,\n    disabled = false,\n    size = ButtonSizesEnum.medium,\n    type = ButtonTypesEnum.button,\n    variant = ButtonVariantsEnum.default,\n    onClick,\n    ...rest\n  } = props;\n\n  const classes = classNames(\n    className,\n    'arthur-button',\n    `arthur-button--size-${size}`,\n    `arthur-button--variant-${variant}`,\n    {\n      'arthur-button--disabled': disabled,\n    },\n  );\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLButtonElement>) => {\n      onClick?.(event);\n    },\n    [onClick],\n  );\n\n  return (\n    <StyledRoot\n      className={classes}\n      disabled={disabled}\n      onClick={handleClick}\n      ref={forwardedRef}\n      role='button'\n      size={size}\n      type={type}\n      variant={variant}\n      {...rest}\n    >\n      {children}\n    </StyledRoot>\n  );\n});\n\nexport default Button;\n\nButton.displayName = 'Button';\n","import type { PropsWithChildren } from 'react';\nimport React, { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport classNames from 'classnames';\nimport { useEnsureId } from '../hook';\nimport type { FormFieldSize } from './types';\nimport { FormFieldSizeEnum } from './types';\n\nconst sizeStyles = {\n    small: css`\n        font-size: ${(props) => props.theme.token.size.font.small};\n\n        & .arthur-field-header-label {\n            font-size: ${(props) => props.theme.token.size.font.small};\n        }\n\n        & .arthur-field-footer {\n            & .arthur-field-footer-info {\n                font-size: ${(props) => props.theme.token.size.font.small};\n            }\n\n            & .arthur-field-footer-error {\n                font-size: ${(props) => props.theme.token.size.font.small};\n            }\n        }\n    `,\n    medium: css`\n        font-size: ${(props) => props.theme.token.size.font.medium};\n\n        & .arthur-field-header-label {\n            font-size: ${(props) => props.theme.token.size.font.medium};\n        }\n\n        & .arthur-field-footer {\n            & .arthur-field-footer-info {\n                font-size: ${(props) => props.theme.token.size.font.medium};\n            }\n\n            & .arthur-field-footer-error {\n                font-size: ${(props) => props.theme.token.size.font.medium};\n            }\n        }\n    `,\n};\n\nconst StyledRoot = styled.div<{ size: FormFieldSize; $showInfoText: boolean; $showErrorText: boolean }>`\n    font-family: ${(props) => props.theme.token.font.family['sans-serif']};\n    color: ${(props) => props.theme.token.color.black};\n\n    & .arthur-field-header {\n        margin-bottom: ${(props) => props.theme.token.size.spacing['small-2x']};\n    }\n\n    & .arthur-field-header-label {\n        font-weight: ${(props) => props.theme.token.weight.font.bold};\n    }\n\n    & .arthur-field-header-required {\n        color: ${(props) => props.theme.token.color.feedback.error};\n        padding-left: ${(props) => props.theme.token.size.spacing['small-2x']};\n    }\n\n    & .arthur-field-footer {\n        margin-top: ${(props) => props.theme.token.size.spacing['small-2x']};\n        ${(props) => props.$showInfoText && `color: ${props.theme.token.color.feedback.info};`}\n        ${(props) => props.$showErrorText && `color: ${props.theme.token.color.feedback.error};`}\n\n    & .arthur-field-footer-info {\n            padding-right: ${(props) => props.theme.token.size.spacing['small-2x']};\n        }\n\n        & .arthur-field-footer-error {\n        }\n    }\n\n    &.arthur-field--disabled {\n        color: ${(props) => props.theme.token.color.palette.gray[20]};\n\n        & .arthur-field-header-required {\n            color: ${(props) => props.theme.token.color.palette.gray[20]};\n        }\n\n        & .arthur-field-footer {\n            color: ${(props) => props.theme.token.color.palette.gray[20]};\n        }\n    }\n\n    ${(props) => sizeStyles[props.size]}\n`;\n\nexport interface FormFieldProps {\n    errorText?: string;\n    infoText?: string;\n    invalid?: boolean;\n    /**\n     * If true, this will add a red * to your label\n     *\n     * @default false\n     */\n    required?: boolean;\n    /**\n     * @default medium\n     */\n    size?: FormFieldSize;\n    /**\n     * @default false\n     */\n    disabled?: boolean;\n    label?: string;\n    id?: string;\n    className?: string;\n}\n\nconst FormField = forwardRef<HTMLDivElement, PropsWithChildren<FormFieldProps>>((props, forwardedRef) => {\n    const {\n        className,\n        id,\n        children,\n        disabled,\n        errorText,\n        label,\n        infoText,\n        size = FormFieldSizeEnum.medium,\n        required,\n        ...rest\n    } = props;\n\n    const targetId = useEnsureId(id);\n\n    const showHeader = Boolean(label);\n\n    const showErrorText = Boolean(errorText);\n\n    const showInfoText = Boolean(infoText);\n\n    const showFooter = showErrorText || showInfoText;\n\n    const classes = classNames(className, 'arthur-field', `arthur-field--size-${size}`, {\n        'arthur-field--disabled': disabled === true,\n    });\n\n    return (\n        <StyledRoot\n            $showErrorText={showErrorText}\n            $showInfoText={showInfoText}\n            className={classes}\n            ref={forwardedRef}\n            size={size}\n            {...rest}\n        >\n            {showHeader ? (\n                <div className='arthur-field-header'>\n                    <label className='arthur-field-header-label' htmlFor={targetId}>\n                        {label}\n                    </label>\n                    {required === true && <span className='arthur-field-header-required'>*</span>}\n                </div>\n            ) : null}\n            {children}\n            {showFooter ? (\n                <div className='arthur-field-footer'>\n                    {showInfoText ? <span className='arthur-field-footer-info'>{infoText}</span> : null}\n                    {showErrorText ? <span className='arthur-field-footer-error'>{errorText}</span> : null}\n                </div>\n            ) : null}\n        </StyledRoot>\n    );\n});\n\nexport default FormField;\nFormField.displayName = 'FormField';\n","import React, { forwardRef, useCallback } from 'react';\nimport styled, { css } from 'styled-components';\nimport classNames from 'classnames';\nimport { type IconValue, type IconSizes, IconSizesEnum } from './types';\nimport { ICON_VALUES } from './constants';\n\nexport interface IconProps {\n    className?: string;\n    /**\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * @default medium\n     */\n    size?: IconSizes;\n    onClick?: (event: React.MouseEvent<HTMLSpanElement>) => unknown;\n    value: IconValue;\n}\n\nconst iconSizeStyles = {\n    'small-1x': css`\n        font-size: ${(props) => props.theme.token.size.font['small-1x']};\n    `,\n    small: css`\n        font-size: ${(props) => props.theme.token.size.font.small};\n    `,\n    medium: css`\n        font-size: ${(props) => props.theme.token.size.font.medium};\n    `,\n    large: css`\n        font-size: ${(props) => props.theme.token.size.font.large};\n    `,\n};\n\nconst StyledRoot = styled.span<{ disabled?: boolean }>`\n    background-color: transparent;\n    border: 0px none;\n    outline: 0px none;\n    padding: 0px;\n\n    &:not(.arthur-icon--disabled) {\n        &.arthur-icon--clickable {\n            &:hover,\n            &:focus,\n            &:active {\n                color: ${(props) => props.theme.token.color.palette.gold.base};\n                cursor: pointer;\n                outline: 0px none;\n            }\n        }\n    }\n\n    &.arthur-icon--disabled {\n        color: ${(props) => props.theme.token.color.action.text.primary.disabled};\n        cursor: default;\n    }\n`;\n\nconst StyledIcon = styled.i<{ size: IconSizes }>`\n    ${(props) => iconSizeStyles[props.size]}\n`;\n\nconst Icon = forwardRef<HTMLSpanElement | HTMLButtonElement, IconProps>((props, forwardedRef) => {\n    const { className, disabled, size = 'medium', value, onClick, ...rest } = props;\n\n    const iconClass = ICON_VALUES[value];\n\n    if (!IconSizesEnum[size]) {\n        throw new Error(`icon: invalid size \"${size}\"`);\n    }\n\n    const isClickable = disabled === true || typeof onClick === 'function';\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLSpanElement>) => {\n            if (disabled) return;\n\n            onClick?.(event);\n        },\n        [disabled, onClick],\n    );\n\n    const classes = {\n        root: classNames(className, 'arthur-icon', `arthur-icon--size-${size}`, {\n            'arthur-icon--clickable': isClickable,\n            'arthur-icon--disabled': disabled === true,\n        }),\n        regular: classNames('arthur-icon-regular', 'fa-regular', {\n            'fa-foobar': Boolean(iconClass) && Boolean(value),\n            [iconClass]: Boolean(iconClass),\n            [value as string]: Boolean(iconClass) && Boolean(value),\n        }),\n    };\n\n    // The wrapping span is needed because an error is thrown if one attempts\n    // to remove this from the dom once it is rendered. This is because the \"rendered\"\n    // node is the <i /> element, but a sibling <svg /> element is created as well.\n    // Without the wrapper and in the case that the element is added and removed again,\n    // React throws.\n    return (\n        <StyledRoot\n            as={isClickable ? 'button' : 'span'}\n            className={classes.root}\n            disabled={disabled}\n            onClick={handleClick}\n            ref={forwardedRef}\n        >\n            <StyledIcon className={classes.regular} size={size} {...rest} />\n        </StyledRoot>\n    );\n});\n\nexport default Icon;\n\nIcon.displayName = 'Icon';\n"],"names":[],"sourceRoot":""}