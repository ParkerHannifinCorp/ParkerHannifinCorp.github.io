{"version":3,"file":"descriptiveList-DescriptiveListOverview-mdx.5481eef4.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAgCA;;;;;;ACrBA;AAoCA;;;ACrCA;;AAKA;AACA;AACA;;;;;;;AAOA;;;;AAIA;AACA;;;;;;AAMA;;;;AAIA;AACA;;;;AAIA;;AAEA;;;;;;AAMA;;;AAcA","sources":["webpack://@arthur/docs/./helpers/common/PictureBox.tsx","webpack://@arthur/docs/./helpers/common/StoryPicture.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/DescriptiveList/DescriptiveList.tsx"],"sourcesContent":["import React, { type PropsWithChildren, type ReactNode } from 'react';\nimport { styled } from 'styled-components';\n\nconst StyledRoot = styled.div`\n  position: relative;\n  overflow: hidden;\n  margin: 25px 0 40px;\n  border-radius: 4px;\n  background: #ffffff;\n  box-shadow: rgba(0, 0, 0, 0.1) 0 1px 3px 0;\n  border: 1px solid hsla(203, 50%, 30%, 0.15);\n\n  & .ardocs-picture {\n    overflow: hidden;\n    position: relative;\n\n    & > div {\n      display: block;\n      position: relative;\n      flex-wrap: wrap;\n      overflow: auto;\n      flex-direction: column;\n      padding: 30px 20px;\n      margin: -10px;\n    }\n  }\n`;\n\nexport interface PictureBoxProps extends PropsWithChildren {\n  children: ReactNode;\n}\n\nfunction PictureBox(props: PictureBoxProps): JSX.Element {\n  const { children } = props;\n  return (\n    <StyledRoot className='ardocs ardoc-picture-box'>\n      <div className='ardocs-picture'>\n        <div>{children}</div>\n      </div>\n    </StyledRoot>\n  );\n}\n\nexport default PictureBox;\nPictureBox.displayName = 'ArthurCanvas';\n","import React from 'react';\nimport { styled } from 'styled-components';\nimport type { ImageProps } from '@arthur/ui';\nimport PictureBox from './PictureBox';\n\nconst StyledPicture = styled.picture<{ csx: any }>`\n  display: block;\n  width: fit-content;\n  margin-left: auto;\n  margin-right: auto;\n\n  ${(props) => ({ ...props.csx })}\n`;\n\nexport interface StoryPictureProps extends ImageProps {\n  alt: string;\n  assetDir: string;\n  assetPath: string;\n  className: string;\n  csx: { string: string | number };\n  densities: string[];\n  sourceName: string;\n  sourceSuffix: string;\n  withBox?: boolean;\n}\n\nfunction sourceResolution(assetPath: string, densities: string[]): { default: string; candidates: string } {\n  const lowRes = assetPath;\n  const pathParts = assetPath.split('/');\n\n  const dirname = pathParts.slice(0, pathParts.length - 1).join('/');\n  const basename = pathParts[pathParts.length - 1];\n  const filename = basename.slice(0, basename.indexOf('.'));\n  const extension = basename.slice(basename.indexOf('.'));\n\n  const hiRes = densities.map((density) => {\n    return ` ${dirname}/${filename}@${density}${extension} ${density}`;\n  });\n\n  const setPaths = {\n    default: `${lowRes}`,\n    candidates: `${lowRes},${[...hiRes]}`,\n  };\n\n  return setPaths;\n}\n\nfunction StoryPicture(props: StoryPictureProps): JSX.Element {\n  const { alt, assetPath, className, csx, densities = ['2x'], withBox = false, ...rest } = props;\n\n  const sourcePath = sourceResolution(assetPath, densities);\n  if (withBox) {\n    return (\n      <PictureBox>\n        <StyledPicture className={className} csx={csx} data-arthur-block={rest.dataAttr}>\n          <source srcSet={sourcePath.candidates} />\n          <img src={sourcePath.default} alt={alt} />\n        </StyledPicture>\n      </PictureBox>\n    );\n  }\n\n  return (\n    <StyledPicture className='arthur-story-image' data-arthur-block={rest.dataAttr} csx={csx}>\n      <source srcSet={sourcePath.candidates} />\n      <img src={sourcePath.default} alt={alt} />\n    </StyledPicture>\n  );\n}\n\nexport default StoryPicture;\nStoryPicture.displayName = 'StoryPicture';\nStoryPicture.defaultProps = {};\n","import React, { forwardRef } from 'react';\nimport { styled, css } from 'styled-components';\nimport classNames from 'classnames';\nimport type { DescriptiveListItem, DescriptiveListVariants } from './types';\n\nconst variantStyles = {\n  default: css``,\n  striped: css`\n    & dt:nth-of-type(odd),\n    dd:nth-of-type(odd) {\n      background-color: ${(props) => props.theme.token.color.gray[5]};\n    }\n  `,\n};\n\nconst StyledRoot = styled.dl<{ variant: DescriptiveListVariants }>`\n  color: ${(props) => props.theme.token.color.gray[75]};\n  font-size: ${(props) => props.theme.token.size.font.medium};\n  margin: 0px;\n  overflow: visible;\n  padding: 0px;\n\n  & dt {\n    box-sizing: border-box;\n    font-weight: ${(props) => props.theme.token.weight.font.medium};\n    flex: 0 0 40%;\n    line-height: 1;\n    padding: 2px 0;\n    padding-left: ${(props) => props.theme.token.size.spacing['small-1x']};\n    padding-right: ${(props) => props.theme.token.size.spacing['small-1x']};\n  }\n\n  & dd {\n    box-sizing: border-box;\n    flex: 0 0 60%;\n    font-weight: ${(props) => props.theme.token.weight.font.regular};\n    line-height: 1;\n    margin-left: auto;\n    padding: 2px 0;\n    padding-left: ${(props) => props.theme.token.size.spacing['small-1x']};\n    padding-right: ${(props) => props.theme.token.size.spacing['small-1x']};\n    text-align: left;\n  }\n\n  ${(props) => variantStyles[props.variant]}\n\n  @media (min-width: ${(props) => props.theme.token.size.breakpoint['small-1x']}) {\n    display: flex;\n    flex-flow: row;\n    flex-wrap: wrap;\n\n    & dd {\n      padding-left: ${(props) => props.theme.token.size.spacing.medium};\n    }\n  }\n`;\n\nexport interface DescriptiveListProps {\n  className?: string;\n  items: DescriptiveListItem[];\n  /**\n   * @default default\n   */\n  variant?: DescriptiveListVariants;\n}\n\nconst DescriptiveList = forwardRef<HTMLUListElement, DescriptiveListProps>((props, forwardedRef) => {\n  const { className, items, variant = 'default', ...rest } = props;\n\n  const classes = classNames(className, 'arthur-descriptivelist', `arthur-descriptivelist--variant-${variant}`);\n\n  return (\n    <StyledRoot className={classes} ref={forwardedRef} variant={variant} {...rest}>\n      {items.map((item, index) => (\n        <React.Fragment key={index}>\n          <dt className='arthur-descriptivelist-item-label'>{item.label}</dt>\n          <dd className='arthur-descriptivelist-item-value'>{item.value}</dd>\n        </React.Fragment>\n      ))}\n    </StyledRoot>\n  );\n});\n\nexport default DescriptiveList;\nDescriptiveList.displayName = 'DescriptiveList';\n"],"names":[],"sourceRoot":""}