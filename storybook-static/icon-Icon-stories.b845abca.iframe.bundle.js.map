{"version":3,"file":"icon-Icon-stories.b845abca.iframe.bundle.js","mappings":";;AAsBA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;;;;;;;;;;;AAWA;;;;;;;;AAQA;;;AAKA;AACA;AAGA","sources":["webpack://@arthur/docs/../../packages/arthur-ui/src/Icon/Icon.tsx"],"sourcesContent":["import React, { forwardRef, useCallback } from 'react';\nimport styled, { css } from 'styled-components';\nimport classNames from 'classnames';\nimport { type IconValue, type IconSizes, IconSizesEnum } from './types';\nimport { ICON_VALUES } from './constants';\n\nexport interface IconProps {\n    className?: string;\n    /**\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * @default medium\n     */\n    size?: IconSizes;\n    onClick?: (event: React.MouseEvent<HTMLSpanElement>) => unknown;\n    value: IconValue;\n}\n\nconst iconSizeStyles = {\n    'small-1x': css`\n        font-size: ${(props) => props.theme.token.size.font['small-1x']};\n    `,\n    small: css`\n        font-size: ${(props) => props.theme.token.size.font.small};\n    `,\n    medium: css`\n        font-size: ${(props) => props.theme.token.size.font.medium};\n    `,\n    large: css`\n        font-size: ${(props) => props.theme.token.size.font.large};\n    `,\n};\n\nconst StyledRoot = styled.span<{ disabled?: boolean }>`\n    background-color: transparent;\n    border: 0px none;\n    outline: 0px none;\n    padding: 0px;\n\n    &:not(.arthur-icon--disabled) {\n        &.arthur-icon--clickable {\n            &:hover,\n            &:focus,\n            &:active {\n                color: ${(props) => props.theme.token.color.palette.gold.base};\n                cursor: pointer;\n                outline: 0px none;\n            }\n        }\n    }\n\n    &.arthur-icon--disabled {\n        color: ${(props) => props.theme.token.color.action.text.primary.disabled};\n        cursor: default;\n    }\n`;\n\nconst StyledIcon = styled.i<{ size: IconSizes }>`\n    ${(props) => iconSizeStyles[props.size]}\n`;\n\nconst Icon = forwardRef<HTMLSpanElement | HTMLButtonElement, IconProps>((props, forwardedRef) => {\n    const { className, disabled, size = 'medium', value, onClick, ...rest } = props;\n\n    const iconClass = ICON_VALUES[value];\n\n    if (!IconSizesEnum[size]) {\n        throw new Error(`icon: invalid size \"${size}\"`);\n    }\n\n    const isClickable = disabled === true || typeof onClick === 'function';\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLSpanElement>) => {\n            if (disabled) return;\n\n            onClick?.(event);\n        },\n        [disabled, onClick],\n    );\n\n    const classes = {\n        root: classNames(className, 'arthur-icon', `arthur-icon--size-${size}`, {\n            'arthur-icon--clickable': isClickable,\n            'arthur-icon--disabled': disabled === true,\n        }),\n        regular: classNames('arthur-icon-regular', 'fa-regular', {\n            'fa-foobar': Boolean(iconClass) && Boolean(value),\n            [iconClass]: Boolean(iconClass),\n            [value as string]: Boolean(iconClass) && Boolean(value),\n        }),\n    };\n\n    // The wrapping span is needed because an error is thrown if one attempts\n    // to remove this from the dom once it is rendered. This is because the \"rendered\"\n    // node is the <i /> element, but a sibling <svg /> element is created as well.\n    // Without the wrapper and in the case that the element is added and removed again,\n    // React throws.\n    return (\n        <StyledRoot\n            as={isClickable ? 'button' : 'span'}\n            className={classes.root}\n            disabled={disabled}\n            onClick={handleClick}\n            ref={forwardedRef}\n        >\n            <StyledIcon className={classes.regular} size={size} {...rest} />\n        </StyledRoot>\n    );\n});\n\nexport default Icon;\n\nIcon.displayName = 'Icon';\n"],"names":[],"sourceRoot":""}