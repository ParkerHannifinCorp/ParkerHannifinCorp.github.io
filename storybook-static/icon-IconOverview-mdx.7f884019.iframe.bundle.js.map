{"version":3,"file":"icon-IconOverview-mdx.7f884019.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAgCA;;;;;;ACrBA;AAoCA;ACzBA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;;;;;;;;;;;AAWA;;;;;;;;AAQA;;;AAKA;AACA;AAGA","sources":["webpack://@arthur/docs/./helpers/common/PictureBox.tsx","webpack://@arthur/docs/./helpers/common/StoryPicture.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/Icon/Icon.tsx"],"sourcesContent":["import React, { type PropsWithChildren, type ReactNode } from 'react';\nimport { styled } from 'styled-components';\n\nconst StyledRoot = styled.div`\n  position: relative;\n  overflow: hidden;\n  margin: 25px 0 40px;\n  border-radius: 4px;\n  background: #ffffff;\n  box-shadow: rgba(0, 0, 0, 0.1) 0 1px 3px 0;\n  border: 1px solid hsla(203, 50%, 30%, 0.15);\n\n  & .ardocs-picture {\n    overflow: hidden;\n    position: relative;\n\n    & > div {\n      display: block;\n      position: relative;\n      flex-wrap: wrap;\n      overflow: auto;\n      flex-direction: column;\n      padding: 30px 20px;\n      margin: -10px;\n    }\n  }\n`;\n\nexport interface PictureBoxProps extends PropsWithChildren {\n  children: ReactNode;\n}\n\nfunction PictureBox(props: PictureBoxProps): JSX.Element {\n  const { children } = props;\n  return (\n    <StyledRoot className='ardocs ardoc-picture-box'>\n      <div className='ardocs-picture'>\n        <div>{children}</div>\n      </div>\n    </StyledRoot>\n  );\n}\n\nexport default PictureBox;\nPictureBox.displayName = 'ArthurCanvas';\n","import React from 'react';\nimport { styled } from 'styled-components';\nimport type { ImageProps } from '@arthur/ui';\nimport PictureBox from './PictureBox';\n\nconst StyledPicture = styled.picture<{ csx: any }>`\n  display: block;\n  width: fit-content;\n  margin-left: auto;\n  margin-right: auto;\n\n  ${(props) => ({ ...props.csx })}\n`;\n\nexport interface StoryPictureProps extends ImageProps {\n  alt: string;\n  assetDir: string;\n  assetPath: string;\n  className: string;\n  csx: { string: string | number };\n  densities: string[];\n  sourceName: string;\n  sourceSuffix: string;\n  withBox?: boolean;\n}\n\nfunction sourceResolution(assetPath: string, densities: string[]): { default: string; candidates: string } {\n  const lowRes = assetPath;\n  const pathParts = assetPath.split('/');\n\n  const dirname = pathParts.slice(0, pathParts.length - 1).join('/');\n  const basename = pathParts[pathParts.length - 1];\n  const filename = basename.slice(0, basename.indexOf('.'));\n  const extension = basename.slice(basename.indexOf('.'));\n\n  const hiRes = densities.map((density) => {\n    return ` ${dirname}/${filename}@${density}${extension} ${density}`;\n  });\n\n  const setPaths = {\n    default: `${lowRes}`,\n    candidates: `${lowRes},${[...hiRes]}`,\n  };\n\n  return setPaths;\n}\n\nfunction StoryPicture(props: StoryPictureProps): JSX.Element {\n  const { alt, assetPath, className, csx, densities = ['2x'], withBox = false, ...rest } = props;\n\n  const sourcePath = sourceResolution(assetPath, densities);\n  if (withBox) {\n    return (\n      <PictureBox>\n        <StyledPicture className={className} csx={csx} data-arthur-block={rest.dataAttr}>\n          <source srcSet={sourcePath.candidates} />\n          <img src={sourcePath.default} alt={alt} />\n        </StyledPicture>\n      </PictureBox>\n    );\n  }\n\n  return (\n    <StyledPicture className='arthur-story-image' data-arthur-block={rest.dataAttr} csx={csx}>\n      <source srcSet={sourcePath.candidates} />\n      <img src={sourcePath.default} alt={alt} />\n    </StyledPicture>\n  );\n}\n\nexport default StoryPicture;\nStoryPicture.displayName = 'StoryPicture';\nStoryPicture.defaultProps = {};\n","import React, { forwardRef, useCallback } from 'react';\nimport styled, { css } from 'styled-components';\nimport classNames from 'classnames';\nimport { type IconValue, type IconSizes, IconSizesEnum } from './types';\nimport { ICON_VALUES } from './constants';\n\nexport interface IconProps {\n    className?: string;\n    /**\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * @default medium\n     */\n    size?: IconSizes;\n    onClick?: (event: React.MouseEvent<HTMLSpanElement>) => unknown;\n    value: IconValue;\n}\n\nconst iconSizeStyles = {\n    'small-1x': css`\n        font-size: ${(props) => props.theme.token.size.font['small-1x']};\n    `,\n    small: css`\n        font-size: ${(props) => props.theme.token.size.font.small};\n    `,\n    medium: css`\n        font-size: ${(props) => props.theme.token.size.font.medium};\n    `,\n    large: css`\n        font-size: ${(props) => props.theme.token.size.font.large};\n    `,\n};\n\nconst StyledRoot = styled.span<{ disabled?: boolean }>`\n    background-color: transparent;\n    border: 0px none;\n    outline: 0px none;\n    padding: 0px;\n\n    &:not(.arthur-icon--disabled) {\n        &.arthur-icon--clickable {\n            &:hover,\n            &:focus,\n            &:active {\n                color: ${(props) => props.theme.token.color.palette.gold.base};\n                cursor: pointer;\n                outline: 0px none;\n            }\n        }\n    }\n\n    &.arthur-icon--disabled {\n        color: ${(props) => props.theme.token.color.action.text.primary.disabled};\n        cursor: default;\n    }\n`;\n\nconst StyledIcon = styled.i<{ size: IconSizes }>`\n    ${(props) => iconSizeStyles[props.size]}\n`;\n\nconst Icon = forwardRef<HTMLSpanElement | HTMLButtonElement, IconProps>((props, forwardedRef) => {\n    const { className, disabled, size = 'medium', value, onClick, ...rest } = props;\n\n    const iconClass = ICON_VALUES[value];\n\n    if (!IconSizesEnum[size]) {\n        throw new Error(`icon: invalid size \"${size}\"`);\n    }\n\n    const isClickable = disabled === true || typeof onClick === 'function';\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLSpanElement>) => {\n            if (disabled) return;\n\n            onClick?.(event);\n        },\n        [disabled, onClick],\n    );\n\n    const classes = {\n        root: classNames(className, 'arthur-icon', `arthur-icon--size-${size}`, {\n            'arthur-icon--clickable': isClickable,\n            'arthur-icon--disabled': disabled === true,\n        }),\n        regular: classNames('arthur-icon-regular', 'fa-regular', {\n            'fa-foobar': Boolean(iconClass) && Boolean(value),\n            [iconClass]: Boolean(iconClass),\n            [value as string]: Boolean(iconClass) && Boolean(value),\n        }),\n    };\n\n    // The wrapping span is needed because an error is thrown if one attempts\n    // to remove this from the dom once it is rendered. This is because the \"rendered\"\n    // node is the <i /> element, but a sibling <svg /> element is created as well.\n    // Without the wrapper and in the case that the element is added and removed again,\n    // React throws.\n    return (\n        <StyledRoot\n            as={isClickable ? 'button' : 'span'}\n            className={classes.root}\n            disabled={disabled}\n            onClick={handleClick}\n            ref={forwardedRef}\n        >\n            <StyledIcon className={classes.regular} size={size} {...rest} />\n        </StyledRoot>\n    );\n});\n\nexport default Icon;\n\nIcon.displayName = 'Icon';\n"],"names":[],"sourceRoot":""}