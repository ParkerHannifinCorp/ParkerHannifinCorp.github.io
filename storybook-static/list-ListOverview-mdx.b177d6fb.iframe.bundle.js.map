{"version":3,"file":"list-ListOverview-mdx.b177d6fb.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAgCA;;;;;;ACrBA;AAoCA;;;;ACnCA;;AAGA;;;AAGA;;AAGA;;;;AAIA;;;;;AAQA;AACA;AACA;;;;AAIA;;AAEA;AAeA;;;ACjDA;AACA;AACA;;;AASA","sources":["webpack://@arthur/docs/./helpers/common/PictureBox.tsx","webpack://@arthur/docs/./helpers/common/StoryPicture.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/List/List.tsx","webpack://@arthur/docs/../../packages/arthur-ui/src/List/ListItem.tsx"],"sourcesContent":["import React, { type PropsWithChildren, type ReactNode } from 'react';\nimport { styled } from 'styled-components';\n\nconst StyledRoot = styled.div`\n  position: relative;\n  overflow: hidden;\n  margin: 25px 0 40px;\n  border-radius: 4px;\n  background: #ffffff;\n  box-shadow: rgba(0, 0, 0, 0.1) 0 1px 3px 0;\n  border: 1px solid hsla(203, 50%, 30%, 0.15);\n\n  & .ardocs-picture {\n    overflow: hidden;\n    position: relative;\n\n    & > div {\n      display: block;\n      position: relative;\n      flex-wrap: wrap;\n      overflow: auto;\n      flex-direction: column;\n      padding: 30px 20px;\n      margin: -10px;\n    }\n  }\n`;\n\nexport interface PictureBoxProps extends PropsWithChildren {\n  children: ReactNode;\n}\n\nfunction PictureBox(props: PictureBoxProps): JSX.Element {\n  const { children } = props;\n  return (\n    <StyledRoot className='ardocs ardoc-picture-box'>\n      <div className='ardocs-picture'>\n        <div>{children}</div>\n      </div>\n    </StyledRoot>\n  );\n}\n\nexport default PictureBox;\nPictureBox.displayName = 'ArthurCanvas';\n","import React from 'react';\nimport { styled } from 'styled-components';\nimport type { ImageProps } from '@arthur/ui';\nimport PictureBox from './PictureBox';\n\nconst StyledPicture = styled.picture<{ csx: any }>`\n  display: block;\n  width: fit-content;\n  margin-left: auto;\n  margin-right: auto;\n\n  ${(props) => ({ ...props.csx })}\n`;\n\nexport interface StoryPictureProps extends ImageProps {\n  alt: string;\n  assetDir: string;\n  assetPath: string;\n  className: string;\n  csx: { string: string | number };\n  densities: string[];\n  sourceName: string;\n  sourceSuffix: string;\n  withBox?: boolean;\n}\n\nfunction sourceResolution(assetPath: string, densities: string[]): { default: string; candidates: string } {\n  const lowRes = assetPath;\n  const pathParts = assetPath.split('/');\n\n  const dirname = pathParts.slice(0, pathParts.length - 1).join('/');\n  const basename = pathParts[pathParts.length - 1];\n  const filename = basename.slice(0, basename.indexOf('.'));\n  const extension = basename.slice(basename.indexOf('.'));\n\n  const hiRes = densities.map((density) => {\n    return ` ${dirname}/${filename}@${density}${extension} ${density}`;\n  });\n\n  const setPaths = {\n    default: `${lowRes}`,\n    candidates: `${lowRes},${[...hiRes]}`,\n  };\n\n  return setPaths;\n}\n\nfunction StoryPicture(props: StoryPictureProps): JSX.Element {\n  const { alt, assetPath, className, csx, densities = ['2x'], withBox = false, ...rest } = props;\n\n  const sourcePath = sourceResolution(assetPath, densities);\n  if (withBox) {\n    return (\n      <PictureBox>\n        <StyledPicture className={className} csx={csx} data-arthur-block={rest.dataAttr}>\n          <source srcSet={sourcePath.candidates} />\n          <img src={sourcePath.default} alt={alt} />\n        </StyledPicture>\n      </PictureBox>\n    );\n  }\n\n  return (\n    <StyledPicture className='arthur-story-image' data-arthur-block={rest.dataAttr} csx={csx}>\n      <source srcSet={sourcePath.candidates} />\n      <img src={sourcePath.default} alt={alt} />\n    </StyledPicture>\n  );\n}\n\nexport default StoryPicture;\nStoryPicture.displayName = 'StoryPicture';\nStoryPicture.defaultProps = {};\n","import type { PropsWithChildren } from 'react';\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport classnames from 'classnames';\nimport type { ListVariants } from './types';\nimport { ListVariantsEnum } from './types';\n\nconst variantStyles = {\n    default: css`\n        list-style-type: 'â€¢';\n        & ul {\n            list-style-type: '-';\n            margin-left: ${(props) => props.theme.token.size.spacing['large-1x']};\n        }\n    `,\n    ordered: css`\n        & ol {\n            list-style-type: lower-alpha;\n            margin-left: ${(props) => props.theme.token.size.spacing['large-2x']};\n        }\n    `,\n    plain: css`\n        & ol,\n        ul {\n            list-style-type: none;\n            margin-left: ${(props) => props.theme.token.size.spacing.small};\n        }\n        li {\n            list-style-type: none;\n        }\n    `,\n};\n\nconst StyledRoot = styled.ul<Pick<ListProps, 'columns'> & { variant: ListVariants }>`\n    color: ${(props) => props.theme.token.color.black};\n    font-size: ${(props) => props.theme.token.size.font.medium};\n    list-style-position: outside;\n    margin: 0px;\n    padding: 0px;\n    columns: ${(props) => (props.columns ? props.columns : 'initial')};\n\n    ${(props) => variantStyles[props.variant]}\n`;\n\nexport interface ListProps {\n    className?: string;\n    /**\n     * @default default\n     */\n    variant?: ListVariants;\n    /**\n     * Splits the layout into columns\n     */\n    columns?: number;\n}\n\nconst List = forwardRef<HTMLUListElement | HTMLOListElement, PropsWithChildren<ListProps>>((props, forwardedRef) => {\n    const { children, className, variant = ListVariantsEnum.default, ...rest } = props;\n\n    const classes = classnames(className, 'arthur-list', `arthur-list--variant-${variant}`);\n\n    return (\n        <StyledRoot\n            as={variant === 'ordered' ? 'ol' : 'ul'}\n            className={classes}\n            ref={forwardedRef}\n            variant={variant}\n            {...rest}\n        >\n            {children}\n        </StyledRoot>\n    );\n});\n\nexport default List;\nList.displayName = 'List';\n","import { PropsWithChildren } from 'react';\nimport styled from 'styled-components';\nimport classnames from 'classnames';\n\nconst StyledRoot = styled.li`\n        list-style-position: outside;\n        margin: 0px;\n        margin-bottom: ${(props) => props.theme.token.size.spacing['small-2x']};\n        margin-left: ${(props) => props.theme.token.size.spacing['small-1x']};\n        padding-left: ${(props) => props.theme.token.size.spacing['small-1x']};\n        line-height: 1.25;\n    }\n`;\n\nexport interface ListItemProps {\n    className?: string;\n}\n\nexport const ListItem = (props: PropsWithChildren<ListItemProps>) => {\n    const { children, className } = props;\n\n    const classes = classnames(className, 'arthur-list-item');\n\n    return <StyledRoot className={classes}>{children}</StyledRoot>;\n};\n\nListItem.displayName = 'ListItem';\n"],"names":[],"sourceRoot":""}